import plotly.graph_objects as go
import streamlit as st
import pandas as pd
import numpy as np
from streamlit_option_menu import option_menu
import matplotlib.pyplot as plt
from matplotlib.offsetbox import OffsetImage, AnnotationBbox
from PIL import Image
import io
import requests
from io import BytesIO
import urllib.request
from soccerplots.radar_chart import Radar
import matplotlib.colors as mcolors
from scipy.stats import pearsonr
import base64
import matplotlib.patheffects as path_effects


# Setup our colours
color_link = ['#000000', '#FFFF00', '#1CE6FF', '#FF34FF', '#FF4A46',
'#008941', '#006FA6', '#A30059','#FFDBE5', '#7A4900',
'#0000A6', '#63FFAC', '#B79762', '#004D43', '#8FB0FF',
'#997D87', '#5A0007', '#809693', '#FEFFE6', '#1B4400',
'#4FC601', '#3B5DFF', '#4A3B53', '#FF2F80', '#61615A',
'#BA0900', '#6B7900', '#00C2A0', '#FFAA92', '#FF90C9',
'#B903AA', '#D16100', '#DDEFFF', '#000035', '#7B4F4B',
'#A1C299', '#300018', '#0AA6D8', '#013349', '#00846F',
'#372101', '#FFB500', '#C2FFED', '#A079BF', '#CC0744',
'#C0B9B2', '#C2FF99', '#001E09', '#00489C', '#6F0062',
'#0CBD66', '#EEC3FF', '#456D75', '#B77B68', '#7A87A1',
'#788D66', '#885578', '#FAD09F', '#FF8A9A', '#D157A0',
'#BEC459', '#456648', '#0086ED', '#886F4C', '#34362D',
'#B4A8BD', '#00A6AA', '#452C2C', '#636375', '#A3C8C9',
'#FF913F', '#938A81', '#575329', '#00FECF', '#B05B6F',
'#8CD0FF', '#3B9700', '#04F757', '#C8A1A1', '#1E6E00',
'#7900D7', '#A77500', '#6367A9', '#A05837', '#6B002C',
'#772600', '#D790FF', '#9B9700', '#549E79', '#FFF69F',
'#201625', '#72418F', '#BC23FF', '#99ADC0', '#3A2465',
'#922329', '#5B4534', '#FDE8DC', '#404E55', '#0089A3',
'#CB7E98', '#A4E804', '#324E72', '#6A3A4C'
]


club_image_paths = {
              'Athletico': 'https://raw.githubusercontent.com/JAmerico1898/Financials-2025/1cfddd572c20dd697421c1703bcb8e2ed7c8a7be/Athletico.png',
              'Atlético': 'https://raw.githubusercontent.com/JAmerico1898/Financials-2025/1cfddd572c20dd697421c1703bcb8e2ed7c8a7be/Atl%C3%A9tico.png',
              'Atletico': 'https://raw.githubusercontent.com/JAmerico1898/Financials-2025/345fc6e77fd203912403e2cefe633889842321e8/Atletico.png',
              'Atlético GO':'https://raw.githubusercontent.com/JAmerico1898/Financials-2025/1cfddd572c20dd697421c1703bcb8e2ed7c8a7be/Atl%C3%A9tico%20GO.png',
              'AtleticoGO':'https://raw.githubusercontent.com/JAmerico1898/Financials-2025/1cfddd572c20dd697421c1703bcb8e2ed7c8a7be/AtleticoGO.png',
              'Bahia': 'https://raw.githubusercontent.com/JAmerico1898/Financials-2025/1cfddd572c20dd697421c1703bcb8e2ed7c8a7be/Bahia.png', 
              'Botafogo': 'https://raw.githubusercontent.com/JAmerico1898/Financials-2025/1cfddd572c20dd697421c1703bcb8e2ed7c8a7be/Botafogo.png', 
              'Corinthians': 'https://raw.githubusercontent.com/JAmerico1898/Financials-2025/1cfddd572c20dd697421c1703bcb8e2ed7c8a7be/Corinthians.png',
              'Criciúma': 'https://raw.githubusercontent.com/JAmerico1898/Financials-2025/1cfddd572c20dd697421c1703bcb8e2ed7c8a7be/Crici%C3%BAma.png',
              'Criciuma': 'https://raw.githubusercontent.com/JAmerico1898/Financials-2025/1cfddd572c20dd697421c1703bcb8e2ed7c8a7be/Criciuma.png',
              'Cruzeiro': 'https://raw.githubusercontent.com/JAmerico1898/Financials-2025/1cfddd572c20dd697421c1703bcb8e2ed7c8a7be/Cruzeiro.png',
              'Cuiabá': 'https://raw.githubusercontent.com/JAmerico1898/Financials-2025/1cfddd572c20dd697421c1703bcb8e2ed7c8a7be/Cuiab%C3%A1.png', 
              'Cuiaba': 'https://raw.githubusercontent.com/JAmerico1898/Financials-2025/1cfddd572c20dd697421c1703bcb8e2ed7c8a7be/Cuiaba.png', 
              'Flamengo': 'https://raw.githubusercontent.com/JAmerico1898/Financials-2025/1cfddd572c20dd697421c1703bcb8e2ed7c8a7be/Flamengo.png', 
              'Fluminense': 'https://raw.githubusercontent.com/JAmerico1898/Financials-2025/1cfddd572c20dd697421c1703bcb8e2ed7c8a7be/Fluminense.png',
              'Fortaleza': 'https://raw.githubusercontent.com/JAmerico1898/Financials-2025/1cfddd572c20dd697421c1703bcb8e2ed7c8a7be/Fortaleza.png',
              'Grêmio': 'https://raw.githubusercontent.com/JAmerico1898/Financials-2025/1cfddd572c20dd697421c1703bcb8e2ed7c8a7be/Gr%C3%AAmio.png', 
              'Gremio': 'https://raw.githubusercontent.com/JAmerico1898/Financials-2025/1cfddd572c20dd697421c1703bcb8e2ed7c8a7be/Gremio.png', 
              'Internacional': 'https://raw.githubusercontent.com/JAmerico1898/Financials-2025/1cfddd572c20dd697421c1703bcb8e2ed7c8a7be/Internacional.png',
              'Juventude': 'https://raw.githubusercontent.com/JAmerico1898/Financials-2025/1cfddd572c20dd697421c1703bcb8e2ed7c8a7be/Juventude.png',  
              'Palmeiras': 'https://raw.githubusercontent.com/JAmerico1898/Financials-2025/1cfddd572c20dd697421c1703bcb8e2ed7c8a7be/Palmeiras.png',
              'Red Bull Bragantino': 'https://raw.githubusercontent.com/JAmerico1898/Financials-2025/1cfddd572c20dd697421c1703bcb8e2ed7c8a7be/Red%20Bull%20Bragantino.png', 
              'São Paulo': 'https://raw.githubusercontent.com/JAmerico1898/Financials-2025/1cfddd572c20dd697421c1703bcb8e2ed7c8a7be/S%C3%A3o%20Paulo.png',
              'SaoPaulo': 'https://raw.githubusercontent.com/JAmerico1898/Financials-2025/1cfddd572c20dd697421c1703bcb8e2ed7c8a7be/SaoPaulo.png',
              'Vasco': 'https://raw.githubusercontent.com/JAmerico1898/Financials-2025/1cfddd572c20dd697421c1703bcb8e2ed7c8a7be/Vasco.png',
              'Vitória': 'https://raw.githubusercontent.com/JAmerico1898/Financials-2025/1cfddd572c20dd697421c1703bcb8e2ed7c8a7be/Vit%C3%B3ria.png', 
              'Vitoria': 'https://raw.githubusercontent.com/JAmerico1898/Financials-2025/1cfddd572c20dd697421c1703bcb8e2ed7c8a7be/Vitoria.png', 
              'Brasileirão': 'https://raw.githubusercontent.com/JAmerico1898/Financials-2025/https://github.com/JAmerico1898/Financials-2025/blob/1cfddd572c20dd697421c1703bcb8e2ed7c8a7be/Brasileir%C3%A3o.jpg'
              }

# Loading base file
df = pd.read_csv("resultado.csv")
df1 = pd.read_csv("índices.csv")
df1_2023 = pd.read_csv("índices_2023.csv")
#df2 = pd.read_csv("caixa.csv")
df3 = pd.read_csv("Painel_Cte.csv")
df4 = pd.read_csv("Transparência.csv")
df5 = pd.read_csv("Transparência (2).csv")
df6 = pd.read_csv("Painel_Cte (2).csv")

clubs = pd.read_csv("clubes.csv")
alt_clubs = pd.read_csv("alt_clubes.csv")

# Defining clubes
clubes = ["Atlético GO", "Atlético", "Athletico", "Bahia", "Botafogo", 
          "Corinthians", "Vitória", "Cruzeiro", "Cuiabá", "Flamengo", 
          "Fluminense", "Fortaleza", "Grêmio", "Criciúma", "Internacional", 
          "Palmeiras", "Juventude", "São Paulo", "Vasco"]


# Defining labels_resultado
label = ["Direitos de transmissão", "Publicidade e patrocínio", "Arrecadação de jogos", 
         "Sócio-torcedor", "Premiações", "Licenciamento da marca", "RECEITA RECORRENTE", 
         "Negociação de atletas", "Outras receitas", "RECEITA OPERACIONAL", 
         "Pessoal e encargos sociais", "Direitos de imagem", "Despesas com jogos", 
         "Despesas gerais e administrativas", "Depreciação e amortização", "Outras despesas", 
         "DESPESAS", "RESULTADO OPERACIONAL", "Resultado financeiro", "RESULTADO", "Venda de Direitos - Liga Forte",
         "Outras Despesas Operacionais"]

# Defining labels_caixa
label_caixa = ["Direitos de transmissão", "Publicidade e patrocínio", "Arrecadação de jogos", 
         "Sócio-torcedor", "Premiações", "Licenciamento da marca", "Negociação de atletas", 
         "GERAÇÃO DE CAIXA TOTAL", "SAÍDAS DE CAIXA OPERACIONAIS", "Pessoal e encargos sociais", 
         "Direitos de imagem", "Despesas com jogos", "Despesas gerais e administrativas", 
         "Outras despesas", "Ajuste na Geração de Caixa Operacional", "GERAÇÃO DE CAIXA OPERACIONAL", 
         "CAIXA DESTINADO A INVESTIMENTOS", "Compra de Jogadores", "Compra de Imobilizado", "Outras", 
         "CAIXA DESTINADO A FINANCIAMENTOS", "AUMENTO/DIMINUIÇÃO DE CAIXA"]

# Defining temas contábeis
temas_cont = ["Receita c/ Transmissão + Premiações", "Receita c/ Publicidade e patrocínio", 
         "Receita de Match-Day", "Receita c/ Sócio-torcedor", "Receita c/ Match-Day + ST", 
         "Receita c/ Licenciamento da marca", "Receita Recorrente", "Receita c/ Negociação de Atletas", 
         "Receita Operacional", "Resultado", "Dívida", "Despesas gerais e administrativas"]#, "Despesas totais"]

# Defining temas esportivos
temas_esport = ["Folha do futebol", "Ticket médio", "Aquisições de atletas", "Folha do Futebol + Compra de Jogadores",
                 "Base de Torcedores", "Pontuação Série A", "Bilheteria Série A (R$ milhões)", 
                 "Bilheteria média (R$ mil/jogo)", "Público Médio (pagantes)", "Sócios-Torcedores", 
                 "Valor do Elenco (€ milhões)"]

# Defining temas gerenciais
temas_ger = ["Folha do futebol / Receita Operacional", "Folha futebol + Compra jogadores / Rec Oper Líquida",
             "Receita Operacional / Base de Torcedores", 
             "Receita Operacional / Sócios Torcedores", 
             "Receita com Venda de Direitos Econômicos / Pontuação Série A", 
             "Folha do futebol / Pontuação Série A", 
             "Receita Operacional / Pontuação Série A", #"Receita c/ Pay-per-View", 
             "Dívida / Receita Operacional",
             "Despesas Administrativas / Folha do Futebol" 
             ]

# Defining temas
temas_y = ["Pontuação Série A",  
           "ST + Match-Day", "Receita c/ Sócio-torcedor",  
           "Bilheteria média Série A (R$ mil/jogo)", "Público Médio (pagantes)", 
           "Sócios-Torcedores", "Resultado", "Bilheteria Série A (R$ milhões)"            
           ]

# Defining temas
temas_x = ["Receita c/ Transmissão + Premiações", "Folha do futebol", "Base de Torcedores", 
           "Dívida", "Aquisições de atletas", "Receita c/ Negociação de atletas", 
           "Receita Operacional", "Valor do Elenco (€ milhões)",  
           "Receita c/ Publicidade e patrocínio",  
           "ST + Match-Day", "Folha do Futebol + Compra de Jogadores"
           ]

st.markdown("<h2 style='text-align: center;  color: black;'>Almanaque Financeiro da Série A<br>2024 </b></h2>", unsafe_allow_html=True)
st.markdown("---")

# Plotting Braileirão Logo
# GitHub raw URL
image_url = "https://raw.githubusercontent.com/JAmerico1898/Financials-2025/1cfddd572c20dd697421c1703bcb8e2ed7c8a7be/Brasileir%C3%A3o.jpg"

st.markdown(
    f"""
    <div style="display: flex; justify-content: center;">
        <img src="{image_url}" width="150">
    </div>
    """,
    unsafe_allow_html=True
)
st.markdown("---")

import streamlit as st

# Define your options
options = [
    "Análise Individual - 2024", 
    "Análise Individual - Histórica", 
    "Análise Comparativa Simples", 
    "Análise Conjunta", 
    "Compare 2 clubes!", 
    "Índice de Transparência"
]

# Create a container for the buttons
st.markdown("<h3 style='text-align: center; color: black;'>Selecione uma opção:</h3>", unsafe_allow_html=True)

# Initialize session state variables if they don't exist
if 'selected_option' not in st.session_state:
    st.session_state.selected_option = None

# Define button click handlers for each option
def select_option(option):
    st.session_state.selected_option = option

# Define custom CSS for button styling
st.markdown("""
<style>
    /* Default button style (light gray) */
    .stButton > button {
        background-color: #f0f2f6 !important;
        color: #31333F !important;
        border-color: #d2d6dd !important;
        width: 100%;
    }
    
    /* Selected button style (red) */
    .selected-button {
        background-color: #FF4B4B !important;
        color: white !important;
        border-color: #FF0000 !important;
        width: 100%;
        padding: 0.5rem;
        font-weight: 400;
        border-radius: 0.25rem;
        cursor: default;
        text-align: center;
        margin-bottom: 0.75rem;
    }
</style>
""", unsafe_allow_html=True)

# Create two rows of columns for the buttons
col1, col2, col3 = st.columns(3)
col4, col5, col6 = st.columns(3)

# Row 1
with col1:
    if st.session_state.selected_option == options[0]:
        # Display selected (red) button
        st.markdown(
            f"""
            <div data-testid="stButton">
                <button class="selected-button">
                    {options[0]}
                </button>
            </div>
            """, 
            unsafe_allow_html=True
        )
    else:
        # Display default (gray) button
        st.button(options[0], key="btn1", use_container_width=True, on_click=select_option, args=(options[0],))

with col2:
    if st.session_state.selected_option == options[1]:
        # Display selected (red) button
        st.markdown(
            f"""
            <div data-testid="stButton">
                <button class="selected-button">
                    {options[1]}
                </button>
            </div>
            """, 
            unsafe_allow_html=True
        )
    else:
        # Display default (gray) button
        st.button(options[1], key="btn2", use_container_width=True, on_click=select_option, args=(options[1],))

with col3:
    if st.session_state.selected_option == options[2]:
        # Display selected (red) button
        st.markdown(
            f"""
            <div data-testid="stButton">
                <button class="selected-button">
                    {options[2]}
                </button>
            </div>
            """, 
            unsafe_allow_html=True
        )
    else:
        # Display default (gray) button
        st.button(options[2], key="btn3", use_container_width=True, on_click=select_option, args=(options[2],))

# Row 2
with col4:
    if st.session_state.selected_option == options[3]:
        # Display selected (red) button
        st.markdown(
            f"""
            <div data-testid="stButton">
                <button class="selected-button">
                    {options[3]}
                </button>
            </div>
            """, 
            unsafe_allow_html=True
        )
    else:
        # Display default (gray) button
        st.button(options[3], key="btn4", use_container_width=True, on_click=select_option, args=(options[3],))

with col5:
    if st.session_state.selected_option == options[4]:
        # Display selected (red) button
        st.markdown(
            f"""
            <div data-testid="stButton">
                <button class="selected-button">
                    {options[4]}
                </button>
            </div>
            """, 
            unsafe_allow_html=True
        )
    else:
        # Display default (gray) button
        st.button(options[4], key="btn5", use_container_width=True, on_click=select_option, args=(options[4],))

with col6:
    if st.session_state.selected_option == options[5]:
        # Display selected (red) button
        st.markdown(
            f"""
            <div data-testid="stButton">
                <button class="selected-button">
                    {options[5]}
                </button>
            </div>
            """, 
            unsafe_allow_html=True
        )
    else:
        # Display default (gray) button
        st.button(options[5], key="btn6", use_container_width=True, on_click=select_option, args=(options[5],))

st.write("---")   
###############################################################################################################################

if st.session_state.selected_option == "Compare 2 clubes!":
    
    # Custom CSS for better formatting
    st.markdown("""
    <style>
        .main {
            padding: 2rem;
        }
        .stAlert {
            background-color: #f8f9fa;
            padding: 1rem;
            border-radius: 0.5rem;
            border-left: 5px solid #ff4b4b;
        }
        .info-box {
            background-color: #e6f3ff;
            padding: 1rem;
            border-radius: 0.5rem;
            border-left: 5px solid #4B8BF5;
            margin-bottom: 1rem;
        }
        h1, h2, h3 {
            color: #1E3A8A;
        }
        .katex {
            font-size: 1.1em;
        }
    </style>
    """, unsafe_allow_html=True)

    # Custom styled title
    st.markdown("""
    <h5 style='font-size: 20px; font-weight: bold; font-family: Arial, sans-serif; color: #1E3A8A; margin-bottom: 10px;'>
    ℹ️ Sobre esta análise
    </h5>
    """, unsafe_allow_html=True)

    with st.expander("ℹ️ Clique para expandir", expanded=False):
        st.markdown("""
        <div class="info-box">
        <h4>Compare 2 Clubes:</h4>
        <p>Confronta dois clubes de sua escolha através de um gráfico radar intuitivo. 
        Esta visualização apresenta simultaneamente as principais receitas e despesas financeiras, onde
        cada clube é representado por uma cor distinta, facilitando a identificação rápida de áreas 
        onde um clube supera o outro, além de revelar os diferentes perfis de geração de receita e 
        estrutura de gastos.</p>
        </div>
        """, unsafe_allow_html=True)
    
    st.write("---")
    
    st.markdown("<h5 style='text-align: center; color: black;'>Escolha o primeiro Clube</b></h5>", unsafe_allow_html=True)
    clube1 = st.selectbox("", options=clubes, index=None, placeholder="Escolha o primeiro Clube!")
    st.markdown("<h5 style='text-align: center; color: black;'>Escolha o segundo Clube</b></h5>", unsafe_allow_html=True)
    clube2 = st.selectbox("", options=clubes, index=None, placeholder="Escolha o segundo Clube!")

    if clube1 and clube2:

        if (df1.at[4, clube1] == 0) or (df1.at[4, clube2] == 0):

            #Plotting Headline
            fontsize=24
            headline = f"<div style='text-align:center;  color: black; font-weight: bold; font-size:{fontsize}px'>{clube1} x {clube2}</div>"
            st.markdown("<h4 style='text-align: center;'>Comparativo dos Principais Indicadores</h4>", unsafe_allow_html=True)
            st.markdown(headline, unsafe_allow_html=True)

            dfb = df1.iloc[np.r_[0:2, 58, 7, 9, 22, 26], np.r_[0:21]]
            dfb_transposed = dfb.T
            # Set the first row as the new header
            dfb_transposed.columns = dfb_transposed.iloc[0]
            # Drop the first row
            dfb_transposed = dfb_transposed.iloc[1:]
            # Rename the first column to 'clubs'
            dfb_transposed.index.name = 'Clubes'
            dfb = dfb_transposed
            # Renaming Columns
            dfb = dfb.rename(columns={"Receita c/ Publicidade e patrocínio": "Publicidade/patrocínio",
                                    "Receita c/ Match-Day": "Match-Day",
                                    "Receita c/ Sócio-torcedor": "Sócio-Torcedor",
                                    "Receita c/ Negociação de atletas": "Venda de jogadores",
                                    "Receita c/ Transmissão + Premiações": "TV + Premiações",
                                    "Receita c/ Licenciamento da marca": "Licenciamento",
                                    "Receita Operacional": "Receita Operacional" 
                                    })
            
            # Preparing the Graph
            params = list(dfb.columns)
            params = params[0:]
            #Preparing Data
            ranges = []
            a_values = []
            b_values = []

            for x in params:
                a = min(dfb[params][x])
                a = a
                b = max(dfb[params][x])
                b = b
                ranges.append((a, b))

            for x in range(len(dfb.index)):
                if dfb.index[x] == clube1:
                    a_values = dfb.iloc[x].values.tolist()
                if dfb.index[x] == clube2:
                    b_values = dfb.iloc[x].values.tolist()
                                        
            a_values = a_values[0:]
            b_values = b_values[0:]

            # Rounding values to no decimal places
            a_values = [round(value) for value in a_values]
            b_values = [round(value) for value in b_values]

            values = [a_values, b_values]

            #Plotting Data
            title = dict(
                title_name = clube1,
                title_color = '#B6282F',
                subtitle_name = "(R$ milhões)",
                subtitle_color = '#B6282F',
                title_name_2 = clube2,
                title_color_2 = '#344D94',
                subtitle_name_2 = "(R$ milhões)",
                subtitle_color_2 = '#344D94',
                title_fontsize = 18,
            ) 

            ## instantiate object
            radar = Radar()

            ## instantiate object -- changing fontsize
            radar=Radar(fontfamily='Cursive', range_fontsize=14)
            radar=Radar(fontfamily='Cursive', label_fontsize=14)

            fig,ax = radar.plot_radar(ranges=ranges,params=params,values=values,radar_color=['#B6282F', '#344D94'], dpi=600, alphas=[.6,.5], title=title, compare=True)
            st.pyplot(fig)





        elif (df1.at[4, clube1] != 0) or (df1.at[4, clube2] != 0):

            dfb = df1.iloc[np.r_[47, 4:6, 58, 7, 9, 22, 26], np.r_[0:21]]
            dfb_transposed = dfb.T
            # Set the first row as the new header
            dfb_transposed.columns = dfb_transposed.iloc[0]
            # Drop the first row
            dfb_transposed = dfb_transposed.iloc[1:]
            # Rename the first column to 'clubs'
            dfb_transposed.index.name = 'Clubes'
            dfb = dfb_transposed
            # Renaming Columns
            dfb = dfb.rename(columns={"Receita c/ Publicidade e patrocínio": "Publicidade/patrocínio",
                                    "Receita c/ Match-Day": "Match-Day",
                                    "Receita c/ Sócio-torcedor": "Sócio-Torcedor",
                                    "Receita c/ Negociação de atletas": "Venda de jogadores",
                                    "Receita c/ Direitos de transmissão": "Direitos de TV",
                                    "Receita c/ Licenciamento da marca": "Licenciamento",
                                    "Receita Operacional": "Receita Operacional" 
                                    })
            
            # Preparing the Graph
            params = list(dfb.columns)
            params = params[0:]
            #Preparing Data
            ranges = []
            a_values = []
            b_values = []

            for x in params:
                a = min(dfb[params][x])
                a = a
                b = max(dfb[params][x])
                b = b
                ranges.append((a, b))

            for x in range(len(dfb.index)):
                if dfb.index[x] == clube1:
                    a_values = dfb.iloc[x].values.tolist()
                if dfb.index[x] == clube2:
                    b_values = dfb.iloc[x].values.tolist()
                                        
            a_values = a_values[0:]
            b_values = b_values[0:]

            # Rounding values to no decimal places
            a_values = [round(value) for value in a_values]
            b_values = [round(value) for value in b_values]

            values = [a_values, b_values]

            #Plotting Data
            title = dict(
                title_name = clube1,
                title_color = '#B6282F',
                subtitle_name = "(R$ milhões)",
                subtitle_color = '#B6282F',
                title_name_2 = clube2,
                title_color_2 = '#344D94',
                subtitle_name_2 = "(R$ milhões)",
                subtitle_color_2 = '#344D94',
                title_fontsize = 18,
            ) 

            ## instantiate object
            radar = Radar()

            ## instantiate object -- changing fontsize
            radar=Radar(fontfamily='Cursive', range_fontsize=14)
            radar=Radar(fontfamily='Cursive', label_fontsize=14)

            fig,ax = radar.plot_radar(ranges=ranges,params=params,values=values,radar_color=['#B6282F', '#344D94'], dpi=600, alphas=[.6,.5], title=title, compare=True)
            st.pyplot(fig)

##########################################################################################################################
##########################################################################################################################
##########################################################################################################################
##########################################################################################################################


if st.session_state.selected_option == "Análise Individual - 2024":
    
    # Custom CSS for better formatting
    st.markdown("""
    <style>
        .main {
            padding: 2rem;
        }
        .stAlert {
            background-color: #f8f9fa;
            padding: 1rem;
            border-radius: 0.5rem;
            border-left: 5px solid #ff4b4b;
        }
        .info-box {
            background-color: #e6f3ff;
            padding: 1rem;
            border-radius: 0.5rem;
            border-left: 5px solid #4B8BF5;
            margin-bottom: 1rem;
        }
        h1, h2, h3 {
            color: #1E3A8A;
        }
        .katex {
            font-size: 1.1em;
        }
    </style>
    """, unsafe_allow_html=True)
    
    # Custom styled title
    st.markdown("""
    <h5 style='font-size: 20px; font-weight: bold; font-family: Arial, sans-serif; color: #1E3A8A; margin-bottom: 10px;'>
    ℹ️ Sobre esta análise
    </h5>
    """, unsafe_allow_html=True)

    with st.expander("ℹ️ Clique para expandir", expanded=False):
        st.markdown("""
        <div class="info-box">
        <h4>Análise Individual - 2024:</h4>
        <p>Esta análise de resultados oferece uma visão abrangente da Demonstração de Resultados do clube 
        selecionado por meio de um diagrama de Sankey. Permite entender rapidamente a estrutura financeira 
        do clube e como os recursos fluem desde as fontes de receita (como direitos de transmissão e negociação de atletas) 
        até as diferentes categorias de despesas (como a folha de futebol (pessoal + direitos de imagem), 
        culminando no resultado financeiro final. </p>
        <p>A apresentação dos dados é ligeiramente diferente da apresentação formal dos clubes. Aqui, optei por apresentar a
        totalidade das receitas, exceto a financeira, antes da dedução das despesas. Dessa forma, o usuário tem a noção da 
        RECEITA OPERACIONAL total do clube, depois dos impostos. </p>
        <p>Além disso, são apresentados dois gráficos radar: o primeiro compara as pricipais receitas e despesas do clube
        com a média da liga; e o segundo com as mesmas receitas e despesas de 2023 (não ajustadas pela inflação). </p>  
        <p><b>Nota:</b> Utiliza apenas dados das demonstrações financeiras auditadas.</p>
        </div>
        """, unsafe_allow_html=True)
    st.write("---")
    
    st.markdown("<h5 style='text-align: center; color: black;'>Escolha o Clube</b></h5>", unsafe_allow_html=True)
    clube = st.selectbox("", options=clubes, index=None, placeholder="Escolha o Clube!")
    fontsize = 24
    if clube == "Palmeiras":
        
        def display_club_image(clube):
            try:
                # Get the image URL for the selected club
                club_image_url = club_image_paths.get(clube)
                
                if club_image_url:
                    # Center-align and display the image
                    st.markdown(
                        f"""
                        <div style="display: flex; justify-content: center;">
                            <img src="{club_image_url}" width="150">
                        </div>
                        """,
                        unsafe_allow_html=True
                    )
                else:
                    st.warning(f"Imagem não encontrada para o clube: {clube}")
            except Exception as e:
                st.error(f"Erro ao exibir a imagem: {e}")

        display_club_image(clube)
        
#############################################################################################################################################
#############################################################################################################################################
#############################################################################################################################################
#############################################################################################################################################

        # Custom CSS for better formatting
        st.markdown("""
        <style>
            .main {
                padding: 2rem;
            }
            .stAlert {
                background-color: #f8f9fa;
                padding: 1rem;
                border-radius: 0.5rem;
                border-left: 5px solid #ff4b4b;
            }
            .info-box {
                background-color: #e6f3ff;
                padding: 1rem;
                border-radius: 0.5rem;
                border-left: 5px solid #4B8BF5;
                margin-bottom: 1rem;
            }
            h1, h2, h3 {
                color: #1E3A8A;
            }
            .katex {
                font-size: 1.1em;
            }
        </style>
        """, unsafe_allow_html=True)

        st.markdown("""
        <div class="info-box">
        <h4>Resumo:</h4>
        <p>Em 2024 o Palmeiras alcançou superávit contábil de R$ 198,2 milhões (vs. R$ 8,5 mi em 2023), 
        impulsionado pelo recorde de R$ 440 mi em vendas de atletas e crescimento de 41 % na receita 
        bruta para R$ 1,27 bi. O fluxo de caixa operacional subiu para R$ 383 mi, sustentando investimentos 
        de R$ 296 mi em CAPEX e elenco. </p>
        <h4>Destaques:</h4>
        <p>1. Transações de atletas catapultaram as receitas: +135% a/a, correspondendo a 35 % da Receita total. </p>
        <p>2. Folha salarial (salários + imagens) consumiu 39,6 % da receita – patamar confortável (< 50 %) para clubes brasileiros. </p>
        <p>3. 97 % do consumo de caixa destinado a investimentos referem‑se a aquisição de atletas (R$ 185 mi) e benfeitorias do estádio. </p>
        <p>4. Financiamento líquido negativo: clube quitou R$ 113 mi de principal e R$ 9 mi de juros, captando apenas R$ 80 mi em novos empréstimos. </p>
        <p><b>Nota:</b> Utiliza apenas dados das demonstrações financeiras auditadas.</p>
        </div>
        """, unsafe_allow_html=True)

#############################################################################################################################################
#############################################################################################################################################
#############################################################################################################################################
#############################################################################################################################################

        st.markdown("<h4 style='text-align: center;  color: black;'>Demonstração de Resultado</b></h4>", unsafe_allow_html=True)
        st.markdown("<h5 style='text-align: center;  color: black;'>(em R$ milhões)<br></b></h5>", unsafe_allow_html=True)
        
        st.markdown("---")

        # Defining labels, sources and targets
        
        # Define labels, sources and targets (same as original)
        label = ["Direitos de transmissão", "Publicidade e patrocínio", "Arrecadação de jogos", 
                "Sócio-torcedor", "Premiações", "Licenciamento da marca", 
                "RECEITA RECORRENTE", "Negociação de atletas", "Outras receitas", 
                "RECEITA OPERACIONAL", "Pessoal e encargos", "Direitos de imagem", 
                "Despesas com jogos", "Despesas gerais e administrativas", 
                "Depreciação amortização", "Outras despesas", 
                "DESPESAS", "RESULTADO OPERACIONAL", "Resultado financeiro", "RESULTADO"]
        

        source = [0, 1, 2, 3, 4, 5, 6, 7, 8,  9,  9, 16, 16, 16, 16, 16, 16, 17, 17] #19 sources
        target = [6, 6, 6, 6, 6, 6, 9, 9, 9, 17, 16, 10, 11, 12, 13, 14, 15, 18, 19] #19 targets
        value = df.iloc[np.r_[0, 1, 2, 3, 4, 5, 6, 7, 8, 17, 16, 10, 11, 12, 13, 14, 15, 18, 19], np.r_[16]].astype(int) #19 values
        dfa = df.iloc[:, np.r_[16]].astype(int)


        # Using positioning more similar to your original layout
        # These coordinates preserve the general structure but with slight improvements
        x = [0.15, 0.15, 0.15, 0.15, 0.15, 0.15,    # Revenue sources (left)
            0.30,                                   # Recurring Revenue (left-center)
            0.375, 0.375,                           # Additional revenues (left-center)
            0.45,                                   # Net Operating Revenue (center)
            0.75, 0.75, 0.75, 0.75, 0.75, 0.75,     # Expense categories (right)
            0.60,                                   # Total Expenses (right-center)
            0.855,                                   # Resultado Operacional
            0.95,                                   # Resultado financeiro
            0.955]                                   # Results (far right)
            
        y = [-0.22, 0.0, 0.22, 0.44, 0.66, 0.88,    # Revenue sources (left)
            -0.13,                                  # Recurring Revenue (left-center)
            0.20, 0.40,                             # Additional revenues (left-center)
            0.00,                                   # Net Operating Revenue (center)
            -0.05, 0.20, 0.35, 0.50, 0.65, 0.80,    # Expense categories (right)
            0.20,                                   # Total Expenses (right-center)
            -0.18,                                  # Resultado Operacional
            -0.20,                                  # Resultado financeiro
            0.13]                                   # Results (far right)

        # Colors that match the original diagram more closely
        # Light blue for revenue flows, green for positive results, red for expenses
        color_for_nodes = [
            'steelblue', 'steelblue', 'steelblue', 'steelblue', 'steelblue', 'steelblue',  # Revenue sources
            'steelblue',                                                                  # Recurring Revenue
            'steelblue', 'steelblue',                                                     # Additional revenues
            'steelblue',                                                                  # Net Operating Revenue
            'indianred', 'indianred', 'indianred', 'indianred', 'indianred', 'indianred', # Expense categories
            'indianred',                                                                  # Total Expenses
            'limegreen', 
            'indianred', 
            'limegreen'                                         # Results
        ]
        
        # Flow colors that match the original diagram more closely
        color_for_links = [
            'LightSkyBlue', 'LightSkyBlue', 'LightSkyBlue', 'LightSkyBlue', 'LightSkyBlue', 'LightSkyBlue',    # Revenue source flows
            'LightSkyBlue', 'LightSkyBlue', 'LightSkyBlue',                                          # Additional revenue flows
            'lime',                                                                         # Flow to operating result
            'LightCoral',                                                                    # Flow to expenses
            'LightCoral', 'LightCoral', 'LightCoral', 'LightCoral', 'LightCoral', 'LightCoral',    # Expense category flows
            'LightCoral', 
            'lime'                                                             # Result flows
        ]

           
        link = dict(source=source, target=target, value=value, color=color_link)
        node = dict(label = label, pad=35, thickness=20)
        data = go.Sankey(link=link, node=node)

        # Set our X and Y co-ords 
        x = [.001 if v==0 else .999 if v==1 else v for v in x]
        y = [.001 if v==0 else .999 if v==1 else v for v in y]


        fig = go.Figure(data=[go.Sankey(
                # The following line hides our labels. They still show
                # when you hover the mouse over an object
                textfont=dict(color="rgba(0,0,0,0)", size=1),
                node = dict(
                    pad = 35,
                    line = dict(color = "white", width = 1),
                    label = label,
                    x = x,
                    y = y
                ),
                link = dict(
                    source = source,
                    target = target,
                    value = value
                    ))])

        # Update our chart
        fig.update_layout(
            hovermode='x',
        )
        # Apply node and link colour choices
        fig.update_traces(node_color = color_for_nodes,
                        link_color = color_for_links)
            
        fig.add_annotation(dict(font=dict(color="black", size=11), x=0.02, y=1.31, xanchor='left', showarrow=False, text='<b>Direitos de<br>transmissão</b>'))
        fig.add_annotation(dict(font=dict(color="steelblue", size=11), x=0.05, y=1.20, showarrow=False, text=f'<b>{dfa.iat[0,0]}</b>'))

        fig.add_annotation(dict(font=dict(color="black", size=11), x=0.02, y=1.08, xanchor='left', showarrow=False, text='<b>Publicidade e<br>patrocínio</b>'))
        fig.add_annotation(dict(font=dict(color="steelblue", size=11), x=0.05, y=0.97, showarrow=False, text=f'<b>{dfa.iat[1,0]}</b>'))

        fig.add_annotation(dict(font=dict(color="black", size=11), x=0.02, y=0.87, xanchor='left', showarrow=False, text='<b>Arrecadação<br>de jogos</b>'))
        fig.add_annotation(dict(font=dict(color="steelblue", size=11), x=0.05, y=0.76, showarrow=False, text=f'<b>{dfa.iat[2,0]}</b>'))

        fig.add_annotation(dict(font=dict(color="black", size=11), x=0.02, y=0.60, xanchor='left', showarrow=False, text='<b>Sócio-torcedor</b>'))
        fig.add_annotation(dict(font=dict(color="steelblue", size=11), x=0.05, y=0.54, showarrow=False, text=f'<b>{dfa.iat[3,0]}</b>'))

        fig.add_annotation(dict(font=dict(color="black", size=11), x=0.02, y=0.37, xanchor='left', showarrow=False, text='<b>Premiações</b>'))
        fig.add_annotation(dict(font=dict(color="steelblue", size=11), x=0.05, y=0.28, showarrow=False, text=f'<b>{dfa.iat[4,0]}</b>'))

        fig.add_annotation(dict(font=dict(color="black", size=11), x=0.02, y=0.12, xanchor='left', showarrow=False, text='<b>Licenciamento<br>da marca</b>'))
        fig.add_annotation(dict(font=dict(color="steelblue", size=11), x=0.05, y=0.06, showarrow=False, text=f'<b>{dfa.iat[5,0]}</b>'))
            
        fig.add_annotation(dict(font=dict(color="black", size=10), x=0.25, y=1.39, xanchor='left', showarrow=False, text='<b>RECEITA<br>RECORRENTE</b>'))
        fig.add_annotation(dict(font=dict(color="steelblue", size=10), x=0.28, y=1.30, showarrow=False, text=f'<b>{dfa.iat[6,0]}</b>'))
            
        fig.add_annotation(dict(font=dict(color="black", size=11), x=0.27, y=0.88, xanchor='left', showarrow=False, text='<b>Negociação<br>de atletas</b>'))
        fig.add_annotation(dict(font=dict(color="steelblue", size=11), x=0.295, y=0.78, showarrow=False, text=f'<b>{dfa.iat[7,0]}</b>'))

        fig.add_annotation(dict(font=dict(color="black", size=11), x=0.27, y=0.68, xanchor='left', showarrow=False, text='<b>Outras<br>receitas</b>'))
        fig.add_annotation(dict(font=dict(color="steelblue", size=11), x=0.30, y=0.55, showarrow=False, text=f'<b>{dfa.iat[8,0]}</b>'))

        fig.add_annotation(dict(font=dict(color="black", size=10), x=0.40, y=1.33, xanchor='left', showarrow=False, text='<b>RECEITA<br>OPERACIONAL</b>'))
        fig.add_annotation(dict(font=dict(color="green", size=10), x=0.45, y=1.23, showarrow=False, text=f'<b>{dfa.iat[9,0]}</b>'))

        fig.add_annotation(dict(font=dict(color="black", size=10), x=0.56, y=1.08, xanchor='left', showarrow=False, text='<b>DESPESAS</b>'))
        fig.add_annotation(dict(font=dict(color="indianred", size=10), x=0.595, y=1.02, showarrow=False, text=f'<b>{dfa.iat[16,0]}</b>'))

        fig.add_annotation(dict(font=dict(color="black", size=10), x=0.78, y=1.12, xanchor='left', showarrow=False, text='<b>Pessoal e<br>encargos</b>'))
        fig.add_annotation(dict(font=dict(color="indianred", size=10), x=0.825, y=1.01, showarrow=False, text=f'<b>{dfa.iat[10,0]}</b>'))

        fig.add_annotation(dict(font=dict(color="black", size=10), x=0.78, y=0.88, xanchor='left', showarrow=False, text='<b>Direitos de<br>imagem</b>'))
        fig.add_annotation(dict(font=dict(color="indianred", size=10), x=0.825, y=0.78, showarrow=False, text=f'<b>{dfa.iat[11,0]}</b>'))

        fig.add_annotation(dict(font=dict(color="black", size=10), x=0.78, y=0.66, xanchor='left', showarrow=False, text='<b>Despesas com<br>jogos</b>'))
        fig.add_annotation(dict(font=dict(color="indianred", size=10), x=0.84, y=0.58, showarrow=False, text=f'<b>{dfa.iat[12,0]}</b>'))

        fig.add_annotation(dict(font=dict(color="black", size=10), x=0.78, y=0.505, xanchor='left', showarrow=False, text='<b>Despesas gerais<br>e administrativas</b>'))
        fig.add_annotation(dict(font=dict(color="indianred", size=10), x=0.85, y=0.425, showarrow=False, text=f'<b>{dfa.iat[13,0]}</b>'))

        fig.add_annotation(dict(font=dict(color="black", size=10), x=0.78, y=0.36, xanchor='left', showarrow=False, text='<b>Outras despesas</b>'))
        fig.add_annotation(dict(font=dict(color="indianred", size=10), x=0.85, y=0.27, showarrow=False, text=f'<b>{dfa.iat[15,0]}</b>'))

        fig.add_annotation(dict(font=dict(color="black", size=10), x=0.78, y=0.16, xanchor='left', showarrow=False, text='<b>Depreciação<br>amortização</b>'))
        fig.add_annotation(dict(font=dict(color="indianred", size=10), x=0.835, y=0.10, showarrow=False, text=f'<b>{dfa.iat[14,0]}</b>'))

        fig.add_annotation(dict(font=dict(color="black", size=10), x=0.80, y=1.38, xanchor='left', showarrow=False, text='<b>RESULTADO<br>OPERACIONAL</b>'))
        fig.add_annotation(dict(font=dict(color="green", size=10), x=0.87, y=1.28, showarrow=False, text=f'<b>{dfa.iat[17,0]}</b>'))

        fig.add_annotation(dict(font=dict(color="black", size=10), x=0.91, y=1.38, xanchor='left', showarrow=False, text='<b>RESULTADO<br>FINANCEIRO</b>'))
        fig.add_annotation(dict(font=dict(color="indianred", size=10), x=0.96, y=1.28, showarrow=False, text=f'<b>{dfa.iat[18,0]}</b>'))

        fig.add_annotation(dict(font=dict(color="black", size=10), x=0.92, y=1.01, xanchor='left', showarrow=False, text='<b>RESULTADO</b>'))
        fig.add_annotation(dict(font=dict(color="green", size=10), x=0.97, y=0.96, showarrow=False, text=f'<b>{dfa.iat[19,0]}</b>'))

        st.plotly_chart(fig)

#############################################################################################################################################
#############################################################################################################################################
#############################################################################################################################################
#############################################################################################################################################
#############################################################################################################################################
#############################################################################################################################################
#############################################################################################################################################
#############################################################################################################################################

        #Plotar Gráfico Alternativo
        fontsize=28
        # Player Comparison Data
        st.write("---")
        markdown_1 = f"<div style='text-align:center;  color: green; font-weight: bold; font-size:{fontsize}px'>{clube:}</div>"
        st.markdown("<h4 style='text-align: center;'>Comparativo com a Média da Liga</h4>", unsafe_allow_html=True)
        st.markdown(markdown_1, unsafe_allow_html=True)
        dfb = df1.iloc[np.r_[47, 1, 58, 4, 7, 9, 22, 26], np.r_[0:21]]
        dfb_transposed = dfb.T
        # Set the first row as the new header
        dfb_transposed.columns = dfb_transposed.iloc[0]
        # Drop the first row
        dfb_transposed = dfb_transposed.iloc[1:]
        # Rename the first column to 'clubs'
        dfb_transposed.index.name = 'Clubes'
        dfb = dfb_transposed
        # Renaming Columns
        dfb = dfb.rename(columns={"Receita c/ Publicidade e patrocínio": "Publicidade/patrocínio",
                                  "Receita c/ Match-Day": "Match-Day",
                                  "Receita c/ Sócio-torcedor": "Sócio-Torcedor",
                                  "Receita c/ Negociação de atletas": "Venda de jogadores",
                                  "Receita c/ Direitos de transmissão": "Direitos de transmissão" 
                                  })
        # Preparing the Graph
        params = list(dfb.columns)
        params = params[0:]
        #Preparing Data
        ranges = []
        a_values = []
        b_values = []

        for x in params:
            a = min(dfb[params][x])
            a = a
            b = max(dfb[params][x])
            b = b
            ranges.append((a, b))

        for x in range(len(dfb.index)):
            if dfb.index[x] == clube:
                a_values = dfb.iloc[x].values.tolist()
            if dfb.index[x] == 'Média da Liga':
                b_values = dfb.iloc[x].values.tolist()
                                    
        a_values = a_values[0:]
        b_values = b_values[0:]

        # Rounding values to no decimal places
        a_values = [round(value) for value in a_values]
        b_values = [round(value) for value in b_values]

        values = [a_values, b_values]

        #Plotting Data
        title = dict(
            title_name = "Receitas e Despesas",
            title_color = '#B6282F',
            subtitle_name = "(R$ milhões)",
            subtitle_color = '#B6282F',
            title_name_2 = 'Média da Liga',
            title_color_2 = '#344D94',
            subtitle_name_2 = "(R$ milhões)",
            subtitle_color_2 = '#344D94',
            title_fontsize = 18,
        ) 

        ## instantiate object
        radar = Radar()

        ## instantiate object -- changing fontsize
        radar=Radar(fontfamily='Cursive', range_fontsize=14)
        radar=Radar(fontfamily='Cursive', label_fontsize=14)

        fig,ax = radar.plot_radar(ranges=ranges,params=params,values=values,radar_color=['#B6282F', '#344D94'], dpi=600, alphas=[.6,.5], title=title, compare=True)
        st.pyplot(fig)


#############################################################################################################################################
#############################################################################################################################################
#############################################################################################################################################
#############################################################################################################################################
#############################################################################################################################################
#############################################################################################################################################
#############################################################################################################################################
#############################################################################################################################################

        #Plotar Gráfico Alternativo - 2024 x 2023
        fontsize=28
        # Player Comparison Data
        st.write("---")
        markdown_1 = f"<div style='text-align:center;  color: green; font-weight: bold; font-size:{fontsize}px'>{clube:}</div>"
        st.markdown("<h4 style='text-align: center;'>Comparativo 2024 vs 2023</h4>", unsafe_allow_html=True)
        st.markdown(markdown_1, unsafe_allow_html=True)
        dfb = df1.iloc[np.r_[47, 1, 58, 4, 7, 9, 22, 26], np.r_[0, 16]]
        dfb = dfb.rename(columns={"Palmeiras": "Palmeiras - 2024"})
        dfb_2023 = df1_2023.iloc[np.r_[47, 1, 58, 4, 7, 9, 22, 26], np.r_[0, 16]]
        dfb_2023 = dfb_2023.rename(columns={"Palmeiras": "Palmeiras - 2023"})
        # Fazendo o merge com base na coluna "Clubes"
        dfb = pd.merge(dfb, dfb_2023, on="Clubes", how="inner")  # você pode trocar o "how" se quiser
        
        dfb_transposed = dfb.T
        # Set the first row as the new header
        dfb_transposed.columns = dfb_transposed.iloc[0]
        # Drop the first row
        dfb_transposed = dfb_transposed.iloc[1:]
        # Rename the first column to 'clubs'
        dfb_transposed.index.name = 'Clubes'
        dfb = dfb_transposed
        # Renaming Columns
        dfb = dfb.rename(columns={"Receita c/ Publicidade e patrocínio": "Publicidade/patrocínio",
                                  "Receita c/ Match-Day": "Match-Day",
                                  "Receita c/ Sócio-torcedor": "Sócio-Torcedor",
                                  "Receita c/ Negociação de atletas": "Venda de jogadores",
                                  "Receita c/ Direitos de transmissão": "Direitos de transmissão" 
                                  })

        teste_2024 = pd.read_csv("índices.csv")
        teste_2024 = teste_2024.iloc[np.r_[47, 1, 58, 4, 7, 9, 22, 26], np.r_[0: 20]]
        teste_2024_transposed = teste_2024.T
        # Set the first row as the new header
        teste_2024_transposed.columns = teste_2024_transposed.iloc[0]
        # Drop the first row
        teste_2024_transposed = teste_2024_transposed.iloc[1:]
        # Rename the first column to 'clubs'
        teste_2024_transposed.index.name = 'Clubes'
        teste_2024 = teste_2024_transposed
        # Renaming Columns
        teste_2024 = teste_2024.rename(columns={"Receita c/ Publicidade e patrocínio": "Publicidade/patrocínio",
                                  "Receita c/ Match-Day": "Match-Day",
                                  "Receita c/ Sócio-torcedor": "Sócio-Torcedor",
                                  "Receita c/ Negociação de atletas": "Venda de jogadores",
                                  "Receita c/ Direitos de transmissão": "Direitos de transmissão" 
                                  })

        teste_2023 = pd.read_csv("índices_2023.csv")
        teste_2023 = teste_2023.iloc[np.r_[47, 1, 58, 4, 7, 9, 22, 26], np.r_[0: 20]]
        teste_2023_transposed = teste_2023.T
        # Set the first row as the new header
        teste_2023_transposed.columns = teste_2023_transposed.iloc[0]
        # Drop the first row
        teste_2023_transposed = teste_2023_transposed.iloc[1:]
        # Rename the first column to 'clubs'
        teste_2023_transposed.index.name = 'Clubes'
        teste_2023 = teste_2023_transposed
        # Renaming Columns
        teste_2023 = teste_2023.rename(columns={"Receita c/ Publicidade e patrocínio": "Publicidade/patrocínio",
                                  "Receita c/ Match-Day": "Match-Day",
                                  "Receita c/ Sócio-torcedor": "Sócio-Torcedor",
                                  "Receita c/ Negociação de atletas": "Venda de jogadores",
                                  "Receita c/ Direitos de transmissão": "Direitos de transmissão" 
                                  })
    
        # Preparing the Graph
        params = list(dfb.columns)
        params = params[0:]
        #Preparing Data
        ranges = []
        a_values = []
        b_values = []

        for x in range(len(params)):
            # Combine as duas séries
            combined_values = pd.concat([teste_2023[params].iloc[:, x], teste_2024[params].iloc[:, x]])
            
            # Encontre o mínimo e o máximo
            a = combined_values.min()
            b = combined_values.max()
        
            ranges.append((a, b))

        for x in range(len(dfb.index)):
            if dfb.index[x] == "Palmeiras - 2024":
                a_values = dfb.iloc[x].values.tolist()
            if dfb.index[x] == "Palmeiras - 2023":
                b_values = dfb.iloc[x].values.tolist()
                                    
        a_values = a_values[0:]
        b_values = b_values[0:]

        # Rounding values to no decimal places
        a_values = [round(value) for value in a_values]
        b_values = [round(value) for value in b_values]

        values = [a_values, b_values]

        #Plotting Data
        title = dict(
            title_name = "Receitas e Despesas/2024",
            title_color = '#B6282F',
            subtitle_name = "(R$ milhões)",
            subtitle_color = '#B6282F',
            title_name_2 = 'Receitas e Despesas/2023',
            title_color_2 = '#344D94',
            subtitle_name_2 = "(R$ milhões)",
            subtitle_color_2 = '#344D94',
            title_fontsize = 18,
        ) 

        ## instantiate object
        radar = Radar()

        ## instantiate object -- changing fontsize
        radar=Radar(fontfamily='Cursive', range_fontsize=14)
        radar=Radar(fontfamily='Cursive', label_fontsize=14)

        fig,ax = radar.plot_radar(ranges=ranges,params=params,values=values,radar_color=['#B6282F', '#344D94'], dpi=600, alphas=[.6,.5], title=title, compare=True)
        st.pyplot(fig)


#############################################################################################################################################
#############################################################################################################################################
#############################################################################################################################################
#############################################################################################################################################


    elif clube == "Flamengo":
        
        def display_club_image(clube):
            try:
                # Get the image URL for the selected club
                club_image_url = club_image_paths.get(clube)
                
                if club_image_url:
                    # Center-align and display the image
                    st.markdown(
                        f"""
                        <div style="display: flex; justify-content: center;">
                            <img src="{club_image_url}" width="150">
                        </div>
                        """,
                        unsafe_allow_html=True
                    )
                else:
                    st.warning(f"Imagem não encontrada para o clube: {clube}")
            except Exception as e:
                st.error(f"Erro ao exibir a imagem: {e}")

        display_club_image(clube)

###############################################################################################################################################
###############################################################################################################################################
###############################################################################################################################################
###############################################################################################################################################

        # Custom CSS for better formatting
        st.markdown("""
        <style>
            .main {
                padding: 2rem;
            }
            .stAlert {
                background-color: #f8f9fa;
                padding: 1rem;
                border-radius: 0.5rem;
                border-left: 5px solid #ff4b4b;
            }
            .info-box {
                background-color: #e6f3ff;
                padding: 1rem;
                border-radius: 0.5rem;
                border-left: 5px solid #4B8BF5;
                margin-bottom: 1rem;
            }
            h1, h2, h3 {
                color: #1E3A8A;
            }
            .katex {
                font-size: 1.1em;
            }
        </style>
        """, unsafe_allow_html=True)

        st.markdown("""
        <div class="info-box">
        <h4>Resumo:</h4>
        <p>O Flamengo encerrou 2024 ainda como o clube de maior faturamento do país, sustentado por receitas recorrentes 
        robustas e crescente diversificação comercial. Contudo, o exercício expôs desgaste de margens e pressão de caixa 
        decorrentes de um ciclo de investimento agressivo em ativos esportivos e infraestrutura. </p>
        <h4>Destaques:</h4>
        <p>1. Receita operacional caiu 7 % e fechou em R$ 1,334 bi. </p>
        <p>2. As receitas recorrentes (sem venda de atletas) seguiram firmes e atingiram R$ 1,227 bi – +14 % a/a 
        e > R$ 1 bi pelo 3.º ano seguido. </p>
        <p>3. Geração de Caixa Operacional R$ 409 mi não foi suficiente para honrar o pagamento de direitos federativos, R$ 382 mi,
        e investimento em imobilizado, R$ 181 mi. </p>
        <p>4. Receita Comercial recorde de R$ 420 mi compensou a queda na venda de atletas, R$ 107 mi. </p>
        <p><b>Nota:</b> Utiliza apenas dados das demonstrações financeiras auditadas.</p>
        </div>
        """, unsafe_allow_html=True)

###############################################################################################################################################
###############################################################################################################################################
###############################################################################################################################################
###############################################################################################################################################
        
        st.markdown("<h4 style='text-align: center;  color: black;'>Demonstração de Resultado</b></h4>", unsafe_allow_html=True)
        st.markdown("<h5 style='text-align: center;  color: black;'>(em R$ milhões)<br></b></h5>", unsafe_allow_html=True)
        st.markdown("---")

        # Defining labels, sources and targets
        # Define labels, sources and targets (same as original)
        label = ["Direitos de transmissão", "Publicidade e patrocínio", "Arrecadação de jogos", 
                "Sócio-torcedor", "Premiações", "Licenciamento da marca", 
                "RECEITA RECORRENTE", "Negociação de atletas", "Outras receitas", 
                "RECEITA OPERACIONAL", "Pessoal e encargos", "Direitos de imagem", 
                "Despesas com jogos", "Despesas gerais e administrativas", 
                "Depreciação amortização", "Outras despesas", 
                "DESPESAS", "RESULTADO OPERACIONAL", "Resultado financeiro", "RESULTADO"]

        source = [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 9, 16, 16, 16, 16, 16, 16, 17, 17] #19 sources
        target = [6, 6, 6, 6, 6, 6, 9, 9, 9, 17, 16, 10, 11, 12, 13, 14, 15, 18, 19] #19 targets
        value = df.iloc[np.r_[0, 1, 2, 3, 4, 5, 6, 7, 8, 17, 16, 10, 11, 12, 13, 14, 17, 18, 19], np.r_[10]].astype(int) #19 values
        dfa = df.iloc[:, np.r_[10]].astype(int)

        # Using positioning more similar to your original layout
        # These coordinates preserve the general structure but with slight improvements
        x = [0.15, 0.15, 0.15, 0.15, 0.15, 0.15,    # Revenue sources (left)
            0.30,                                   # Recurring Revenue (left-center)
            0.375, 0.375,                           # Additional revenues (left-center)
            0.45,                                   # Net Operating Revenue (center)
            0.75, 0.75, 0.75, 0.75, 0.75, 0.75,     # Expense categories (right)
            0.60,                                   # Total Expenses (right-center)
            0.70,                                   # Resultado Operacional
            0.90,                                   # Resultado financeiro
            0.95]                                   # Results (far right)
            
        y = [-0.22, 0.0, 0.22, 0.44, 0.66, 0.88,    # Revenue sources (left)
            -0.08,                                  # Recurring Revenue (left-center)
            0.20, 0.40,                             # Additional revenues (left-center)
            0.00,                                   # Net Operating Revenue (center)
            -0.05, 0.20, 0.35, 0.50, 0.65, 0.80,    # Expense categories (right)
            0.20,                                   # Total Expenses (right-center)
            -0.20,                                  # Resultado Operacional
            -0.20,                                  # Resultado financeiro
            0.05]                                   # Results (far right)

        # Colors that match the original diagram more closely
        # Light blue for revenue flows, green for positive results, red for expenses
        color_for_nodes = [
            'steelblue', 'steelblue', 'steelblue', 'steelblue', 'steelblue', 'steelblue',  # Revenue sources
            'steelblue',                                                                  # Recurring Revenue
            'steelblue', 'steelblue',                                                     # Additional revenues
            'steelblue',                                                                  # Net Operating Revenue
            'indianred', 'indianred', 'indianred', 'indianred', 'indianred', 'indianred', # Expense categories
            'indianred',                                                                  # Total Expenses
            'limegreen', 
            'indianred', 
            'indianred'                                         # Results
        ]
        
        # Flow colors that match the original diagram more closely
        color_for_links = [
            'LightSkyBlue', 'LightSkyBlue', 'LightSkyBlue', 'LightSkyBlue', 'LightSkyBlue', 'LightSkyBlue',    # Revenue source flows
            'LightSkyBlue', 'LightSkyBlue', 'LightSkyBlue',                                          # Additional revenue flows
            'lime',                                                                         # Flow to operating result
            'LightCoral',                                                                    # Flow to expenses
            'LightCoral', 'LightCoral', 'LightCoral', 'LightCoral', 'LightCoral', 'LightCoral',    # Expense category flows
            'LightCoral', 
            'LightCoral'                                                             # Result flows
        ]

            
        link = dict(source=source, target=target, value=value, color=color_link)
        node = dict(label = label, pad=35, thickness=20)
        data = go.Sankey(link=link, node=node)

        # Set our X and Y co-ords 
        #x = [0.15, 0.15, 0.15, 0.15, 0.15, 0.15, 0.30, 0.375, 0.375, 0.45, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.60, 0.70, 0.90, 0.95]
        #y = [-0.22, -0.00, 0.22, 0.44, 0.66, 0.88, -0.11, 0.20, 0.40, 0.00, 0.05, 0.20, 0.35, 0.50, 0.65, 0.80, 0.05, -0.20, -0.07, -0.22]
        x = [.001 if v==0 else .999 if v==1 else v for v in x]
        y = [.001 if v==0 else .999 if v==1 else v for v in y]


        fig = go.Figure(data=[go.Sankey(
                # The following line hides our labels. They still show
                # when you hover the mouse over an object
                textfont=dict(color="rgba(0,0,0,0)", size=1),
                node = dict(
                    pad = 35,
                    line = dict(color = "white", width = 1),
                    label = label,
                    x = x,
                    y = y
                ),
                link = dict(
                    source = source,
                    target = target,
                    value = value
                    ))])

        # Update our chart
        fig.update_layout(
            hovermode='x',
        )
        # Apply node and link colour choices
        fig.update_traces(node_color = color_for_nodes,
                        link_color = color_for_links)
            
        fig.add_annotation(dict(font=dict(color="black", size=11), x=0.02, y=1.31, xanchor='left', showarrow=False, text='<b>Direitos de<br>transmissão</b>'))
        fig.add_annotation(dict(font=dict(color="steelblue", size=11), x=0.05, y=1.20, showarrow=False, text=f'<b>{dfa.iat[0,0]}</b>'))

        fig.add_annotation(dict(font=dict(color="black", size=11), x=0.02, y=1.08, xanchor='left', showarrow=False, text='<b>Publicidade e<br>patrocínio</b>'))
        fig.add_annotation(dict(font=dict(color="steelblue", size=11), x=0.05, y=0.97, showarrow=False, text=f'<b>{dfa.iat[1,0]}</b>'))

        fig.add_annotation(dict(font=dict(color="black", size=11), x=0.02, y=0.87, xanchor='left', showarrow=False, text='<b>Arrecadação<br>de jogos</b>'))
        fig.add_annotation(dict(font=dict(color="steelblue", size=11), x=0.05, y=0.76, showarrow=False, text=f'<b>{dfa.iat[2,0]}</b>'))

        fig.add_annotation(dict(font=dict(color="black", size=11), x=0.02, y=0.60, xanchor='left', showarrow=False, text='<b>Sócio-torcedor</b>'))
        fig.add_annotation(dict(font=dict(color="steelblue", size=11), x=0.05, y=0.54, showarrow=False, text=f'<b>{dfa.iat[3,0]}</b>'))

        fig.add_annotation(dict(font=dict(color="black", size=11), x=0.02, y=0.37, xanchor='left', showarrow=False, text='<b>Premiações</b>'))
        fig.add_annotation(dict(font=dict(color="steelblue", size=11), x=0.05, y=0.28, showarrow=False, text=f'<b>{dfa.iat[4,0]}</b>'))

        fig.add_annotation(dict(font=dict(color="black", size=11), x=0.02, y=0.12, xanchor='left', showarrow=False, text='<b>Licenciamento<br>da marca</b>'))
        fig.add_annotation(dict(font=dict(color="steelblue", size=11), x=0.05, y=0.06, showarrow=False, text=f'<b>{dfa.iat[5,0]}</b>'))
            
        fig.add_annotation(dict(font=dict(color="black", size=10), x=0.25, y=1.39, xanchor='left', showarrow=False, text='<b>RECEITA<br>RECORRENTE</b>'))
        fig.add_annotation(dict(font=dict(color="steelblue", size=10), x=0.28, y=1.30, showarrow=False, text=f'<b>{dfa.iat[6,0]}</b>'))
            
        fig.add_annotation(dict(font=dict(color="black", size=11), x=0.27, y=0.88, xanchor='left', showarrow=False, text='<b>Negociação<br>de atletas</b>'))
        fig.add_annotation(dict(font=dict(color="steelblue", size=11), x=0.30, y=0.78, showarrow=False, text=f'<b>{dfa.iat[7,0]}</b>'))

        fig.add_annotation(dict(font=dict(color="black", size=11), x=0.285, y=0.68, xanchor='left', showarrow=False, text='<b>Outras<br>receitas</b>'))
        fig.add_annotation(dict(font=dict(color="steelblue", size=11), x=0.30, y=0.55, showarrow=False, text=f'<b>{dfa.iat[8,0]}</b>'))

        fig.add_annotation(dict(font=dict(color="black", size=10), x=0.40, y=1.33, xanchor='left', showarrow=False, text='<b>RECEITA<br>OPERACIONAL</b>'))
        fig.add_annotation(dict(font=dict(color="steelblue", size=10), x=0.45, y=1.23, showarrow=False, text=f'<b>{dfa.iat[9,0]}</b>'))

        fig.add_annotation(dict(font=dict(color="black", size=10), x=0.56, y=1.08, xanchor='left', showarrow=False, text='<b>DESPESAS</b>'))
        fig.add_annotation(dict(font=dict(color="indianred", size=10), x=0.595, y=1.02, showarrow=False, text=f'<b>{dfa.iat[16,0]}</b>'))

        fig.add_annotation(dict(font=dict(color="black", size=10), x=0.78, y=1.05, xanchor='left', showarrow=False, text='<b>Pessoal e<br>encargos</b>'))
        fig.add_annotation(dict(font=dict(color="indianred", size=10), x=0.825, y=0.94, showarrow=False, text=f'<b>{dfa.iat[10,0]}</b>'))

        fig.add_annotation(dict(font=dict(color="black", size=10), x=0.78, y=0.88, xanchor='left', showarrow=False, text='<b>Direitos de<br>imagem</b>'))
        fig.add_annotation(dict(font=dict(color="indianred", size=10), x=0.83, y=0.78, showarrow=False, text=f'<b>{dfa.iat[11,0]}</b>'))

        fig.add_annotation(dict(font=dict(color="black", size=10), x=0.78, y=0.66, xanchor='left', showarrow=False, text='<b>Despesas com<br>jogos</b>'))
        fig.add_annotation(dict(font=dict(color="indianred", size=10), x=0.84, y=0.58, showarrow=False, text=f'<b>{dfa.iat[12,0]}</b>'))

        fig.add_annotation(dict(font=dict(color="black", size=10), x=0.78, y=0.505, xanchor='left', showarrow=False, text='<b>Despesas gerais<br>e administrativas</b>'))
        fig.add_annotation(dict(font=dict(color="indianred", size=10), x=0.85, y=0.425, showarrow=False, text=f'<b>{dfa.iat[13,0]}</b>'))

        fig.add_annotation(dict(font=dict(color="black", size=10), x=0.78, y=0.35, xanchor='left', showarrow=False, text='<b>Depreciação<br>amortização</b>'))
        fig.add_annotation(dict(font=dict(color="indianred", size=10), x=0.84, y=0.25, showarrow=False, text=f'<b>{dfa.iat[14,0]}</b>'))

        fig.add_annotation(dict(font=dict(color="black", size=10), x=0.78, y=0.16, xanchor='left', showarrow=False, text='<b>Outras despesas</b>'))
        fig.add_annotation(dict(font=dict(color="indianred", size=10), x=0.845, y=0.10, showarrow=False, text=f'<b>{dfa.iat[15,0]}</b>'))

        fig.add_annotation(dict(font=dict(color="black", size=10), x=0.65, y=1.39, xanchor='left', showarrow=False, text='<b>RESULTADO<br>OPERACIONAL</b>'))
        fig.add_annotation(dict(font=dict(color="limegreen", size=10), x=0.715, y=1.30, showarrow=False, text=f'<b>{dfa.iat[17,0]}</b>'))

        fig.add_annotation(dict(font=dict(color="black", size=10), x=0.91, y=1.38, xanchor='left', showarrow=False, text='<b>RESULTADO<br>FINANCEIRO</b>'))
        fig.add_annotation(dict(font=dict(color="indianred", size=10), x=0.96, y=1.29, showarrow=False, text=f'<b>{dfa.iat[19,0]}</b>'))

        fig.add_annotation(dict(font=dict(color="black", size=10), x=0.91, y=1.02, xanchor='left', showarrow=False, text='<b>RESULTADO</b>'))
        fig.add_annotation(dict(font=dict(color="indianred", size=10), x=0.96, y=0.96, showarrow=False, text=f'<b>{dfa.iat[18,0]}</b>'))

        fig.add_layout_image(
            dict(
                source="https://raw.githubusercontent.com/JAmerico1898/Financials-2025/b8aa21e79bd9f585f0acd3daf3d22d6c1002c314/Flamengo.png",  # Change this to your image path
                xref="paper",  # Use "paper" for relative positioning within the plot
                yref="paper",
                x=1,  # Bottom left corner
                y=0,  # Bottom left corner
                sizex=0.1,  # Size of the image in x-axis proportion of plot's width
                sizey=0.1,  # Size of the image in y-axis proportion of plot's height
                xanchor="right",  # Anchor point is set to the left of the image
                yanchor="bottom"  # Anchor point is set to the bottom of the image
            )
        )

        st.plotly_chart(fig)

#############################################################################################################################################
#############################################################################################################################################
#############################################################################################################################################
#############################################################################################################################################

        #Plotar Gráfico Alternativo
        fontsize=28
        # Player Comparison Data
        st.write("---")
        markdown_1 = f"<div style='text-align:center;  color: red; font-weight: bold; font-size:{fontsize}px'>{clube:}</div>"
        st.markdown("<h4 style='text-align: center;'>Comparativo com a Média da Liga</h4>", unsafe_allow_html=True)
        st.markdown(markdown_1, unsafe_allow_html=True)
        dfb = df1.iloc[np.r_[47, 1, 58, 4, 7, 9, 22, 26], np.r_[0:21]]
        dfb_transposed = dfb.T
        # Set the first row as the new header
        dfb_transposed.columns = dfb_transposed.iloc[0]
        # Drop the first row
        dfb_transposed = dfb_transposed.iloc[1:]
        # Rename the first column to 'clubs'
        dfb_transposed.index.name = 'Clubes'
        dfb = dfb_transposed
        # Renaming Columns
        dfb = dfb.rename(columns={"Receita c/ Publicidade e patrocínio": "Publicidade/patrocínio",
                                  "Receita c/ Match-Day": "Match-Day",
                                  "Receita c/ Sócio-torcedor": "Sócio-Torcedor",
                                  "Receita c/ Negociação de atletas": "Venda de jogadores",
                                  "Receita c/ Direitos de transmissão": "Direitos de transmissão" 
                                  })
        # Preparing the Graph
        params = list(dfb.columns)
        params = params[0:]

        #Preparing Data
        ranges = []
        a_values = []
        b_values = []

        for x in params:
            a = min(dfb[params][x])
            a = a
            b = max(dfb[params][x])
            b = b
            ranges.append((a, b))

        for x in range(len(dfb.index)):
            if dfb.index[x] == clube:
                a_values = dfb.iloc[x].values.tolist()
            if dfb.index[x] == 'Média da Liga':
                b_values = dfb.iloc[x].values.tolist()
                                    
        a_values = a_values[0:]
        b_values = b_values[0:]

        # Rounding values to no decimal places
        a_values = [round(value) for value in a_values]
        b_values = [round(value) for value in b_values]

        values = [a_values, b_values]

        #Plotting Data
        title = dict(
            title_name = "Receitas e Despesas",
            title_color = '#B6282F',
            subtitle_name = "(R$ milhões)",
            subtitle_color = '#B6282F',
            title_name_2 = 'Média da Liga',
            title_color_2 = '#344D94',
            subtitle_name_2 = "(R$ milhões)",
            subtitle_color_2 = '#344D94',
            title_fontsize = 18,
        ) 

        ## instantiate object
        radar = Radar()

        ## instantiate object -- changing fontsize
        radar=Radar(fontfamily='Cursive', range_fontsize=14)
        radar=Radar(fontfamily='Cursive', label_fontsize=14)

        fig,ax = radar.plot_radar(ranges=ranges,params=params,values=values,radar_color=['#B6282F', '#344D94'], dpi=600, alphas=[.6,.5], title=title, compare=True)
        st.pyplot(fig)

#############################################################################################################################################
#############################################################################################################################################

        #Plotar Gráfico Alternativo - 2024 x 2023
        fontsize=28
        # Player Comparison Data
        markdown_1 = f"<div style='text-align:center;  color: red; font-weight: bold; font-size:{fontsize}px'>{clube:}</div>"
        st.markdown("<h4 style='text-align: center;'>Comparativo 2024 vs 2023</h4>", unsafe_allow_html=True)
        st.markdown(markdown_1, unsafe_allow_html=True)
        dfb = df1.iloc[np.r_[47, 1, 58, 4, 7, 9, 22, 26], np.r_[0, 10]]
        dfb = dfb.rename(columns={"Flamengo": "Flamengo - 2024"})
        dfb_2023 = df1_2023.iloc[np.r_[47, 1, 58, 4, 7, 9, 22, 26], np.r_[0, 10]]
        dfb_2023 = dfb_2023.rename(columns={"Flamengo": "Flamengo - 2023"})
        # Fazendo o merge com base na coluna "Clubes"
        dfb = pd.merge(dfb, dfb_2023, on="Clubes", how="inner")  # você pode trocar o "how" se quiser
        dfb_transposed = dfb.T
        # Set the first row as the new header
        dfb_transposed.columns = dfb_transposed.iloc[0]
        # Drop the first row
        dfb_transposed = dfb_transposed.iloc[1:]
        # Rename the first column to 'clubs'
        dfb_transposed.index.name = 'Clubes'
        dfb = dfb_transposed
        # Renaming Columns
        dfb = dfb.rename(columns={"Receita c/ Publicidade e patrocínio": "Publicidade/patrocínio",
                                  "Receita c/ Match-Day": "Match-Day",
                                  "Receita c/ Sócio-torcedor": "Sócio-Torcedor",
                                  "Receita c/ Negociação de atletas": "Venda de jogadores",
                                  "Receita c/ Direitos de transmissão": "Direitos de transmissão" 
                                  })

        # Descobrindo valores máximos e mínimos para o gráfico radar.
        teste_2024 = pd.read_csv("índices.csv")
        teste_2024 = teste_2024.iloc[np.r_[47, 1, 58, 4, 7, 9, 22, 26], np.r_[0: 20]]
        teste_2024_transposed = teste_2024.T
        # Set the first row as the new header
        teste_2024_transposed.columns = teste_2024_transposed.iloc[0]
        # Drop the first row
        teste_2024_transposed = teste_2024_transposed.iloc[1:]
        # Rename the first column to 'clubs'
        teste_2024_transposed.index.name = 'Clubes'
        teste_2024 = teste_2024_transposed
        # Renaming Columns
        teste_2024 = teste_2024.rename(columns={"Receita c/ Publicidade e patrocínio": "Publicidade/patrocínio",
                                  "Receita c/ Match-Day": "Match-Day",
                                  "Receita c/ Sócio-torcedor": "Sócio-Torcedor",
                                  "Receita c/ Negociação de atletas": "Venda de jogadores",
                                  "Receita c/ Direitos de transmissão": "Direitos de transmissão" 
                                  })

        teste_2023 = pd.read_csv("índices_2023.csv")
        teste_2023 = teste_2023.iloc[np.r_[47, 1, 58, 4, 7, 9, 22, 26], np.r_[0: 20]]
        teste_2023_transposed = teste_2023.T
        # Set the first row as the new header
        teste_2023_transposed.columns = teste_2023_transposed.iloc[0]
        # Drop the first row
        teste_2023_transposed = teste_2023_transposed.iloc[1:]
        # Rename the first column to 'clubs'
        teste_2023_transposed.index.name = 'Clubes'
        teste_2023 = teste_2023_transposed
        # Renaming Columns
        teste_2023 = teste_2023.rename(columns={"Receita c/ Publicidade e patrocínio": "Publicidade/patrocínio",
                                  "Receita c/ Match-Day": "Match-Day",
                                  "Receita c/ Sócio-torcedor": "Sócio-Torcedor",
                                  "Receita c/ Negociação de atletas": "Venda de jogadores",
                                  "Receita c/ Direitos de transmissão": "Direitos de transmissão" 
                                  })
    
        # Preparing the Graph
        params = list(dfb.columns)
        params = params[0:]
        #Preparing Data
        ranges = []
        a_values = []
        b_values = []

        for x in range(len(params)):
            # Combine as duas séries
            combined_values = pd.concat([teste_2023[params].iloc[:, x], teste_2024[params].iloc[:, x]])
            
            # Encontre o mínimo e o máximo
            a = combined_values.min()
            b = combined_values.max()
        
            ranges.append((a, b))

        for x in range(len(dfb.index)):
            if dfb.index[x] == "Flamengo - 2024":
                a_values = dfb.iloc[x].values.tolist()
            if dfb.index[x] == "Flamengo - 2023":
                b_values = dfb.iloc[x].values.tolist()
                                    
        a_values = a_values[0:]
        b_values = b_values[0:]

        # Rounding values to no decimal places
        a_values = [round(value) for value in a_values]
        b_values = [round(value) for value in b_values]

        values = [a_values, b_values]

        #Plotting Data
        title = dict(
            title_name = "Receitas e Despesas/2024",
            title_color = '#B6282F',
            subtitle_name = "(R$ milhões)",
            subtitle_color = '#B6282F',
            title_name_2 = 'Receitas e Despesas/2023',
            title_color_2 = '#344D94',
            subtitle_name_2 = "(R$ milhões)",
            subtitle_color_2 = '#344D94',
            title_fontsize = 18,
        ) 

        ## instantiate object
        radar = Radar()

        ## instantiate object -- changing fontsize
        radar=Radar(fontfamily='Cursive', range_fontsize=14)
        radar=Radar(fontfamily='Cursive', label_fontsize=14)

        fig,ax = radar.plot_radar(ranges=ranges,params=params,values=values,radar_color=['#B6282F', '#344D94'], dpi=600, alphas=[.6,.5], title=title, compare=True)
        st.pyplot(fig)

#############################################################################################################################################
#############################################################################################################################################
#############################################################################################################################################
#############################################################################################################################################

    elif clube == "Corinthians":
        
        def display_club_image(clube):
            try:
                # Get the image URL for the selected club
                club_image_url = club_image_paths.get(clube)
                
                if club_image_url:
                    # Center-align and display the image
                    st.markdown(
                        f"""
                        <div style="display: flex; justify-content: center;">
                            <img src="{club_image_url}" width="150">
                        </div>
                        """,
                        unsafe_allow_html=True
                    )
                else:
                    st.warning(f"Imagem não encontrada para o clube: {clube}")
            except Exception as e:
                st.error(f"Erro ao exibir a imagem: {e}")

        display_club_image(clube)
        
#############################################################################################################################################
#############################################################################################################################################
#############################################################################################################################################
#############################################################################################################################################

        # Custom CSS for better formatting
        st.markdown("""
        <style>
            .main {
                padding: 2rem;
            }
            .stAlert {
                background-color: #f8f9fa;
                padding: 1rem;
                border-radius: 0.5rem;
                border-left: 5px solid #ff4b4b;
            }
            .info-box {
                background-color: #e6f3ff;
                padding: 1rem;
                border-radius: 0.5rem;
                border-left: 5px solid #4B8BF5;
                margin-bottom: 1rem;
            }
            h1, h2, h3 {
                color: #1E3A8A;
            }
            .katex {
                font-size: 1.1em;
            }
        </style>
        """, unsafe_allow_html=True)

        st.markdown("""
        <div class="info-box">
        <h4>Resumo:</h4>
        <p>O Corinthians encerrou 2024 com forte expansão de receitas (R$ 1,05 bi, +21% vs. 2023), mas registrou déficit 
        de R$ 181,8 mi, em razão de provisões judiciais/tributárias e despesas financeiras elevadas. O passivo total 
        saltou para R$ 2,47 bi, superando o ativo em R$ 425 mi e agravando a posição de patrimônio líquido negativo. 
        A dívida bancária praticamente triplicou no ano, enquanto o caixa continuou muito baixo (R$ 12,7 mi). O auditor 
        emitiu opinião com ressalva e salientou incerteza relevante sobre a continuidade operacional do clube. </p>
        <h4>Destaques:</h4>
        <p>1. A Receita bruta (R$ 1,05 bi) foi impulsionada por TV (29%), patrocínios (24%) e bilheteria (9%). </p>
        <p>2. Dentre as Despesas operacionais de R$ 759 mi, a folha do futebol (R$ 368 mi) é o maior componente. </p>
        <p>3. Provisões (-R$ 112 mi) e despesas financeiras (-R$ 169 mi) alimentaram o déficit de -R$ 182 mi. </p>
        <p><b>Nota:</b> Utiliza apenas dados das demonstrações financeiras auditadas.</p>
        </div>
        """, unsafe_allow_html=True)

#############################################################################################################################################
#############################################################################################################################################
#############################################################################################################################################
#############################################################################################################################################

        st.markdown("<h4 style='text-align: center;  color: black;'>Demonstração de Resultado</b></h4>", unsafe_allow_html=True)
        st.markdown("<h5 style='text-align: center;  color: black;'>(em R$ milhões)<br></b></h5>", unsafe_allow_html=True)
        st.markdown("---")

        # Define labels, sources and targets (same as original)
        label = ["Direitos de transmissão", "Publicidade e patrocínio", "Arrecadação de jogos", 
                "Sócio-torcedor", "Premiações", "Licenciamento da marca", 
                "RECEITA RECORRENTE", "Negociação de atletas", "Outras receitas", 
                "RECEITA OPERACIONAL", "Pessoal e encargos", "Direitos de imagem", 
                "Despesas com jogos", "Despesas gerais e administrativas", 
                "Depreciação amortização", "Outras despesas", 
                "DESPESAS", "RESULTADO OPERACIONAL", "Resultado financeiro", "RESULTADO"]


        source =              [0, 1, 2, 3, 6, 7, 8, 9,   9, 16, 16, 16, 16, 17, 18] #18 sources
        target =              [6, 6, 6, 6, 9, 9, 9, 17, 16, 10, 13, 14, 15, 19, 19] #18 targets
        value = df.iloc[np.r_[ 0, 1, 2, 3, 6, 7, 8, 17,  9, 10, 13, 14, 15, 17, 18], np.r_[6]].astype(int) #18 values
        dfa = df.iloc[:, np.r_[6]].astype(int)

        # Using positioning more similar to your original layout
        # These coordinates preserve the general structure but with slight improvements
        x = [0.15, 0.15, 0.15, 0.15,                # Revenue sources (left)
            0.29,                                   # Recurring Revenue (left-center)
            0.375, 0.375,                           # Additional revenues (left-center)
            0.45,                                   # Net Operating Revenue (center)
            0.75, 0.75, 0.75, 0.75,     # Expense categories (right)
            0.595,                                   # Total Expenses (right-center)
            0.60,                                   # Resultado Operacional
            0.83,                                   # Resultado financeiro
            0.95]                                   # Results (far right)
            
        y = [-0.22, 0.0, 0.22, 0.44,                # Revenue sources (left)
            -0.13,                                  # Recurring Revenue (left-center)
            0.35, 0.65,                             # Additional revenues (left-center)
            0.00,                                   # Net Operating Revenue (center)
            0.02, 0.20, 0.35, 0.50,    # Expense categories (right)
            0.30,                                   # Total Expenses (right-center)
            -0.20,                                  # Resultado Operacional
            -0.12,                                  # Resultado financeiro
            -0.17]                                   # Results (far right)

        # Colors that match the original diagram more closely
        # Light blue for revenue flows, green for positive results, red for expenses
        color_for_nodes = [
            'steelblue', 'steelblue', 'steelblue', 'steelblue',                           # Revenue sources
            'steelblue',                                                                  # Recurring Revenue
            'steelblue', 'steelblue',                                                     # Additional revenues
            'steelblue', 'steelblue',
            'steelblue', 'indianred', 'indianred', 'indianred', 'indianred',                            # Expense categories
            'indianred',                                                                  # Total Expenses
            'indianred', 
            'indianred', 
            'limegreen',
            'indianred', 
            'indianred' 
        ]
        
        # Flow colors that match the original diagram more closely
        color_for_links = [
            'LightSkyBlue', 'LightSkyBlue', 'LightSkyBlue', 'LightSkyBlue',                # Revenue source flows
            'LightSkyBlue', 
            'LightSkyBlue', 'LightSkyBlue', 
            'lime', 'LightCoral',                          # Additional revenue flows
            'LightCoral',                                                                  # Flow to operating result
            'LightCoral',                                                                  # Flow to expenses
            'LightCoral', 'LightCoral', 'LightCoral', 'LightCoral', 'LightCoral', 'LightCoral',    # Expense category flows
            'LightCoral', 
            'LightCoral'                                                             # Result flows
        ]

        link = dict(source=source, target=target, value=value, color=color_link)
        node = dict(label = label, pad=35, thickness=20)
        data = go.Sankey(link=link, node=node)

        # Set our X and Y co-ords 
        x = [.001 if v==0 else .999 if v==1 else v for v in x]
        y = [.001 if v==0 else .999 if v==1 else v for v in y]

        fig = go.Figure(data=[go.Sankey(
                # The following line hides our labels. They still show
                # when you hover the mouse over an object
                textfont=dict(color="rgba(0,0,0,0)", size=1),
                node = dict(
                    pad = 35,
                    line = dict(color = "white", width = 1),
                    label = label,
                    x = x,
                    y = y
                ),
                link = dict(
                    source = source,
                    target = target,
                    value = value
                    ))])

        # Update our chart
        fig.update_layout(
            hovermode='x',
        )
        # Apply node and link colour choices
        fig.update_traces(node_color = color_for_nodes,
                        link_color = color_for_links)
            
        fig.add_annotation(dict(font=dict(color="black", size=11), x=0.02, y=1.31, xanchor='left', showarrow=False, text='<b>Direitos de<br>transmissão</b>'))
        fig.add_annotation(dict(font=dict(color="steelblue", size=11), x=0.05, y=1.20, showarrow=False, text=f'<b>{dfa.iat[0,0]}</b>'))

        fig.add_annotation(dict(font=dict(color="black", size=11), x=0.02, y=1.08, xanchor='left', showarrow=False, text='<b>Publicidade e<br>patrocínio</b>'))
        fig.add_annotation(dict(font=dict(color="steelblue", size=11), x=0.05, y=0.97, showarrow=False, text=f'<b>{dfa.iat[1,0]}</b>'))

        fig.add_annotation(dict(font=dict(color="black", size=11), x=0.02, y=0.87, xanchor='left', showarrow=False, text='<b>Arrecadação<br>de jogos</b>'))
        fig.add_annotation(dict(font=dict(color="steelblue", size=11), x=0.05, y=0.76, showarrow=False, text=f'<b>{dfa.iat[2,0]}</b>'))

        fig.add_annotation(dict(font=dict(color="black", size=11), x=0.02, y=0.60, xanchor='left', showarrow=False, text='<b>Sócio-torcedor</b>'))
        fig.add_annotation(dict(font=dict(color="steelblue", size=11), x=0.05, y=0.54, showarrow=False, text=f'<b>{dfa.iat[3,0]}</b>'))

        fig.add_annotation(dict(font=dict(color="black", size=10), x=0.25, y=1.39, xanchor='left', showarrow=False, text='<b>RECEITA<br>RECORRENTE</b>'))
        fig.add_annotation(dict(font=dict(color="steelblue", size=10), x=0.275, y=1.295, showarrow=False, text=f'<b>{dfa.iat[6,0]}</b>'))
            
        fig.add_annotation(dict(font=dict(color="black", size=11), x=0.26, y=0.62, xanchor='left', showarrow=False, text='<b>Negociação<br>de atletas</b>'))
        fig.add_annotation(dict(font=dict(color="steelblue", size=11), x=0.29, y=0.54, showarrow=False, text=f'<b>{dfa.iat[7,0]}</b>'))

        fig.add_annotation(dict(font=dict(color="black", size=11), x=0.26, y=0.32, xanchor='left', showarrow=False, text='<b>Outras<br>Despesas</b>'))
        fig.add_annotation(dict(font=dict(color="steelblue", size=11), x=0.29, y=0.25, showarrow=False, text=f'<b>{dfa.iat[8,0]}</b>'))

        fig.add_annotation(dict(font=dict(color="black", size=10), x=0.40, y=1.33, xanchor='left', showarrow=False, text='<b>RECEITA<br>OPERACIONAL</b>'))
        fig.add_annotation(dict(font=dict(color="steelblue", size=10), x=0.45, y=1.23, showarrow=False, text=f'<b>{dfa.iat[9,0]}</b>'))

        fig.add_annotation(dict(font=dict(color="black", size=10), x=0.56, y=1.00, xanchor='left', showarrow=False, text='<b>DESPESAS</b>'))
        fig.add_annotation(dict(font=dict(color="indianred", size=10), x=0.60, y=0.95, showarrow=False, text=f'<b>{dfa.iat[16,0]}</b>'))

        fig.add_annotation(dict(font=dict(color="black", size=10), x=0.78, y=1.05, xanchor='left', showarrow=False, text='<b>Pessoal e<br>encargos</b>'))
        fig.add_annotation(dict(font=dict(color="indianred", size=10), x=0.825, y=0.94, showarrow=False, text=f'<b>{dfa.iat[10,0]}</b>'))

        fig.add_annotation(dict(font=dict(color="black", size=10), x=0.78, y=0.88, xanchor='left', showarrow=False, text='<b>Despesas gerais<br>e administrativas</b>'))
        fig.add_annotation(dict(font=dict(color="indianred", size=10), x=0.845, y=0.78, showarrow=False, text=f'<b>{dfa.iat[13,0]}</b>'))

        fig.add_annotation(dict(font=dict(color="black", size=10), x=0.78, y=0.66, xanchor='left', showarrow=False, text='<b>Depreciação<br>amortização</b>'))
        fig.add_annotation(dict(font=dict(color="indianred", size=10), x=0.84, y=0.58, showarrow=False, text=f'<b>{dfa.iat[14,0]}</b>'))

        fig.add_annotation(dict(font=dict(color="black", size=10), x=0.78, y=0.505, xanchor='left', showarrow=False, text='<b>Outras despesas</b>'))
        fig.add_annotation(dict(font=dict(color="indianred", size=10), x=0.85, y=0.455, showarrow=False, text=f'<b>{dfa.iat[15,0]}</b>'))

        fig.add_annotation(dict(font=dict(color="black", size=10), x=0.55, y=1.39, xanchor='left', showarrow=False, text='<b>RESULTADO<br>OPERACIONAL</b>'))
        fig.add_annotation(dict(font=dict(color="limegreen", size=10), x=0.595, y=1.29, showarrow=False, text=f'<b>{dfa.iat[17,0]}</b>'))

        fig.add_annotation(dict(font=dict(color="black", size=10), x=0.72, y=1.18, xanchor='left', showarrow=False, text='<b>RESULTADO<br>FINANCEIRO</b>'))
        fig.add_annotation(dict(font=dict(color="indianred", size=10), x=0.77, y=1.09, showarrow=False, text=f'<b>{dfa.iat[18,0]}</b>'))

        fig.add_annotation(dict(font=dict(color="black", size=10), x=0.91, y=1.35, xanchor='left', showarrow=False, text='<b>RESULTADO</b>'))
        fig.add_annotation(dict(font=dict(color="indianred", size=10), x=0.965, y=1.30, showarrow=False, text=f'<b>{dfa.iat[19,0]}</b>'))

        st.plotly_chart(fig)

#############################################################################################################################################
#############################################################################################################################################
#############################################################################################################################################
#############################################################################################################################################

        #Plotar Gráfico Alternativo
        fontsize=28
        # Player Comparison Data
        markdown_1 = f"<div style='text-align:center;  color: gray; font-weight: bold; font-size:{fontsize}px'>{clube:}</div>"
        st.markdown("<h4 style='text-align: center;'>Comparativo com a Média da Liga</h4>", unsafe_allow_html=True)
        st.markdown(markdown_1, unsafe_allow_html=True)
        dfb = df1.iloc[np.r_[47, 1:4, 7, 9, 22, 26], np.r_[0:21]]
        dfb_transposed = dfb.T
        # Set the first row as the new header
        dfb_transposed.columns = dfb_transposed.iloc[0]
        # Drop the first row
        dfb_transposed = dfb_transposed.iloc[1:]
        # Rename the first column to 'clubs'
        dfb_transposed.index.name = 'Clubes'
        dfb = dfb_transposed
        # Renaming Columns
        dfb = dfb.rename(columns={"Receita c/ Publicidade e patrocínio": "Publicidade/patrocínio",
                                  "Receita c/ Match-Day": "Match-Day",
                                  "Receita c/ Sócio-torcedor": "Sócio-Torcedor",
                                  "Receita c/ Negociação de atletas": "Venda de jogadores",
                                  "Receita c/ Transmissão + Premiações": "Transmissão/Premiações",
                                  "RECEITA RECORRENTE": "Receita Recorrente" 
                                  })

        # Preparing the Graph
        params = list(dfb.columns)
        params = params[0:]

        #Preparing Data
        ranges = []
        a_values = []
        b_values = []

        for x in params:
            a = min(dfb[params][x])
            a = a
            b = max(dfb[params][x])
            b = b
            ranges.append((a, b))

        for x in range(len(dfb.index)):
            if dfb.index[x] == clube:
                a_values = dfb.iloc[x].values.tolist()
            if dfb.index[x] == 'Média da Liga':
                b_values = dfb.iloc[x].values.tolist()
                                    
        a_values = a_values[0:]
        b_values = b_values[0:]

        # Rounding values to no decimal places
        a_values = [round(value) for value in a_values]
        b_values = [round(value) for value in b_values]

        values = [a_values, b_values]

        #Plotting Data
        title = dict(
            title_name = clube,
            title_color = '#B6282F',
            subtitle_name = "(R$ milhões)",
            subtitle_color = '#B6282F',
            title_name_2 = 'Média da Liga',
            title_color_2 = '#344D94',
            subtitle_name_2 = "(R$ milhões)",
            subtitle_color_2 = '#344D94',
            title_fontsize = 18,
        ) 

        ## instantiate object
        radar = Radar()

        ## instantiate object -- changing fontsize
        radar=Radar(fontfamily='Cursive', range_fontsize=14)
        radar=Radar(fontfamily='Cursive', label_fontsize=14)

        fig,ax = radar.plot_radar(ranges=ranges,params=params,values=values,radar_color=['#B6282F', '#344D94'], dpi=600, alphas=[.6,.5], title=title, compare=True)
        #fig,ax = radar.plot_radar(ranges=ranges,params=params,values=values,radar_color=['#7eb6e0', '#f77b72'], dpi=600, alphas=[.8,.6], title=title, compare=True)
        st.pyplot(fig)

###############################################################################################################################################
###############################################################################################################################################
###############################################################################################################################################
###############################################################################################################################################

        #Plotar Gráfico Alternativo - 2024 x 2023
        fontsize=28
        # Player Comparison Data
        markdown_1 = f"<div style='text-align:center;  color: blue; font-weight: bold; font-size:{fontsize}px'>{clube:}</div>"
        st.markdown("<h4 style='text-align: center;'>Comparativo 2024 vs 2023</h4>", unsafe_allow_html=True)
        st.markdown(markdown_1, unsafe_allow_html=True)
        dfb = df1.iloc[np.r_[47, 1:4, 7, 9, 22, 26], np.r_[0, 6]]
        dfb = dfb.rename(columns={"Corinthians": "Corinthians - 2024"})
        dfb_2023 = df1_2023.iloc[np.r_[47, 1:4, 7, 9, 22, 26], np.r_[0, 6]]
        dfb_2023 = dfb_2023.rename(columns={"Corinthians": "Corinthians - 2023"})
        # Fazendo o merge com base na coluna "Clubes"
        dfb = pd.merge(dfb, dfb_2023, on="Clubes", how="inner")  # você pode trocar o "how" se quiser
        
        dfb_transposed = dfb.T
        # Set the first row as the new header
        dfb_transposed.columns = dfb_transposed.iloc[0]
        # Drop the first row
        dfb_transposed = dfb_transposed.iloc[1:]
        # Rename the first column to 'clubs'
        dfb_transposed.index.name = 'Clubes'
        dfb = dfb_transposed
        # Renaming Columns
        dfb = dfb.rename(columns={"Receita c/ Publicidade e patrocínio": "Publicidade/patrocínio",
                                  "Receita c/ Match-Day": "Match-Day",
                                  "Receita c/ Sócio-torcedor": "Sócio-Torcedor",
                                  "Receita c/ Negociação de atletas": "Venda de jogadores",
                                  "Receita c/ Direitos de transmissão": "Direitos de transmissão" 
                                  })

        teste_2024 = pd.read_csv("índices.csv")
        teste_2024 = teste_2024.iloc[np.r_[47, 1:4, 7, 9, 22, 26], np.r_[0: 20]]
        teste_2024_transposed = teste_2024.T
        # Set the first row as the new header
        teste_2024_transposed.columns = teste_2024_transposed.iloc[0]
        # Drop the first row
        teste_2024_transposed = teste_2024_transposed.iloc[1:]
        # Rename the first column to 'clubs'
        teste_2024_transposed.index.name = 'Clubes'
        teste_2024 = teste_2024_transposed
        # Renaming Columns
        teste_2024 = teste_2024.rename(columns={"Receita c/ Publicidade e patrocínio": "Publicidade/patrocínio",
                                  "Receita c/ Match-Day": "Match-Day",
                                  "Receita c/ Sócio-torcedor": "Sócio-Torcedor",
                                  "Receita c/ Negociação de atletas": "Venda de jogadores",
                                  "Receita c/ Direitos de transmissão": "Direitos de transmissão" 
                                  })

        teste_2023 = pd.read_csv("índices_2023.csv")
        teste_2023 = teste_2023.iloc[np.r_[47, 1:4, 7, 9, 22, 26], np.r_[0: 20]]
        teste_2023_transposed = teste_2023.T
        # Set the first row as the new header
        teste_2023_transposed.columns = teste_2023_transposed.iloc[0]
        # Drop the first row
        teste_2023_transposed = teste_2023_transposed.iloc[1:]
        # Rename the first column to 'clubs'
        teste_2023_transposed.index.name = 'Clubes'
        teste_2023 = teste_2023_transposed
        # Renaming Columns
        teste_2023 = teste_2023.rename(columns={"Receita c/ Publicidade e patrocínio": "Publicidade/patrocínio",
                                  "Receita c/ Match-Day": "Match-Day",
                                  "Receita c/ Sócio-torcedor": "Sócio-Torcedor",
                                  "Receita c/ Negociação de atletas": "Venda de jogadores",
                                  "Receita c/ Direitos de transmissão": "Direitos de transmissão" 
                                  })
    
        # Preparing the Graph
        params = list(dfb.columns)
        params = params[0:]
        #Preparing Data
        ranges = []
        a_values = []
        b_values = []

        for x in range(len(params)):
            # Combine as duas séries
            combined_values = pd.concat([teste_2023[params].iloc[:, x], teste_2024[params].iloc[:, x]])
            
            # Encontre o mínimo e o máximo
            a = combined_values.min()
            b = combined_values.max()
        
            ranges.append((a, b))

        for x in range(len(dfb.index)):
            if dfb.index[x] == "Corinthians - 2024":
                a_values = dfb.iloc[x].values.tolist()
            if dfb.index[x] == "Corinthians - 2023":
                b_values = dfb.iloc[x].values.tolist()
                                    
        a_values = a_values[0:]
        b_values = b_values[0:]

        # Rounding values to no decimal places
        a_values = [round(value) for value in a_values]
        b_values = [round(value) for value in b_values]

        values = [a_values, b_values]

        #Plotting Data
        title = dict(
            title_name = "Receitas e Despesas/2024",
            title_color = '#B6282F',
            subtitle_name = "(R$ milhões)",
            subtitle_color = '#B6282F',
            title_name_2 = 'Receitas e Despesas/2023',
            title_color_2 = '#344D94',
            subtitle_name_2 = "(R$ milhões)",
            subtitle_color_2 = '#344D94',
            title_fontsize = 18,
        ) 

        ## instantiate object
        radar = Radar()

        ## instantiate object -- changing fontsize
        radar=Radar(fontfamily='Cursive', range_fontsize=14)
        radar=Radar(fontfamily='Cursive', label_fontsize=14)

        fig,ax = radar.plot_radar(ranges=ranges,params=params,values=values,radar_color=['#B6282F', '#344D94'], dpi=600, alphas=[.6,.5], title=title, compare=True)
        st.pyplot(fig)

#############################################################################################################################################
#############################################################################################################################################
#############################################################################################################################################
#############################################################################################################################################
    elif clube == "Athletico":
        
        def display_club_image(clube):
            try:
                # Get the image URL for the selected club
                club_image_url = club_image_paths.get(clube)
                
                if club_image_url:
                    # Center-align and display the image
                    st.markdown(
                        f"""
                        <div style="display: flex; justify-content: center;">
                            <img src="{club_image_url}" width="150">
                        </div>
                        """,
                        unsafe_allow_html=True
                    )
                else:
                    st.warning(f"Imagem não encontrada para o clube: {clube}")
            except Exception as e:
                st.error(f"Erro ao exibir a imagem: {e}")

        display_club_image(clube)

#############################################################################################################################################
#############################################################################################################################################
#############################################################################################################################################
#############################################################################################################################################

        # Custom CSS for better formatting
        st.markdown("""
        <style>
            .main {
                padding: 2rem;
            }
            .stAlert {
                background-color: #f8f9fa;
                padding: 1rem;
                border-radius: 0.5rem;
                border-left: 5px solid #ff4b4b;
            }
            .info-box {
                background-color: #e6f3ff;
                padding: 1rem;
                border-radius: 0.5rem;
                border-left: 5px solid #4B8BF5;
                margin-bottom: 1rem;
            }
            h1, h2, h3 {
                color: #1E3A8A;
            }
            .katex {
                font-size: 1.1em;
            }
        </style>
        """, unsafe_allow_html=True)

        st.markdown("""
        <div class="info-box">
        <h4>Resumo:</h4>
        <p>Em 2024 o Athletico registrou superávit de R$ 23,4 milhões, mas a receita operacional líquida encolheu 46 % (R$ 261 milhões) 
        por não repetir as grandes vendas de atletas de 2023. O clube manteve forte geração de caixa operacional (R$ 113,5 milhões) 
        e destinou R$ 132,5 milhões a investimentos – sobretudo novas contratações (R$ 102 milhões) e obras na Ligga Arena (R$ 29 milhões). </p>
        <h4>Destaques:</h4>
        <p>1. Receita dependente de atletas & match-day: com queda forte em 2024, diversificação digital (Rede Furacão) precisa ganhar 
        escala para estabilizar fluxos. </p>
        <p>2. O rebaixamento impedirá a participação plena nos direitos de TV negociados pela LFU, que implicaria aumento considerável de receita. </p>
        <p><b>Nota:</b> Utiliza apenas dados das demonstrações financeiras auditadas.</p>
        </div>
        """, unsafe_allow_html=True)

#############################################################################################################################################
#############################################################################################################################################
#############################################################################################################################################
#############################################################################################################################################
        
        st.markdown("<h4 style='text-align: center;  color: black;'>Demonstração de Resultado</b></h4>", unsafe_allow_html=True)
        st.markdown("<h5 style='text-align: center;  color: black;'>(em R$ milhões)<br></b></h5>", unsafe_allow_html=True)
        st.markdown("---")

        # Define labels, sources and targets (same as original)
        label = ["Direitos de transmissão", "Publicidade e patrocínio", "Arrecadação de jogos", 
                "Sócio-torcedor", "Premiações", "Licenciamento da marca", 
                "RECEITA RECORRENTE", "Negociação de atletas", "Outras receitas", 
                "RECEITA OPERACIONAL", "Pessoal e encargos", "Direitos de imagem", 
                "Despesas com jogos", "Despesas gerais e administrativas", 
                "Depreciação amortização", "Outras despesas", 
                "DESPESAS", "RESULTADO OPERACIONAL", "Resultado financeiro", "RESULTADO"]
        

        source =             [0, 1, 2, 3, 4, 5, 6, 7, 9,  9,  9, 16, 16, 16, 16, 16, 16, 17, 17] #19 sources
        target =             [6, 6, 6, 6, 6, 6, 9, 9, 8, 17, 16, 10, 11, 12, 13, 14, 15, 18, 19] #19 targets
        value = df.iloc[np.r_[0, 1, 2, 3, 4, 5, 6, 7, 8, 17, 16, 10, 11, 12, 13, 14, 15, 18, 19], np.r_[3]].astype(int) #19 values
        dfa = df.iloc[:, np.r_[3]].astype(int)


        # Using positioning more similar to your original layout
        # These coordinates preserve the general structure but with slight improvements
        x = [0.15, 0.15, 0.15, 0.15, 0.15, 0.15,    # Revenue sources (left)
            0.30,                                   # Recurring Revenue (left-center)
            0.315, 0.525,                           # Additional revenues (left-center)
            0.45,                                   # Net Operating Revenue (center)
            0.75, 0.75, 0.75, 0.75, 0.75, 0.75,     # Expense categories (right)
            0.60,                                   # Total Expenses (right-center)
            0.70,                                   # Resultado Operacional
            0.95,                                   # Resultado financeiro
            0.955]                                   # Results (far right)
            
        y = [-0.22, 0.0, 0.22, 0.44, 0.66, 0.88,    # Revenue sources (left)
            -0.05,                                  # Recurring Revenue (left-center)
            0.18, 0.40,                             # Additional revenues (left-center)
            0.15,                                   # Net Operating Revenue (center)
            0.03, 0.20, 0.35, 0.50, 0.65, 0.80,    # Expense categories (right)
            0.25,                                   # Total Expenses (right-center)
            -0.21,                                  # Resultado Operacional
            -0.08,                                  # Resultado financeiro
            -0.25]                                   # Results (far right)

        # Colors that match the original diagram more closely
        # Light blue for revenue flows, green for positive results, red for expenses
        color_for_nodes = [
            'steelblue', 'steelblue', 'steelblue', 'steelblue', 'steelblue', 'steelblue',  # Revenue sources
            'steelblue',                                                                  # Recurring Revenue
            'steelblue', 'indianred',                                                     # Additional revenues
            'steelblue',                                                                  # Net Operating Revenue
            'indianred', 'indianred', 'indianred', 'indianred', 'indianred', 'indianred', # Expense categories
            'indianred',                                                                  # Total Expenses
            'limegreen', 
            'indianred', 
            'limegreen'                                         # Results
        ]
        
        # Flow colors that match the original diagram more closely
        color_for_links = [
            'LightSkyBlue', 'LightSkyBlue', 'LightSkyBlue', 'LightSkyBlue', 'LightSkyBlue', 'LightSkyBlue',    # Revenue source flows
            'LightSkyBlue', 'LightSkyBlue', 'LightCoral',                                          # Additional revenue flows
            'lime',                                                                         # Flow to operating result
            'LightCoral',                                                                    # Flow to expenses
            'LightCoral', 'LightCoral', 'LightCoral', 'LightCoral', 'LightCoral', 'LightCoral',    # Expense category flows
            'LightCoral', 
            'lime'                                                             # Result flows
        ]

           
        link = dict(source=source, target=target, value=value, color=color_link)
        node = dict(label = label, pad=35, thickness=20)
        data = go.Sankey(link=link, node=node)

        # Set our X and Y co-ords 
        x = [.001 if v==0 else .999 if v==1 else v for v in x]
        y = [.001 if v==0 else .999 if v==1 else v for v in y]


        fig = go.Figure(data=[go.Sankey(
                # The following line hides our labels. They still show
                # when you hover the mouse over an object
                textfont=dict(color="rgba(0,0,0,0)", size=1),
                node = dict(
                    pad = 35,
                    line = dict(color = "white", width = 1),
                    label = label,
                    x = x,
                    y = y
                ),
                link = dict(
                    source = source,
                    target = target,
                    value = value
                    ))])

        # Update our chart
        fig.update_layout(
            hovermode='x',
        )
        # Apply node and link colour choices
        fig.update_traces(node_color = color_for_nodes,
                        link_color = color_for_links)
            
        fig.add_annotation(dict(font=dict(color="black", size=11), x=0.02, y=1.31, xanchor='left', showarrow=False, text='<b>Direitos de<br>transmissão</b>'))
        fig.add_annotation(dict(font=dict(color="steelblue", size=11), x=0.05, y=1.20, showarrow=False, text=f'<b>{dfa.iat[0,0]}</b>'))

        fig.add_annotation(dict(font=dict(color="black", size=11), x=0.02, y=1.08, xanchor='left', showarrow=False, text='<b>Publicidade e<br>patrocínio</b>'))
        fig.add_annotation(dict(font=dict(color="steelblue", size=11), x=0.05, y=0.97, showarrow=False, text=f'<b>{dfa.iat[1,0]}</b>'))

        fig.add_annotation(dict(font=dict(color="black", size=11), x=0.02, y=0.87, xanchor='left', showarrow=False, text='<b>Arrecadação<br>de jogos</b>'))
        fig.add_annotation(dict(font=dict(color="steelblue", size=11), x=0.05, y=0.76, showarrow=False, text=f'<b>{dfa.iat[2,0]}</b>'))

        fig.add_annotation(dict(font=dict(color="black", size=11), x=0.02, y=0.60, xanchor='left', showarrow=False, text='<b>Sócio-torcedor</b>'))
        fig.add_annotation(dict(font=dict(color="steelblue", size=11), x=0.05, y=0.54, showarrow=False, text=f'<b>{dfa.iat[3,0]}</b>'))

        fig.add_annotation(dict(font=dict(color="black", size=11), x=0.02, y=0.37, xanchor='left', showarrow=False, text='<b>Premiações</b>'))
        fig.add_annotation(dict(font=dict(color="steelblue", size=11), x=0.05, y=0.28, showarrow=False, text=f'<b>{dfa.iat[4,0]}</b>'))

        fig.add_annotation(dict(font=dict(color="black", size=11), x=0.02, y=0.12, xanchor='left', showarrow=False, text='<b>Licenciamento<br>da marca</b>'))
        fig.add_annotation(dict(font=dict(color="steelblue", size=11), x=0.05, y=0.06, showarrow=False, text=f'<b>{dfa.iat[5,0]}</b>'))
            
        fig.add_annotation(dict(font=dict(color="black", size=10), x=0.255, y=1.30, xanchor='left', showarrow=False, text='<b>RECEITA<br>RECORRENTE</b>'))
        fig.add_annotation(dict(font=dict(color="steelblue", size=10), x=0.285, y=1.21, showarrow=False, text=f'<b>{dfa.iat[6,0]}</b>'))
            
        fig.add_annotation(dict(font=dict(color="black", size=11), x=0.27, y=0.76, xanchor='left', showarrow=False, text='<b>Negociação<br>de atletas</b>'))
        fig.add_annotation(dict(font=dict(color="steelblue", size=11), x=0.30, y=0.62, showarrow=False, text=f'<b>{dfa.iat[7,0]}</b>'))

        fig.add_annotation(dict(font=dict(color="black", size=11), x=0.50, y=0.50, xanchor='left', showarrow=False, text='<b>Ajuste nas<br> Receitas</b>'))
        fig.add_annotation(dict(font=dict(color="indianred", size=11), x=0.54, y=0.42, showarrow=False, text=f'<b>{dfa.iat[8,0]}</b>'))

        fig.add_annotation(dict(font=dict(color="black", size=10), x=0.40, y=1.18, xanchor='left', showarrow=False, text='<b>RECEITA<br>OPERACIONAL</b>'))
        fig.add_annotation(dict(font=dict(color="steelblue", size=10), x=0.45, y=1.08, showarrow=False, text=f'<b>{dfa.iat[9,0]}</b>'))

        fig.add_annotation(dict(font=dict(color="black", size=10), x=0.56, y=1.00, xanchor='left', showarrow=False, text='<b>DESPESAS</b>'))
        fig.add_annotation(dict(font=dict(color="indianred", size=10), x=0.595, y=0.95, showarrow=False, text=f'<b>{dfa.iat[16,0]}</b>'))

        fig.add_annotation(dict(font=dict(color="black", size=10), x=0.78, y=1.05, xanchor='left', showarrow=False, text='<b>Pessoal e<br>encargos</b>'))
        fig.add_annotation(dict(font=dict(color="indianred", size=10), x=0.83, y=0.94, showarrow=False, text=f'<b>{dfa.iat[10,0]}</b>'))

        fig.add_annotation(dict(font=dict(color="black", size=10), x=0.78, y=0.88, xanchor='left', showarrow=False, text='<b>Direitos de<br>imagem</b>'))
        fig.add_annotation(dict(font=dict(color="indianred", size=10), x=0.83, y=0.78, showarrow=False, text=f'<b>{dfa.iat[11,0]}</b>'))

        fig.add_annotation(dict(font=dict(color="black", size=10), x=0.78, y=0.66, xanchor='left', showarrow=False, text='<b>Despesas com jogos</b>'))
        fig.add_annotation(dict(font=dict(color="indianred", size=10), x=0.85, y=0.61, showarrow=False, text=f'<b>{dfa.iat[12,0]}</b>'))

        fig.add_annotation(dict(font=dict(color="black", size=10), x=0.78, y=0.505, xanchor='left', showarrow=False, text='<b>Despesas gerais<br>e administrativas</b>'))
        fig.add_annotation(dict(font=dict(color="indianred", size=10), x=0.845, y=0.425, showarrow=False, text=f'<b>{dfa.iat[13,0]}</b>'))

        fig.add_annotation(dict(font=dict(color="black", size=10), x=0.78, y=0.35, xanchor='left', showarrow=False, text='<b>Depreciação<br>amortização</b>'))
        fig.add_annotation(dict(font=dict(color="indianred", size=10), x=0.83, y=0.25, showarrow=False, text=f'<b>{dfa.iat[14,0]}</b>'))

        fig.add_annotation(dict(font=dict(color="black", size=10), x=0.78, y=0.16, xanchor='left', showarrow=False, text='<b>Outras despesas</b>'))
        fig.add_annotation(dict(font=dict(color="indianred", size=10), x=0.845, y=0.10, showarrow=False, text=f'<b>{dfa.iat[15,0]}</b>'))

        fig.add_annotation(dict(font=dict(color="black", size=10), x=0.65, y=1.39, xanchor='left', showarrow=False, text='<b>RESULTADO<br>OPERACIONAL</b>'))
        fig.add_annotation(dict(font=dict(color="lime", size=10), x=0.715, y=1.30, showarrow=False, text=f'<b>{dfa.iat[17,0]}</b>'))

        fig.add_annotation(dict(font=dict(color="black", size=10), x=0.915, y=1.02, xanchor='left', showarrow=False, text='<b>RESULTADO<br>FINANCEIRO</b>'))
        fig.add_annotation(dict(font=dict(color="indianred", size=10), x=0.97, y=0.92, showarrow=False, text=f'<b>{dfa.iat[18,0]}</b>'))

        fig.add_annotation(dict(font=dict(color="black", size=10), x=0.91, y=1.38, xanchor='left', showarrow=False, text='<b>RESULTADO</b>'))
        fig.add_annotation(dict(font=dict(color="lime", size=10), x=0.965, y=1.33, showarrow=False, text=f'<b>{dfa.iat[19,0]}</b>'))

        st.plotly_chart(fig)

#############################################################################################################################################
#############################################################################################################################################
#############################################################################################################################################
#############################################################################################################################################

        #Plotar Gráfico Alternativo
        fontsize=28
        # Player Comparison Data
        markdown_1 = f"<div style='text-align:center;  color: red; font-weight: bold; font-size:{fontsize}px'>{clube:}</div>"
        st.markdown("<h4 style='text-align: center;'>Comparativo com a Média da Liga</h4>", unsafe_allow_html=True)
        st.markdown(markdown_1, unsafe_allow_html=True)
        dfb = df1.iloc[np.r_[47, 1, 58, 4, 7, 9, 22, 26], np.r_[0:21]]
        dfb_transposed = dfb.T
        # Set the first row as the new header
        dfb_transposed.columns = dfb_transposed.iloc[0]
        # Drop the first row
        dfb_transposed = dfb_transposed.iloc[1:]
        # Rename the first column to 'clubs'
        dfb_transposed.index.name = 'Clubes'
        dfb = dfb_transposed
        # Renaming Columns
        dfb = dfb.rename(columns={"Receita c/ Publicidade e patrocínio": "Publicidade/patrocínio",
                                  "Receita c/ Match-Day": "Match-Day",
                                  "Receita c/ Sócio-torcedor": "Sócio-Torcedor",
                                  "Receita c/ Negociação de atletas": "Venda de jogadores",
                                  "Receita c/ Direitos de transmissão": "Direitos de transmissão" 
                                  })
        # Preparing the Graph
        params = list(dfb.columns)
        params = params[0:]
        #Preparing Data
        ranges = []
        a_values = []
        b_values = []

        for x in params:
            a = min(dfb[params][x])
            a = a
            b = max(dfb[params][x])
            b = b
            ranges.append((a, b))

        for x in range(len(dfb.index)):
            if dfb.index[x] == clube:
                a_values = dfb.iloc[x].values.tolist()
            if dfb.index[x] == 'Média da Liga':
                b_values = dfb.iloc[x].values.tolist()
                                    
        a_values = a_values[0:]
        b_values = b_values[0:]

        # Rounding values to no decimal places
        a_values = [round(value) for value in a_values]
        b_values = [round(value) for value in b_values]

        values = [a_values, b_values]

        #Plotting Data
        title = dict(
            title_name = "Receitas e Despesas",
            title_color = '#B6282F',
            subtitle_name = "(R$ milhões)",
            subtitle_color = '#B6282F',
            title_name_2 = 'Média da Liga',
            title_color_2 = '#344D94',
            subtitle_name_2 = "(R$ milhões)",
            subtitle_color_2 = '#344D94',
            title_fontsize = 18,
        ) 

        ## instantiate object
        radar = Radar()

        ## instantiate object -- changing fontsize
        radar=Radar(fontfamily='Cursive', range_fontsize=14)
        radar=Radar(fontfamily='Cursive', label_fontsize=14)

        fig,ax = radar.plot_radar(ranges=ranges,params=params,values=values,radar_color=['#B6282F', '#344D94'], dpi=600, alphas=[.6,.5], title=title, compare=True)
        st.pyplot(fig)

#############################################################################################################################################
#############################################################################################################################################
#############################################################################################################################################
#############################################################################################################################################

        #Plotar Gráfico Alternativo - 2024 x 2023
        fontsize=28
        # Player Comparison Data
        markdown_1 = f"<div style='text-align:center;  color: red; font-weight: bold; font-size:{fontsize}px'>{clube:}</div>"
        st.markdown("<h4 style='text-align: center;'>Comparativo 2024 vs 2023</h4>", unsafe_allow_html=True)
        st.markdown(markdown_1, unsafe_allow_html=True)
        dfb = df1.iloc[np.r_[47, 1, 58, 4, 7, 9, 22, 26], np.r_[0, 3]]
        dfb = dfb.rename(columns={"Athletico": "Athletico - 2024"})
        dfb_2023 = df1_2023.iloc[np.r_[47, 1, 58, 4, 7, 9, 22, 26], np.r_[0, 2]]
        dfb_2023 = dfb_2023.rename(columns={"Athletico": "Athletico - 2023"})
        # Fazendo o merge com base na coluna "Clubes"
        dfb = pd.merge(dfb, dfb_2023, on="Clubes", how="inner")  # você pode trocar o "how" se quiser
        
        dfb_transposed = dfb.T
        # Set the first row as the new header
        dfb_transposed.columns = dfb_transposed.iloc[0]
        # Drop the first row
        dfb_transposed = dfb_transposed.iloc[1:]
        # Rename the first column to 'clubs'
        dfb_transposed.index.name = 'Clubes'
        dfb = dfb_transposed
        # Renaming Columns
        dfb = dfb.rename(columns={"Receita c/ Publicidade e patrocínio": "Publicidade/patrocínio",
                                  "Receita c/ Match-Day": "Match-Day",
                                  "Receita c/ Sócio-torcedor": "Sócio-Torcedor",
                                  "Receita c/ Negociação de atletas": "Venda de jogadores",
                                  "Receita c/ Direitos de transmissão": "Direitos de transmissão" 
                                  })

        teste_2024 = pd.read_csv("índices.csv")
        teste_2024 = teste_2024.iloc[np.r_[47, 1, 58, 4, 7, 9, 22, 26], np.r_[0: 20]]
        teste_2024_transposed = teste_2024.T
        # Set the first row as the new header
        teste_2024_transposed.columns = teste_2024_transposed.iloc[0]
        # Drop the first row
        teste_2024_transposed = teste_2024_transposed.iloc[1:]
        # Rename the first column to 'clubs'
        teste_2024_transposed.index.name = 'Clubes'
        teste_2024 = teste_2024_transposed
        # Renaming Columns
        teste_2024 = teste_2024.rename(columns={"Receita c/ Publicidade e patrocínio": "Publicidade/patrocínio",
                                  "Receita c/ Match-Day": "Match-Day",
                                  "Receita c/ Sócio-torcedor": "Sócio-Torcedor",
                                  "Receita c/ Negociação de atletas": "Venda de jogadores",
                                  "Receita c/ Direitos de transmissão": "Direitos de transmissão" 
                                  })

        teste_2023 = pd.read_csv("índices_2023.csv")
        teste_2023 = teste_2023.iloc[np.r_[47, 1, 58, 4, 7, 9, 22, 26], np.r_[0: 20]]
        teste_2023_transposed = teste_2023.T
        # Set the first row as the new header
        teste_2023_transposed.columns = teste_2023_transposed.iloc[0]
        # Drop the first row
        teste_2023_transposed = teste_2023_transposed.iloc[1:]
        # Rename the first column to 'clubs'
        teste_2023_transposed.index.name = 'Clubes'
        teste_2023 = teste_2023_transposed
        # Renaming Columns
        teste_2023 = teste_2023.rename(columns={"Receita c/ Publicidade e patrocínio": "Publicidade/patrocínio",
                                  "Receita c/ Match-Day": "Match-Day",
                                  "Receita c/ Sócio-torcedor": "Sócio-Torcedor",
                                  "Receita c/ Negociação de atletas": "Venda de jogadores",
                                  "Receita c/ Direitos de transmissão": "Direitos de transmissão" 
                                  })
        # Preparing the Graph
        params = list(dfb.columns)
        params = params[0:]
        #Preparing Data
        ranges = []
        a_values = []
        b_values = []

        for x in range(len(params)):
            # Combine as duas séries
            combined_values = pd.concat([teste_2023[params].iloc[:, x], teste_2024[params].iloc[:, x]])
            
            # Encontre o mínimo e o máximo
            a = combined_values.min()
            b = combined_values.max()
        
            ranges.append((a, b))

        for x in range(len(dfb.index)):
            if dfb.index[x] == "Athletico - 2024":
                a_values = dfb.iloc[x].values.tolist()
            if dfb.index[x] == "Athletico - 2023":
                b_values = dfb.iloc[x].values.tolist()
                                    
        a_values = a_values[0:]
        b_values = b_values[0:]

        # Rounding values to no decimal places
        a_values = [round(value) for value in a_values]
        b_values = [round(value) for value in b_values]

        values = [a_values, b_values]

        #Plotting Data
        title = dict(
            title_name = "Receitas e Despesas/2024",
            title_color = '#B6282F',
            subtitle_name = "(R$ milhões)",
            subtitle_color = '#B6282F',
            title_name_2 = 'Receitas e Despesas/2023',
            title_color_2 = '#344D94',
            subtitle_name_2 = "(R$ milhões)",
            subtitle_color_2 = '#344D94',
            title_fontsize = 18,
        ) 

        ## instantiate object
        radar = Radar()

        ## instantiate object -- changing fontsize
        radar=Radar(fontfamily='Cursive', range_fontsize=14)
        radar=Radar(fontfamily='Cursive', label_fontsize=14)

        fig,ax = radar.plot_radar(ranges=ranges,params=params,values=values,radar_color=['#B6282F', '#344D94'], dpi=600, alphas=[.6,.5], title=title, compare=True)
        st.pyplot(fig)

#############################################################################################################################################
#############################################################################################################################################
#############################################################################################################################################
#############################################################################################################################################

    elif clube == "Internacional":
        
        def display_club_image(clube):
            try:
                # Get the image URL for the selected club
                club_image_url = club_image_paths.get(clube)
                
                if club_image_url:
                    # Center-align and display the image
                    st.markdown(
                        f"""
                        <div style="display: flex; justify-content: center;">
                            <img src="{club_image_url}" width="150">
                        </div>
                        """,
                        unsafe_allow_html=True
                    )
                else:
                    st.warning(f"Imagem não encontrada para o clube: {clube}")
            except Exception as e:
                st.error(f"Erro ao exibir a imagem: {e}")

        display_club_image(clube)

#############################################################################################################################################
#############################################################################################################################################
#############################################################################################################################################
#############################################################################################################################################

        # Custom CSS for better formatting
        st.markdown("""
        <style>
            .main {
                padding: 2rem;
            }
            .stAlert {
                background-color: #f8f9fa;
                padding: 1rem;
                border-radius: 0.5rem;
                border-left: 5px solid #ff4b4b;
            }
            .info-box {
                background-color: #e6f3ff;
                padding: 1rem;
                border-radius: 0.5rem;
                border-left: 5px solid #4B8BF5;
                margin-bottom: 1rem;
            }
            h1, h2, h3 {
                color: #1E3A8A;
            }
            .katex {
                font-size: 1.1em;
            }
        </style>
        """, unsafe_allow_html=True)

        st.markdown("""
        <div class="info-box">
        <h4>Resumo:</h4>
        <p>Apesar de um ano marcado pelas enchentes que paralisaram o Beira-Rio, o Internacional 
        manteve geração de caixa operacional de R$ 150 milhões, mas registrou déficit contábil de R$ 34,5 milhões.
        O clube planeja em 2025 reduzir custos operacionais em 8,5% e obter superávit, apoiado por 
        expansão do quadro social, performance esportiva e gestão do passivo fiscal. ​</p>
        <h4>Destaques:</h4>
        <p>1. Os custos operacionais atingiram R$ 404 milhões, impulsionados pela folha (+18%) e direitos de imagem (100%). </p>
        <p>2. Resultado financeiro (-R$ 64 milhões) revela juros elevados sobre dívidas e variação cambial. </p>
        <p>3. Forte investimento em atletas (R$ 197 milhões) consumiu a Geração de Caixa Operacional (R$ 150 milhões) . </p>
        <p><b>Nota:</b> Utiliza apenas dados das demonstrações financeiras auditadas.</p>
        </div>
        """, unsafe_allow_html=True)

#############################################################################################################################################
#############################################################################################################################################
#############################################################################################################################################
#############################################################################################################################################
        
        st.markdown("<h4 style='text-align: center;  color: black;'>Demonstração de Resultado</b></h4>", unsafe_allow_html=True)
        st.markdown("<h5 style='text-align: center;  color: black;'>(em R$ milhões)<br></b></h5>", unsafe_allow_html=True)
        st.markdown("---")

        # Defining labels, sources and targets
        # Define labels, sources and targets (same as original)
        label = ["Direitos de transmissão", "Publicidade e patrocínio", "Arrecadação de jogos", 
                "Sócio-torcedor", "Premiações", "Licenciamento da marca", 
                "RECEITA RECORRENTE", "Negociação de atletas", "Outras receitas", 
                "RECEITA OPERACIONAL", "Pessoal e encargos", "Direitos de imagem", 
                "Despesas com jogos", "Despesas gerais e administrativas", 
                "Depreciação amortização", "Outras despesas", 
                "DESPESAS", "RESULTADO OPERACIONAL", "Resultado financeiro", "RESULTADO"]

        source = [            0, 1, 2, 3, 4, 5, 6, 7, 9,  9,  9, 16, 16, 16, 16, 16, 16, 17, 17] #19 sources
        target = [            6, 6, 6, 6, 6, 6, 9, 9, 8, 17, 16, 10, 11, 12, 13, 14, 15, 18, 19] #19 targets
        value = df.iloc[np.r_[0, 1, 2, 3, 4, 5, 6, 7, 8, 17, 16, 10, 11, 12, 13, 14, 17, 18, 19], np.r_[15]].astype(int) #19 values
        dfa = df.iloc[:, np.r_[15]].astype(int)

        # Using positioning more similar to your original layout
        # These coordinates preserve the general structure but with slight improvements
        x = [0.15, 0.15, 0.15, 0.15, 0.15, 0.15,    # Revenue sources (left)
            0.30,                                   # Recurring Revenue (left-center)
            0.375, 0.375,                           # Additional revenues (left-center)
            0.45,                                   # Net Operating Revenue (center)
            0.75, 0.75, 0.75, 0.75, 0.75, 0.75,     # Expense categories (right)
            0.60,                                   # Total Expenses (right-center)
            0.65,                                   # Resultado Operacional
            0.81,                                   # Resultado financeiro
            0.92]                                   # Results (far right)
            
        y = [-0.22, 0.0, 0.22, 0.44, 0.66, 0.88,    # Revenue sources (left)
            -0.05,                                  # Recurring Revenue (left-center)
            0.35, 0.50,                             # Additional revenues (left-center)
            0.16,                                   # Net Operating Revenue (center)
            0.04, 0.20, 0.35, 0.50, 0.65, 0.80,    # Expense categories (right)
            0.20,                                   # Total Expenses (right-center)
            -0.20,                                  # Resultado Operacional
            -0.20,                                  # Resultado financeiro
            -0.10]                                   # Results (far right)

        # Colors that match the original diagram more closely
        # Light blue for revenue flows, green for positive results, red for expenses
        color_for_nodes = [
            'steelblue', 'steelblue', 'steelblue', 'steelblue', 'steelblue', 'steelblue',  # Revenue sources
            'steelblue',                                                                  # Recurring Revenue
            'steelblue', 'steelblue',                                                     # Additional revenues
            'steelblue',                                                                  # Net Operating Revenue
            'indianred', 'indianred', 'indianred', 'indianred', 'indianred', 'indianred', # Expense categories
            'indianred',                                                                  # Total Expenses
            'limegreen', 
            'indianred', 
            'indianred'                                         # Results
        ]
        
        # Flow colors that match the original diagram more closely
        color_for_links = [
            'LightSkyBlue', 'LightSkyBlue', 'LightSkyBlue', 'LightSkyBlue', 'LightSkyBlue', 'LightSkyBlue',    # Revenue source flows
            'LightSkyBlue', 'LightSkyBlue', 'LightCoral',                                          # Additional revenue flows
            'lime',                                                                         # Flow to operating result
            'LightCoral',                                                                    # Flow to expenses
            'LightCoral', 'LightCoral', 'LightCoral', 'LightCoral', 'LightCoral', 'LightCoral',    # Expense category flows
            'LightCoral', 
            'LightCoral'                                                             # Result flows
        ]

            
        link = dict(source=source, target=target, value=value, color=color_link)
        node = dict(label = label, pad=35, thickness=20)
        data = go.Sankey(link=link, node=node)

        # Set our X and Y co-ords 
        #x = [0.15, 0.15, 0.15, 0.15, 0.15, 0.15, 0.30, 0.375, 0.375, 0.45, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.60, 0.70, 0.90, 0.95]
        #y = [-0.22, -0.00, 0.22, 0.44, 0.66, 0.88, -0.11, 0.20, 0.40, 0.00, 0.05, 0.20, 0.35, 0.50, 0.65, 0.80, 0.05, -0.20, -0.07, -0.22]
        x = [.001 if v==0 else .999 if v==1 else v for v in x]
        y = [.001 if v==0 else .999 if v==1 else v for v in y]

        fig = go.Figure(data=[go.Sankey(
                # The following line hides our labels. They still show
                # when you hover the mouse over an object
                textfont=dict(color="rgba(0,0,0,0)", size=1),
                node = dict(
                    pad = 35,
                    line = dict(color = "white", width = 1),
                    label = label,
                    x = x,
                    y = y
                ),
                link = dict(
                    source = source,
                    target = target,
                    value = value
                    ))])

        # Update our chart
        fig.update_layout(
            hovermode='x',
        )
        # Apply node and link colour choices
        fig.update_traces(node_color = color_for_nodes,
                        link_color = color_for_links)
            
        fig.add_annotation(dict(font=dict(color="black", size=11), x=0.02, y=1.31, xanchor='left', showarrow=False, text='<b>Direitos de<br>transmissão</b>'))
        fig.add_annotation(dict(font=dict(color="steelblue", size=11), x=0.05, y=1.20, showarrow=False, text=f'<b>{dfa.iat[0,0]}</b>'))

        fig.add_annotation(dict(font=dict(color="black", size=11), x=0.02, y=1.08, xanchor='left', showarrow=False, text='<b>Publicidade e<br>patrocínio</b>'))
        fig.add_annotation(dict(font=dict(color="steelblue", size=11), x=0.05, y=0.97, showarrow=False, text=f'<b>{dfa.iat[1,0]}</b>'))

        fig.add_annotation(dict(font=dict(color="black", size=11), x=0.02, y=0.87, xanchor='left', showarrow=False, text='<b>Arrecadação<br>de jogos</b>'))
        fig.add_annotation(dict(font=dict(color="steelblue", size=11), x=0.05, y=0.76, showarrow=False, text=f'<b>{dfa.iat[2,0]}</b>'))

        fig.add_annotation(dict(font=dict(color="black", size=11), x=0.02, y=0.60, xanchor='left', showarrow=False, text='<b>Sócio-torcedor</b>'))
        fig.add_annotation(dict(font=dict(color="steelblue", size=11), x=0.05, y=0.54, showarrow=False, text=f'<b>{dfa.iat[3,0]}</b>'))

        fig.add_annotation(dict(font=dict(color="black", size=11), x=0.02, y=0.37, xanchor='left', showarrow=False, text='<b>Premiações</b>'))
        fig.add_annotation(dict(font=dict(color="steelblue", size=11), x=0.05, y=0.28, showarrow=False, text=f'<b>{dfa.iat[4,0]}</b>'))

        fig.add_annotation(dict(font=dict(color="black", size=11), x=0.02, y=0.12, xanchor='left', showarrow=False, text='<b>Licenciamento<br>da marca</b>'))
        fig.add_annotation(dict(font=dict(color="steelblue", size=11), x=0.05, y=0.06, showarrow=False, text=f'<b>{dfa.iat[5,0]}</b>'))
            
        fig.add_annotation(dict(font=dict(color="black", size=10), x=0.255, y=1.30, xanchor='left', showarrow=False, text='<b>RECEITA<br>RECORRENTE</b>'))
        fig.add_annotation(dict(font=dict(color="steelblue", size=10), x=0.285, y=1.21, showarrow=False, text=f'<b>{dfa.iat[6,0]}</b>'))
            
        fig.add_annotation(dict(font=dict(color="black", size=11), x=0.27, y=0.76, xanchor='left', showarrow=False, text='<b>Negociação<br>de atletas</b>'))
        fig.add_annotation(dict(font=dict(color="steelblue", size=11), x=0.30, y=0.62, showarrow=False, text=f'<b>{dfa.iat[7,0]}</b>'))

        fig.add_annotation(dict(font=dict(color="black", size=11), x=0.27, y=0.505, xanchor='left', showarrow=False, text='<b>Ajustes em<br>Receitas</b>'))
        fig.add_annotation(dict(font=dict(color="indianred", size=11), x=0.30, y=0.425, showarrow=False, text=f'<b>{dfa.iat[8,0]}</b>'))

        fig.add_annotation(dict(font=dict(color="black", size=10), x=0.40, y=1.15, xanchor='left', showarrow=False, text='<b>RECEITA<br>OPERACIONAL</b>'))
        fig.add_annotation(dict(font=dict(color="steelblue", size=10), x=0.45, y=1.05, showarrow=False, text=f'<b>{dfa.iat[9,0]}</b>'))

        fig.add_annotation(dict(font=dict(color="black", size=10), x=0.56, y=1.05, xanchor='left', showarrow=False, text='<b>DESPESAS</b>'))
        fig.add_annotation(dict(font=dict(color="indianred", size=10), x=0.595, y=1.00, showarrow=False, text=f'<b>{dfa.iat[16,0]}</b>'))

        fig.add_annotation(dict(font=dict(color="black", size=10), x=0.78, y=1.05, xanchor='left', showarrow=False, text='<b>Pessoal e<br>encargos</b>'))
        fig.add_annotation(dict(font=dict(color="indianred", size=10), x=0.825, y=0.94, showarrow=False, text=f'<b>{dfa.iat[10,0]}</b>'))

        fig.add_annotation(dict(font=dict(color="black", size=10), x=0.78, y=0.88, xanchor='left', showarrow=False, text='<b>Direitos de<br>imagem</b>'))
        fig.add_annotation(dict(font=dict(color="indianred", size=10), x=0.83, y=0.78, showarrow=False, text=f'<b>{dfa.iat[11,0]}</b>'))

        fig.add_annotation(dict(font=dict(color="black", size=10), x=0.78, y=0.66, xanchor='left', showarrow=False, text='<b>Despesas com<br>jogos</b>'))
        fig.add_annotation(dict(font=dict(color="indianred", size=10), x=0.84, y=0.58, showarrow=False, text=f'<b>{dfa.iat[12,0]}</b>'))

        fig.add_annotation(dict(font=dict(color="black", size=10), x=0.78, y=0.505, xanchor='left', showarrow=False, text='<b>Despesas gerais<br>e administrativas</b>'))
        fig.add_annotation(dict(font=dict(color="indianred", size=10), x=0.85, y=0.425, showarrow=False, text=f'<b>{dfa.iat[13,0]}</b>'))

        fig.add_annotation(dict(font=dict(color="black", size=10), x=0.78, y=0.35, xanchor='left', showarrow=False, text='<b>Depreciação<br>amortização</b>'))
        fig.add_annotation(dict(font=dict(color="indianred", size=10), x=0.83, y=0.25, showarrow=False, text=f'<b>{dfa.iat[14,0]}</b>'))

        fig.add_annotation(dict(font=dict(color="black", size=10), x=0.78, y=0.16, xanchor='left', showarrow=False, text='<b>Outras despesas</b>'))
        fig.add_annotation(dict(font=dict(color="indianred", size=10), x=0.845, y=0.10, showarrow=False, text=f'<b>{dfa.iat[15,0]}</b>'))

        fig.add_annotation(dict(font=dict(color="black", size=10), x=0.60, y=1.39, xanchor='left', showarrow=False, text='<b>RESULTADO<br>OPERACIONAL</b>'))
        fig.add_annotation(dict(font=dict(color="steelblue", size=10), x=0.65, y=1.30, showarrow=False, text=f'<b>{dfa.iat[17,0]}</b>'))

        fig.add_annotation(dict(font=dict(color="black", size=10), x=0.77, y=1.39, xanchor='left', showarrow=False, text='<b>RESULTADO<br>FINANCEIRO</b>'))
        fig.add_annotation(dict(font=dict(color="indianred", size=10), x=0.82, y=1.30, showarrow=False, text=f'<b>{dfa.iat[18,0]}</b>'))

        fig.add_annotation(dict(font=dict(color="black", size=10), x=0.88, y=1.23, xanchor='left', showarrow=False, text='<b>RESULTADO</b>'))
        fig.add_annotation(dict(font=dict(color="indianred", size=10), x=0.93, y=1.18, showarrow=False, text=f'<b>{dfa.iat[19,0]}</b>'))

        st.plotly_chart(fig)

#############################################################################################################################################
#############################################################################################################################################
#############################################################################################################################################
#############################################################################################################################################

        #Plotar Gráfico Alternativo
        fontsize=28
        # Player Comparison Data
        markdown_1 = f"<div style='text-align:center;  color: red; font-weight: bold; font-size:{fontsize}px'>{clube:}</div>"
        st.markdown("<h4 style='text-align: center;'>Comparativo com a Média da Liga</h4>", unsafe_allow_html=True)
        st.markdown(markdown_1, unsafe_allow_html=True)
        dfb = df1.iloc[np.r_[47, 1, 58, 4, 7, 9, 22, 26], np.r_[0:21]]
        dfb_transposed = dfb.T
        # Set the first row as the new header
        dfb_transposed.columns = dfb_transposed.iloc[0]
        # Drop the first row
        dfb_transposed = dfb_transposed.iloc[1:]
        # Rename the first column to 'clubs'
        dfb_transposed.index.name = 'Clubes'
        dfb = dfb_transposed
        # Renaming Columns
        dfb = dfb.rename(columns={"Receita c/ Publicidade e patrocínio": "Publicidade/patrocínio",
                                  "Receita c/ Match-Day": "Match-Day",
                                  "Receita c/ Sócio-torcedor": "Sócio-Torcedor",
                                  "Receita c/ Negociação de atletas": "Venda de jogadores",
                                  "Receita c/ Direitos de transmissão": "Direitos de transmissão" 
                                  })
        # Preparing the Graph
        params = list(dfb.columns)
        params = params[0:]

        #Preparing Data
        ranges = []
        a_values = []
        b_values = []

        for x in params:
            a = min(dfb[params][x])
            a = a
            b = max(dfb[params][x])
            b = b
            ranges.append((a, b))

        for x in range(len(dfb.index)):
            if dfb.index[x] == clube:
                a_values = dfb.iloc[x].values.tolist()
            if dfb.index[x] == 'Média da Liga':
                b_values = dfb.iloc[x].values.tolist()
                                    
        a_values = a_values[0:]
        b_values = b_values[0:]

        # Rounding values to no decimal places
        a_values = [round(value) for value in a_values]
        b_values = [round(value) for value in b_values]

        values = [a_values, b_values]

        #Plotting Data
        title = dict(
            title_name = "Receitas e Despesas",
            title_color = '#B6282F',
            subtitle_name = "(R$ milhões)",
            subtitle_color = '#B6282F',
            title_name_2 = 'Média da Liga',
            title_color_2 = '#344D94',
            subtitle_name_2 = "(R$ milhões)",
            subtitle_color_2 = '#344D94',
            title_fontsize = 18,
        ) 

        ## instantiate object
        radar = Radar()

        ## instantiate object -- changing fontsize
        radar=Radar(fontfamily='Cursive', range_fontsize=14)
        radar=Radar(fontfamily='Cursive', label_fontsize=14)

        fig,ax = radar.plot_radar(ranges=ranges,params=params,values=values,radar_color=['#B6282F', '#344D94'], dpi=600, alphas=[.6,.5], title=title, compare=True)
        st.pyplot(fig)

#############################################################################################################################################
#############################################################################################################################################

        #Plotar Gráfico Alternativo - 2024 x 2023
        fontsize=28
        # Player Comparison Data
        markdown_1 = f"<div style='text-align:center;  color: red; font-weight: bold; font-size:{fontsize}px'>{clube:}</div>"
        st.markdown("<h4 style='text-align: center;'>Comparativo 2024 vs 2023</h4>", unsafe_allow_html=True)
        st.markdown(markdown_1, unsafe_allow_html=True)
        dfb = df1.iloc[np.r_[47, 1, 58, 4, 7, 9, 22, 26], np.r_[0, 15]]
        dfb = dfb.rename(columns={"Internacional": "Internacional - 2024"})
        dfb_2023 = df1_2023.iloc[np.r_[47, 1, 58, 4, 7, 9, 22, 26], np.r_[0, 15]]
        dfb_2023 = dfb_2023.rename(columns={"Internacional": "Internacional - 2023"})
        # Fazendo o merge com base na coluna "Clubes"
        dfb = pd.merge(dfb, dfb_2023, on="Clubes", how="inner")  # você pode trocar o "how" se quiser
        dfb_transposed = dfb.T
        # Set the first row as the new header
        dfb_transposed.columns = dfb_transposed.iloc[0]
        # Drop the first row
        dfb_transposed = dfb_transposed.iloc[1:]
        # Rename the first column to 'clubs'
        dfb_transposed.index.name = 'Clubes'
        dfb = dfb_transposed
        # Renaming Columns
        dfb = dfb.rename(columns={"Receita c/ Publicidade e patrocínio": "Publicidade/patrocínio",
                                  "Receita c/ Match-Day": "Match-Day",
                                  "Receita c/ Sócio-torcedor": "Sócio-Torcedor",
                                  "Receita c/ Negociação de atletas": "Venda de jogadores",
                                  "Receita c/ Direitos de transmissão": "Direitos de transmissão" 
                                  })

        # Descobrindo valores máximos e mínimos para o gráfico radar.
        teste_2024 = pd.read_csv("índices.csv")
        teste_2024 = teste_2024.iloc[np.r_[47, 1, 58, 4, 7, 9, 22, 26], np.r_[0: 20]]
        teste_2024_transposed = teste_2024.T
        # Set the first row as the new header
        teste_2024_transposed.columns = teste_2024_transposed.iloc[0]
        # Drop the first row
        teste_2024_transposed = teste_2024_transposed.iloc[1:]
        # Rename the first column to 'clubs'
        teste_2024_transposed.index.name = 'Clubes'
        teste_2024 = teste_2024_transposed
        # Renaming Columns
        teste_2024 = teste_2024.rename(columns={"Receita c/ Publicidade e patrocínio": "Publicidade/patrocínio",
                                  "Receita c/ Match-Day": "Match-Day",
                                  "Receita c/ Sócio-torcedor": "Sócio-Torcedor",
                                  "Receita c/ Negociação de atletas": "Venda de jogadores",
                                  "Receita c/ Direitos de transmissão": "Direitos de transmissão" 
                                  })

        teste_2023 = pd.read_csv("índices_2023.csv")
        teste_2023 = teste_2023.iloc[np.r_[47, 1, 58, 4, 7, 9, 22, 26], np.r_[0: 20]]
        teste_2023_transposed = teste_2023.T
        # Set the first row as the new header
        teste_2023_transposed.columns = teste_2023_transposed.iloc[0]
        # Drop the first row
        teste_2023_transposed = teste_2023_transposed.iloc[1:]
        # Rename the first column to 'clubs'
        teste_2023_transposed.index.name = 'Clubes'
        teste_2023 = teste_2023_transposed
        # Renaming Columns
        teste_2023 = teste_2023.rename(columns={"Receita c/ Publicidade e patrocínio": "Publicidade/patrocínio",
                                  "Receita c/ Match-Day": "Match-Day",
                                  "Receita c/ Sócio-torcedor": "Sócio-Torcedor",
                                  "Receita c/ Negociação de atletas": "Venda de jogadores",
                                  "Receita c/ Direitos de transmissão": "Direitos de transmissão" 
                                  })
    
        # Preparing the Graph
        params = list(dfb.columns)
        params = params[0:]
        #Preparing Data
        ranges = []
        a_values = []
        b_values = []

        for x in range(len(params)):
            # Combine as duas séries
            combined_values = pd.concat([teste_2023[params].iloc[:, x], teste_2024[params].iloc[:, x]])
            
            # Encontre o mínimo e o máximo
            a = combined_values.min()
            b = combined_values.max()
        
            ranges.append((a, b))

        for x in range(len(dfb.index)):
            if dfb.index[x] == "Internacional - 2024":
                a_values = dfb.iloc[x].values.tolist()
            if dfb.index[x] == "Internacional - 2023":
                b_values = dfb.iloc[x].values.tolist()
                                    
        a_values = a_values[0:]
        b_values = b_values[0:]

        # Rounding values to no decimal places
        a_values = [round(value) for value in a_values]
        b_values = [round(value) for value in b_values]

        values = [a_values, b_values]

        #Plotting Data
        title = dict(
            title_name = "Receitas e Despesas/2024",
            title_color = '#B6282F',
            subtitle_name = "(R$ milhões)",
            subtitle_color = '#B6282F',
            title_name_2 = 'Receitas e Despesas/2023',
            title_color_2 = '#344D94',
            subtitle_name_2 = "(R$ milhões)",
            subtitle_color_2 = '#344D94',
            title_fontsize = 18,
        ) 

        ## instantiate object
        radar = Radar()

        ## instantiate object -- changing fontsize
        radar=Radar(fontfamily='Cursive', range_fontsize=14)
        radar=Radar(fontfamily='Cursive', label_fontsize=14)

        fig,ax = radar.plot_radar(ranges=ranges,params=params,values=values,radar_color=['#B6282F', '#344D94'], dpi=600, alphas=[.6,.5], title=title, compare=True)
        st.pyplot(fig)

#############################################################################################################################################
#############################################################################################################################################
#############################################################################################################################################
#############################################################################################################################################

    elif clube == "Botafogo":
        
        def display_club_image(clube):
            try:
                # Get the image URL for the selected club
                club_image_url = club_image_paths.get(clube)
                
                if club_image_url:
                    # Center-align and display the image
                    st.markdown(
                        f"""
                        <div style="display: flex; justify-content: center;">
                            <img src="{club_image_url}" width="150">
                        </div>
                        """,
                        unsafe_allow_html=True
                    )
                else:
                    st.warning(f"Imagem não encontrada para o clube: {clube}")
            except Exception as e:
                st.error(f"Erro ao exibir a imagem: {e}")

        display_club_image(clube)
        
        st.markdown("<h4 style='text-align: center;  color: black;'>Demonstração de Resultado</b></h4>", unsafe_allow_html=True)
        st.markdown("<h5 style='text-align: center;  color: black;'>(em R$ milhões)<br></b></h5>", unsafe_allow_html=True)
        st.markdown("---")

        st.markdown("<h4 style='text-align: center;  color: black;'>Botafogo ainda não divulgou duas DFs</b></h4>", unsafe_allow_html=True)


#############################################################################################################################################
#############################################################################################################################################
#############################################################################################################################################
#############################################################################################################################################

    elif clube == "Fortaleza":
        
        def display_club_image(clube):
            try:
                # Get the image URL for the selected club
                club_image_url = club_image_paths.get(clube)
                
                if club_image_url:
                    # Center-align and display the image
                    st.markdown(
                        f"""
                        <div style="display: flex; justify-content: center;">
                            <img src="{club_image_url}" width="150">
                        </div>
                        """,
                        unsafe_allow_html=True
                    )
                else:
                    st.warning(f"Imagem não encontrada para o clube: {clube}")
            except Exception as e:
                st.error(f"Erro ao exibir a imagem: {e}")

        display_club_image(clube)
        
#############################################################################################################################################
#############################################################################################################################################
#############################################################################################################################################
#############################################################################################################################################

        # Custom CSS for better formatting
        st.markdown("""
        <style>
            .main {
                padding: 2rem;
            }
            .stAlert {
                background-color: #f8f9fa;
                padding: 1rem;
                border-radius: 0.5rem;
                border-left: 5px solid #ff4b4b;
            }
            .info-box {
                background-color: #e6f3ff;
                padding: 1rem;
                border-radius: 0.5rem;
                border-left: 5px solid #4B8BF5;
                margin-bottom: 1rem;
            }
            h1, h2, h3 {
                color: #1E3A8A;
            }
            .katex {
                font-size: 1.1em;
            }
        </style>
        """, unsafe_allow_html=True)

        st.markdown("""
        <div class="info-box">
        <h4>Resumo:</h4>
        <p>Em 2024, o Fortaleza concluiu a migração para uma SAF, manteve a receita líquida praticamente estável em R$ 231,5 mi, 
        mas fechou o ano com déficit de R$ 80,3 mi. </p>
        <h4>Destaques:</h4>
        <p>1. O Fortaleza foi dos poucos clubes que apresentou redução de receita (-5%) devido à queda na venda de jogadores (-100%). </p>
        <p>2. Os custos do futebol pressionaram as despesas. A folha do futebol aumentou 25%; a amortização de direitos de atletas
        outros 40%, pressionando os custos. </p>
        <p><b>Nota:</b> Utiliza apenas dados das demonstrações financeiras auditadas.</p>
        </div>
        """, unsafe_allow_html=True)

#############################################################################################################################################
#############################################################################################################################################
#############################################################################################################################################
#############################################################################################################################################

        st.markdown("<h4 style='text-align: center;  color: black;'>Demonstração de Resultado</b></h4>", unsafe_allow_html=True)
        st.markdown("<h5 style='text-align: center;  color: black;'>(em R$ milhões)<br></b></h5>", unsafe_allow_html=True)
        st.markdown("---")

        # Define labels, sources and targets (same as original)
        label = ["Direitos de transmissão", "Publicidade e patrocínio", "Arrecadação de jogos",
                 "Sócio-Torcedor", "Premiações", "Licenciamento da marca", 
                 "RECEITA RECORRENTE", "Negociação de atletas", "Outras receitas", 
                 "RECEITA OPERACIONAL", "Pessoal e encargos", "Direitos de Imagem", 
                 "Despesas com jogos", "Despesas gerais e administrativas", "Depreciação amortização", 
                 "Outras despesas", "DESPESAS", "RESULTADO OPERACIONAL", 
                 "Resultado financeiro", "RESULTADO"]

        source =               [0, 1, 2, 3, 4, 6, 7, 8,  9, 16, 16, 16, 16, 16, 16, 16, 17, 18] #18 sources
        target =               [6, 6, 6, 6, 6, 9, 9, 9, 16, 10, 11, 12, 13, 14, 15, 17, 19, 19] #18 targets
        value = df.iloc[np.r_[  0, 1, 2, 3, 4, 6, 7, 8,  9, 10, 11, 12, 13, 14, 15, 17, 17, 18], np.r_[12]].astype(int) #18 values
        dfa = df.iloc[:, np.r_[12]].astype(int)
        link = dict(source=source, target=target, value=value, color=color_link)
        node = dict(label = label, pad=35, thickness=20)
        data = go.Sankey(link=link, node=node)

        # Using positioning more similar to your original layout
        # These coordinates preserve the general structure but with slight improvements
        x = [0.15, 0.15, 0.15, 0.15, 0.15,                # Revenue sources (left)
            0.30,                                   # Recurring Revenue (left-center)
            0.375,                                  # Additional revenues (left-center)
            0.45,                                   # Net Operating Revenue (center)
            0.71, 0.71, 0.71, 0.71, 0.71, 0.71,      # Expense categories (right)
            0.60,                                   # Total Expenses (right-center)
            0.40,                                   # Resultado Operacional
            0.55,                                   # Resultado financeiro
            0.25]                                   # Results (far right)
            
        y = [-0.22, 0.0, 0.22, 0.44, 0.66,               # Revenue sources (left)
            0.08,                                  # Recurring Revenue (left-center)
            0.40,                                   # Additional revenues (left-center)
            0.15,                                   # Net Operating Revenue (center)
            0.03, 0.20, 0.35, 0.50, 0.65, 0.80,          # Expense categories (right)
            0.36,                                   # Total Expenses (right-center)
            0.65,                                   # Resultado Operacional
            0.77,                                   # Resultado financeiro
            0.75]                                   # Results (far right)

        x = [.001 if v==0 else .999 if v==1 else v for v in x]
        y = [.001 if v==0 else .999 if v==1 else v for v in y]

        # Colors that match the original diagram more closely
        # Light blue for revenue flows, green for positive results, red for expenses
        color_for_nodes = [
            'steelblue', 'steelblue', 'steelblue', 'steelblue', 'steelblue',                           # Revenue sources
            'steelblue',                                                                  # Recurring Revenue
            'steelblue', 'steelblue',                                                     # Additional revenues
            'steelblue',                                                                  # Net Operating Revenue
            'steelblue',                                                                  # Net Operating Revenue
            'indianred', 'indianred',
            'indianred', 'indianred', 'indianred', 'indianred', 'indianred',             # Expense categories
            'indianred',                                                                  # Total Expenses
            'indianred', 
            'indianred', 
            'indianred', 'indianred',
            'steelblue'
            # Results
        ]
        
        # Flow colors that match the original diagram more closely
        color_for_links = [
            'LightSkyBlue', 'LightSkyBlue', 'LightSkyBlue', 'LightSkyBlue', 'LightSkyBlue',                 # Revenue source flows
            'LightSkyBlue', 
            'LightSkyBlue', 'LightSkyBlue',                                 # Additional revenue flows
            'LightCoral',                                                                         # Flow to operating result
            'LightCoral',                                                                   # Flow to expenses
            'LightCoral', 'LightCoral', 'LightCoral', 'LightCoral', 'LightCoral',           # Expense category flows
            'LightCoral', 
            'LightCoral',
            'LightCoral'
            # Result flows
        ]

        fig = go.Figure(data=[go.Sankey(
                # The following line hides our labels. They still show
                # when you hover the mouse over an object
                textfont=dict(color="rgba(0,0,0,0)", size=1),
                node = dict(
                    pad = 35,
                    line = dict(color = "white", width = 1),
                    label = label,
                    x = x,
                    y = y
                ),
                link = dict(
                    source = source,
                    target = target,
                    value = value
                    ))])

        # Update our chart
        fig.update_layout(
            hovermode='x',
        )
        # Apply node and link colour choices
        fig.update_traces(node_color = color_for_nodes,
                        link_color = color_for_links)
            
        fig.add_annotation(dict(font=dict(color="black", size=11), x=0.02, y=1.29, xanchor='left', showarrow=False, text='<b>Direitos de<br>transmissão</b>'))
        fig.add_annotation(dict(font=dict(color="steelblue", size=11), x=0.05, y=1.18, showarrow=False, text=f'<b>{dfa.iat[0,0]}</b>'))

        fig.add_annotation(dict(font=dict(color="black", size=11), x=0.02, y=1.08, xanchor='left', showarrow=False, text='<b>Publicidade e<br>patrocínio</b>'))
        fig.add_annotation(dict(font=dict(color="steelblue", size=11), x=0.05, y=0.97, showarrow=False, text=f'<b>{dfa.iat[1,0]}</b>'))

        fig.add_annotation(dict(font=dict(color="black", size=11), x=0.02, y=0.87, xanchor='left', showarrow=False, text='<b>Arrecadação<br>de jogos</b>'))
        fig.add_annotation(dict(font=dict(color="steelblue", size=11), x=0.05, y=0.76, showarrow=False, text=f'<b>{dfa.iat[2,0]}</b>'))

        fig.add_annotation(dict(font=dict(color="black", size=11), x=0.02, y=0.60, xanchor='left', showarrow=False, text='<b>Sócio-torcedor</b>'))
        fig.add_annotation(dict(font=dict(color="steelblue", size=11), x=0.05, y=0.54, showarrow=False, text=f'<b>{dfa.iat[3,0]}</b>'))

        fig.add_annotation(dict(font=dict(color="black", size=11), x=0.02, y=0.37, xanchor='left', showarrow=False, text='<b>Premiações</b>'))
        fig.add_annotation(dict(font=dict(color="steelblue", size=11), x=0.05, y=0.28, showarrow=False, text=f'<b>{dfa.iat[4,0]}</b>'))

        fig.add_annotation(dict(font=dict(color="black", size=10), x=0.255, y=1.22, xanchor='left', showarrow=False, text='<b>RECEITA<br>RECORRENTE</b>'))
        fig.add_annotation(dict(font=dict(color="steelblue", size=10), x=0.285, y=1.13, showarrow=False, text=f'<b>{dfa.iat[6,0]}</b>'))
            
        fig.add_annotation(dict(font=dict(color="black", size=11), x=0.29, y=0.72, xanchor='left', showarrow=False, text='<b>Outras<br>receitas</b>'))
        fig.add_annotation(dict(font=dict(color="steelblue", size=11), x=0.315, y=0.58, showarrow=False, text=f'<b>{dfa.iat[8,0]}</b>'))

        fig.add_annotation(dict(font=dict(color="black", size=10), x=0.40, y=1.15, xanchor='left', showarrow=False, text='<b>RECEITA<br>OPERACIONAL</b>'))
        fig.add_annotation(dict(font=dict(color="steelblue", size=10), x=0.45, y=1.05, showarrow=False, text=f'<b>{dfa.iat[9,0]}</b>'))

        fig.add_annotation(dict(font=dict(color="black", size=10), x=0.73, y=1.05, xanchor='left', showarrow=False, text='<b>Pessoal e<br>encargos</b>'))
        fig.add_annotation(dict(font=dict(color="indianred", size=10), x=0.775, y=0.94, showarrow=False, text=f'<b>{dfa.iat[10,0]}</b>'))

        fig.add_annotation(dict(font=dict(color="black", size=10), x=0.73, y=0.88, xanchor='left', showarrow=False, text='<b>Direitos de<br>imagem</b>'))
        fig.add_annotation(dict(font=dict(color="indianred", size=10), x=0.78, y=0.77, showarrow=False, text=f'<b>{dfa.iat[11,0]}</b>'))

        fig.add_annotation(dict(font=dict(color="black", size=10), x=0.73, y=0.66, xanchor='left', showarrow=False, text='<b>Despesas com jogos</b>'))
        fig.add_annotation(dict(font=dict(color="indianred", size=10), x=0.79, y=0.62, showarrow=False, text=f'<b>{dfa.iat[12,0]}</b>'))

        fig.add_annotation(dict(font=dict(color="black", size=10), x=0.73, y=0.505, xanchor='left', showarrow=False, text='<b>Despesas gerais<br>e administrativas</b>'))
        fig.add_annotation(dict(font=dict(color="indianred", size=10), x=0.80, y=0.425, showarrow=False, text=f'<b>{dfa.iat[13,0]}</b>'))

        fig.add_annotation(dict(font=dict(color="black", size=10), x=0.73, y=0.35, xanchor='left', showarrow=False, text='<b>Depreciação<br>amortização</b>'))
        fig.add_annotation(dict(font=dict(color="indianred", size=10), x=0.78, y=0.25, showarrow=False, text=f'<b>{dfa.iat[14,0]}</b>'))

        fig.add_annotation(dict(font=dict(color="black", size=10), x=0.73, y=0.20, xanchor='left', showarrow=False, text='<b>Outras despesas</b>'))
        fig.add_annotation(dict(font=dict(color="indianred", size=10), x=0.795, y=0.13, showarrow=False, text=f'<b>{dfa.iat[15,0]}</b>'))

        fig.add_annotation(dict(font=dict(color="black", size=10), x=0.35, y=0.505, xanchor='left', showarrow=False, text='<b>RESULTADO<br>OPERACIONAL</b>'))
        fig.add_annotation(dict(font=dict(color="indianred", size=10), x=0.40, y=0.425, showarrow=False, text=f'<b>{dfa.iat[17,0]}</b>'))

        fig.add_annotation(dict(font=dict(color="black", size=10), x=0.51, y=0.35, xanchor='left', showarrow=False, text='<b>RESULTADO<br>FINANCEIRO</b>'))
        fig.add_annotation(dict(font=dict(color="indianred", size=10), x=0.55, y=0.25, showarrow=False, text=f'<b>{dfa.iat[18,0]}</b>'))

        fig.add_annotation(dict(font=dict(color="black", size=10), x=0.21, y=0.37, xanchor='left', showarrow=False, text='<b>RESULTADO</b>'))
        fig.add_annotation(dict(font=dict(color="indianred", size=10), x=0.24, y=0.29, showarrow=False, text=f'<b>{dfa.iat[19,0]}</b>'))

        fig.add_annotation(dict(font=dict(color="black", size=10), x=0.56, y=0.97, xanchor='left', showarrow=False, text='<b>DESPESAS</b>'))
        fig.add_annotation(dict(font=dict(color="indianred", size=10), x=0.60, y=0.93, showarrow=False, text=f'<b>{dfa.iat[16,0]}</b>'))

        st.plotly_chart(fig)

#############################################################################################################################################
#############################################################################################################################################
#############################################################################################################################################
#############################################################################################################################################

        #Plotar Gráfico Alternativo
        fontsize=28
        # Player Comparison Data
        markdown_1 = f"<div style='text-align:center;  color: blue; font-weight: bold; font-size:{fontsize}px'>{clube:}</div>"
        st.markdown("<h4 style='text-align: center;'>Comparativo com a Média da Liga</h4>", unsafe_allow_html=True)
        st.markdown(markdown_1, unsafe_allow_html=True)
        dfb = df1.iloc[np.r_[47, 1:5, 6, 9, 26], np.r_[0:21]]
        dfb_transposed = dfb.T
        # Set the first row as the new header
        dfb_transposed.columns = dfb_transposed.iloc[0]
        # Drop the first row
        dfb_transposed = dfb_transposed.iloc[1:]
        # Rename the first column to 'clubs'
        dfb_transposed.index.name = 'Clubes'
        dfb = dfb_transposed
        # Renaming Columns
        dfb = dfb.rename(columns={"Receita c/ Publicidade e patrocínio": "Publicidade/patrocínio",
                                  "Receita c/ Match-Day": "Match-Day",
                                  "Receita c/ Sócio-torcedor": "Sócio-Torcedor",
                                  "Receita c/ Negociação de atletas": "Venda de jogadores",
                                  "Receita c/ Direitos de transmissão": "Direitos de transmissão" 
                                  })
        # Preparing the Graph
        params = list(dfb.columns)
        params = params[0:]

        #Preparing Data
        ranges = []
        a_values = []
        b_values = []

        for x in params:
            a = min(dfb[params][x])
            a = a
            b = max(dfb[params][x])
            b = b
            ranges.append((a, b))

        for x in range(len(dfb.index)):
            if dfb.index[x] == clube:
                a_values = dfb.iloc[x].values.tolist()
            if dfb.index[x] == 'Média da Liga':
                b_values = dfb.iloc[x].values.tolist()
                                    
        a_values = a_values[0:]
        b_values = b_values[0:]

        # Rounding values to no decimal places
        a_values = [round(value) for value in a_values]
        b_values = [round(value) for value in b_values]

        values = [a_values, b_values]

        #Plotting Data
        title = dict(
            title_name = clube,
            title_color = '#B6282F',
            subtitle_name = "(R$ milhões)",
            subtitle_color = '#B6282F',
            title_name_2 = 'Média da Liga',
            title_color_2 = '#344D94',
            subtitle_name_2 = "(R$ milhões)",
            subtitle_color_2 = '#344D94',
            title_fontsize = 18,
        ) 

        ## instantiate object
        radar = Radar()

        ## instantiate object -- changing fontsize
        radar=Radar(fontfamily='Cursive', range_fontsize=14)
        radar=Radar(fontfamily='Cursive', label_fontsize=14)

        fig,ax = radar.plot_radar(ranges=ranges,params=params,values=values,radar_color=['#B6282F', '#344D94'], dpi=600, alphas=[.6,.5], title=title, compare=True)
        st.pyplot(fig)


###############################################################################################################################################
###############################################################################################################################################
###############################################################################################################################################
###############################################################################################################################################


        #Plotar Gráfico Alternativo - 2024 x 2023
        fontsize=28
        # Player Comparison Data
        markdown_1 = f"<div style='text-align:center;  color: blue; font-weight: bold; font-size:{fontsize}px'>{clube:}</div>"
        st.markdown("<h4 style='text-align: center;'>Comparativo 2024 vs 2023</h4>", unsafe_allow_html=True)
        st.markdown(markdown_1, unsafe_allow_html=True)
        dfb = df1.iloc[np.r_[47, 1, 58, 4, 11, 16, 26], np.r_[0, 12]]
        dfb = dfb.rename(columns={"Fortaleza": "Fortaleza - 2024"})
        dfb_2023 = df1_2023.iloc[np.r_[47, 1, 58, 4, 11, 16, 26], np.r_[0, 12]]
        dfb_2023 = dfb_2023.rename(columns={"Fortaleza": "Fortaleza - 2023"})
        # Fazendo o merge com base na coluna "Clubes"
        dfb = pd.merge(dfb, dfb_2023, on="Clubes", how="inner")  # você pode trocar o "how" se quiser
        
        dfb_transposed = dfb.T
        # Set the first row as the new header
        dfb_transposed.columns = dfb_transposed.iloc[0]
        # Drop the first row
        dfb_transposed = dfb_transposed.iloc[1:]
        # Rename the first column to 'clubs'
        dfb_transposed.index.name = 'Clubes'
        dfb = dfb_transposed
        # Renaming Columns
        dfb = dfb.rename(columns={"Receita c/ Publicidade e patrocínio": "Publicidade/patrocínio",
                                  "Receita c/ Match-Day": "Match-Day",
                                  "Receita c/ Sócio-torcedor": "Sócio-Torcedor",
                                  "Receita c/ Negociação de atletas": "Venda de jogadores",
                                  "Receita c/ Direitos de transmissão": "Direitos de transmissão" 
                                  })

        teste_2024 = pd.read_csv("índices.csv")
        teste_2024 = teste_2024.iloc[np.r_[47, 1, 58, 4, 11, 16, 26], np.r_[0: 20]]
        teste_2024_transposed = teste_2024.T
        # Set the first row as the new header
        teste_2024_transposed.columns = teste_2024_transposed.iloc[0]
        # Drop the first row
        teste_2024_transposed = teste_2024_transposed.iloc[1:]
        # Rename the first column to 'clubs'
        teste_2024_transposed.index.name = 'Clubes'
        teste_2024 = teste_2024_transposed
        # Renaming Columns
        teste_2024 = teste_2024.rename(columns={"Receita c/ Publicidade e patrocínio": "Publicidade/patrocínio",
                                  "Receita c/ Match-Day": "Match-Day",
                                  "Receita c/ Sócio-torcedor": "Sócio-Torcedor",
                                  "Receita c/ Negociação de atletas": "Venda de jogadores",
                                  "Receita c/ Direitos de transmissão": "Direitos de transmissão" 
                                  })

        teste_2023 = pd.read_csv("índices_2023.csv")
        teste_2023 = teste_2023.iloc[np.r_[47, 1, 58, 4, 11, 16, 26], np.r_[0: 20]]
        teste_2023_transposed = teste_2023.T
        # Set the first row as the new header
        teste_2023_transposed.columns = teste_2023_transposed.iloc[0]
        # Drop the first row
        teste_2023_transposed = teste_2023_transposed.iloc[1:]
        # Rename the first column to 'clubs'
        teste_2023_transposed.index.name = 'Clubes'
        teste_2023 = teste_2023_transposed
        # Renaming Columns
        teste_2023 = teste_2023.rename(columns={"Receita c/ Publicidade e patrocínio": "Publicidade/patrocínio",
                                  "Receita c/ Match-Day": "Match-Day",
                                  "Receita c/ Sócio-torcedor": "Sócio-Torcedor",
                                  "Receita c/ Negociação de atletas": "Venda de jogadores",
                                  "Receita c/ Direitos de transmissão": "Direitos de transmissão" 
                                  })
    
        # Preparing the Graph
        params = list(dfb.columns)
        params = params[0:]
        #Preparing Data
        ranges = []
        a_values = []
        b_values = []

        for x in range(len(params)):
            # Combine as duas séries
            combined_values = pd.concat([teste_2023[params].iloc[:, x], teste_2024[params].iloc[:, x]])
            
            # Encontre o mínimo e o máximo
            a = combined_values.min()
            b = combined_values.max()
        
            ranges.append((a, b))

        for x in range(len(dfb.index)):
            if dfb.index[x] == "Fortaleza - 2024":
                a_values = dfb.iloc[x].values.tolist()
            if dfb.index[x] == "Fortaleza - 2023":
                b_values = dfb.iloc[x].values.tolist()
                                    
        a_values = a_values[0:]
        b_values = b_values[0:]

        # Rounding values to no decimal places
        a_values = [round(value) for value in a_values]
        b_values = [round(value) for value in b_values]

        values = [a_values, b_values]

        #Plotting Data
        title = dict(
            title_name = "Receitas e Despesas/2024",
            title_color = '#B6282F',
            subtitle_name = "(R$ milhões)",
            subtitle_color = '#B6282F',
            title_name_2 = 'Receitas e Despesas/2023',
            title_color_2 = '#344D94',
            subtitle_name_2 = "(R$ milhões)",
            subtitle_color_2 = '#344D94',
            title_fontsize = 18,
        ) 

        ## instantiate object
        radar = Radar()

        ## instantiate object -- changing fontsize
        radar=Radar(fontfamily='Cursive', range_fontsize=14)
        radar=Radar(fontfamily='Cursive', label_fontsize=14)

        fig,ax = radar.plot_radar(ranges=ranges,params=params,values=values,radar_color=['#B6282F', '#344D94'], dpi=600, alphas=[.6,.5], title=title, compare=True)
        st.pyplot(fig)



#############################################################################################################################################
#############################################################################################################################################
#############################################################################################################################################
#############################################################################################################################################

    elif clube == "Fluminense":
        
        def display_club_image(clube):
            try:
                # Get the image URL for the selected club
                club_image_url = club_image_paths.get(clube)
                
                if club_image_url:
                    # Center-align and display the image
                    st.markdown(
                        f"""
                        <div style="display: flex; justify-content: center;">
                            <img src="{club_image_url}" width="150">
                        </div>
                        """,
                        unsafe_allow_html=True
                    )
                else:
                    st.warning(f"Imagem não encontrada para o clube: {clube}")
            except Exception as e:
                st.error(f"Erro ao exibir a imagem: {e}")

        display_club_image(clube)
        
#############################################################################################################################################
#############################################################################################################################################
#############################################################################################################################################
#############################################################################################################################################

        # Custom CSS for better formatting
        st.markdown("""
        <style>
            .main {
                padding: 2rem;
            }
            .stAlert {
                background-color: #f8f9fa;
                padding: 1rem;
                border-radius: 0.5rem;
                border-left: 5px solid #ff4b4b;
            }
            .info-box {
                background-color: #e6f3ff;
                padding: 1rem;
                border-radius: 0.5rem;
                border-left: 5px solid #4B8BF5;
                margin-bottom: 1rem;
            }
            h1, h2, h3 {
                color: #1E3A8A;
            }
            .katex {
                font-size: 1.1em;
            }
        </style>
        """, unsafe_allow_html=True)

        st.markdown("""
        <div class="info-box">
        <h4>Resumo:</h4>
        <p>O Fluminense encerrou 2024 com receitas totais de (R$ 661 mi, +46% vs. 2023), impulsionada pela venda 
        de jogadores (R$ 268 mi ante R$ 16 mi em 2023), registrando resultado zero. </p>
        <h4>Destaques:</h4>
        <p>1. Elevada dependência de receitas não recorrentes (transferências de atletas) expõe o clube à 
        volatilidade de mercado. </p>
        <p>2. Não foi lançada a reversão de metade da Receita antecipada em 2023 referente à venda de 20% dos 
        direitos comerciais da LFU, na ordem de R$ 110 mi. Este evento inflou indevidamente o Resultado de 2023
        e deveria ter sido parcialmente desfeito agora, já que o clube informou o Evento Subsequente em Nota. </p>
        <p><b>Nota:</b> Utiliza apenas dados das demonstrações financeiras auditadas.</p>
        </div>
        """, unsafe_allow_html=True)

#############################################################################################################################################
#############################################################################################################################################
#############################################################################################################################################
#############################################################################################################################################

        st.markdown("<h4 style='text-align: center;  color: black;'>Demonstração de Resultado</b></h4>", unsafe_allow_html=True)
        st.markdown("<h5 style='text-align: center;  color: black;'>(em R$ milhões)<br></b></h5>", unsafe_allow_html=True)
        st.markdown("---")

        # Define labels, sources and targets (same as original)
        label = ["Direitos de transmissão", "Publicidade e patrocínio", "Arrecadação de jogos", 
                "Sócio-torcedor", "Premiações", "Licenciamento da marca", 
                "RECEITA RECORRENTE", "Negociação de atletas", "Outras receitas", 
                "RECEITA OPERACIONAL", "Pessoal e encargos", "Direitos de imagem", 
                "Despesas com jogos", "Despesas gerais e administrativas", 
                "Depreciação amortização", "Outras despesas", 
                "DESPESAS", "RESULTADO OPERACIONAL", "Resultado financeiro", "RESULTADO"]


        source =              [0, 1, 2, 3, 6, 7, 8, 9,   9, 16, 16, 16, 16, 16, 17, 19] #18 sources
        target =              [6, 6, 6, 6, 9, 9, 9, 17, 16, 10, 12, 13, 14, 15, 18, 18] #18 targets
        value = df.iloc[np.r_[ 0, 1, 2, 3, 6, 7, 8, 17,  9, 10, 12, 13, 14, 15, 17, 19], np.r_[11]].astype(int) #18 values
        dfa = df.iloc[:, np.r_[11]].astype(int)

        # Using positioning more similar to your original layout
        # These coordinates preserve the general structure but with slight improvements
        x = [0.15, 0.15, 0.15, 0.15,                # Revenue sources (left)
            0.30,                                   # Recurring Revenue (left-center)
            0.375, 0.375,                           # Additional revenues (left-center)
            0.45,                                   # Net Operating Revenue (center)
            0.71, 0.71, 0.71, 0.71, 0.71,     # Expense categories (right)
            0.595,                                   # Total Expenses (right-center)
            0.55,                                   # Resultado Operacional
            0.81,                                   # Resultado financeiro
            0.85]                                   # Results (far right)
            
        y = [-0.22, 0.0, 0.22, 0.44,                # Revenue sources (left)
            -0.05,                                  # Recurring Revenue (left-center)
            0.35, 0.65,                             # Additional revenues (left-center)
            0.20,                                   # Net Operating Revenue (center)
            0.00, 0.20, 0.35, 0.50, 0.67,    # Expense categories (right)
            0.30,                                   # Total Expenses (right-center)
            -0.20,                                  # Resultado Operacional
            -0.17,                                  # Resultado financeiro
            -0.19]                                   # Results (far right)

        # Colors that match the original diagram more closely
        # Light blue for revenue flows, green for positive results, red for expenses
        color_for_nodes = [
            'steelblue', 'steelblue', 'steelblue', 'steelblue', 'steelblue', 'steelblue',  # Revenue sources
            'steelblue',                                                                  # Recurring Revenue
            'steelblue', 'steelblue',                                                     # Additional revenues
            'steelblue',                                                                  # Net Operating Revenue
            'indianred', 'indianred', 'indianred', 'indianred', 'indianred',             # Expense categories
            'indianred',                                                                  # Total Expenses
            'indianred', 
            'limegreen', 
            'indianred', 
            'limegreen'                                         # Results
        ]
        
        # Flow colors that match the original diagram more closely
        color_for_links = [
            'LightSkyBlue', 'LightSkyBlue', 'LightSkyBlue', 'LightSkyBlue', 'LightSkyBlue',    # Revenue source flows
            'LightSkyBlue', 'LightSkyBlue', 'lime', 'LightCoral',                                         # Additional revenue flows
            'LightCoral',                                                                         # Flow to operating result
            'LightCoral',                                                                    # Flow to expenses
            'LightCoral', 'LightCoral', 'LightCoral', 'LightCoral', 'LightCoral', 'LightCoral',    # Expense category flows
            'LightCoral', 
            'LightCoral'                                                             # Result flows
        ]

        link = dict(source=source, target=target, value=value, color=color_link)
        node = dict(label = label, pad=35, thickness=20)
        data = go.Sankey(link=link, node=node)

        # Set our X and Y co-ords 
        x = [.001 if v==0 else .999 if v==1 else v for v in x]
        y = [.001 if v==0 else .999 if v==1 else v for v in y]

        fig = go.Figure(data=[go.Sankey(
                # The following line hides our labels. They still show
                # when you hover the mouse over an object
                textfont=dict(color="rgba(0,0,0,0)", size=1),
                node = dict(
                    pad = 35,
                    line = dict(color = "white", width = 1),
                    label = label,
                    x = x,
                    y = y
                ),
                link = dict(
                    source = source,
                    target = target,
                    value = value
                    ))])

        # Update our chart
        fig.update_layout(
            hovermode='x',
        )
        # Apply node and link colour choices
        fig.update_traces(node_color = color_for_nodes,
                        link_color = color_for_links)
            
        fig.add_annotation(dict(font=dict(color="black", size=11), x=0.02, y=1.31, xanchor='left', showarrow=False, text='<b>Direitos de<br>transmissão</b>'))
        fig.add_annotation(dict(font=dict(color="steelblue", size=11), x=0.05, y=1.20, showarrow=False, text=f'<b>{dfa.iat[0,0]}</b>'))

        fig.add_annotation(dict(font=dict(color="black", size=11), x=0.02, y=1.08, xanchor='left', showarrow=False, text='<b>Publicidade e<br>patrocínio</b>'))
        fig.add_annotation(dict(font=dict(color="steelblue", size=11), x=0.05, y=0.97, showarrow=False, text=f'<b>{dfa.iat[1,0]}</b>'))

        fig.add_annotation(dict(font=dict(color="black", size=11), x=0.02, y=0.87, xanchor='left', showarrow=False, text='<b>Arrecadação<br>de jogos</b>'))
        fig.add_annotation(dict(font=dict(color="steelblue", size=11), x=0.05, y=0.76, showarrow=False, text=f'<b>{dfa.iat[2,0]}</b>'))

        fig.add_annotation(dict(font=dict(color="black", size=11), x=0.02, y=0.60, xanchor='left', showarrow=False, text='<b>Sócio-torcedor</b>'))
        fig.add_annotation(dict(font=dict(color="steelblue", size=11), x=0.05, y=0.54, showarrow=False, text=f'<b>{dfa.iat[3,0]}</b>'))

        fig.add_annotation(dict(font=dict(color="black", size=10), x=0.255, y=1.30, xanchor='left', showarrow=False, text='<b>RECEITA<br>RECORRENTE</b>'))
        fig.add_annotation(dict(font=dict(color="steelblue", size=10), x=0.285, y=1.21, showarrow=False, text=f'<b>{dfa.iat[6,0]}</b>'))
            
        fig.add_annotation(dict(font=dict(color="black", size=11), x=0.27, y=0.76, xanchor='left', showarrow=False, text='<b>Negociação<br>de atletas</b>'))
        fig.add_annotation(dict(font=dict(color="steelblue", size=11), x=0.30, y=0.62, showarrow=False, text=f'<b>{dfa.iat[7,0]}</b>'))

        fig.add_annotation(dict(font=dict(color="black", size=11), x=0.27, y=0.35, xanchor='left', showarrow=False, text='<b>Outras<br>receitas</b>'))
        fig.add_annotation(dict(font=dict(color="steelblue", size=11), x=0.30, y=0.25, showarrow=False, text=f'<b>{dfa.iat[8,0]}</b>'))

        fig.add_annotation(dict(font=dict(color="black", size=10), x=0.40, y=1.16, xanchor='left', showarrow=False, text='<b>RECEITA<br>OPERACIONAL</b>'))
        fig.add_annotation(dict(font=dict(color="steelblue", size=10), x=0.45, y=1.06, showarrow=False, text=f'<b>{dfa.iat[9,0]}</b>'))

        fig.add_annotation(dict(font=dict(color="black", size=10), x=0.56, y=1.00, xanchor='left', showarrow=False, text='<b>DESPESAS</b>'))
        fig.add_annotation(dict(font=dict(color="indianred", size=10), x=0.595, y=0.95, showarrow=False, text=f'<b>{dfa.iat[16,0]}</b>'))

        fig.add_annotation(dict(font=dict(color="black", size=10), x=0.73, y=1.09, xanchor='left', showarrow=False, text='<b>Pessoal, encargos<br> e imagem</b>'))
        fig.add_annotation(dict(font=dict(color="indianred", size=10), x=0.81, y=0.98, showarrow=False, text=f'<b>{dfa.iat[10,0]}</b>'))

        fig.add_annotation(dict(font=dict(color="black", size=10), x=0.73, y=0.88, xanchor='left', showarrow=False, text='<b>Despesas com<br>jogos</b>'))
        fig.add_annotation(dict(font=dict(color="indianred", size=10), x=0.79, y=0.78, showarrow=False, text=f'<b>{dfa.iat[12,0]}</b>'))

        fig.add_annotation(dict(font=dict(color="black", size=10), x=0.73, y=0.66, xanchor='left', showarrow=False, text='<b>Despesas gerais<br>e administrativas</b>'))
        fig.add_annotation(dict(font=dict(color="indianred", size=10), x=0.80, y=0.58, showarrow=False, text=f'<b>{dfa.iat[13,0]}</b>'))

        fig.add_annotation(dict(font=dict(color="black", size=10), x=0.73, y=0.505, xanchor='left', showarrow=False, text='<b>Depreciação<br>amortização</b>'))
        fig.add_annotation(dict(font=dict(color="indianred", size=10), x=0.79, y=0.425, showarrow=False, text=f'<b>{dfa.iat[14,0]}</b>'))

        fig.add_annotation(dict(font=dict(color="black", size=10), x=0.73, y=0.35, xanchor='left', showarrow=False, text='<b>Outras despesas</b>'))
        fig.add_annotation(dict(font=dict(color="indianred", size=10), x=0.79, y=0.25, showarrow=False, text=f'<b>{dfa.iat[15,0]}</b>'))

        fig.add_annotation(dict(font=dict(color="black", size=10), x=0.50, y=1.39, xanchor='left', showarrow=False, text='<b>RESULTADO<br>OPERACIONAL</b>'))
        fig.add_annotation(dict(font=dict(color="limegreen", size=10), x=0.55, y=1.30, showarrow=False, text=f'<b>{dfa.iat[17,0]}</b>'))

        fig.add_annotation(dict(font=dict(color="black", size=10), x=0.77, y=1.34, xanchor='left', showarrow=False, text='<b>RESULTADO<br>FINANCEIRO</b>'))
        fig.add_annotation(dict(font=dict(color="indianred", size=10), x=0.82, y=1.25, showarrow=False, text=f'<b>{dfa.iat[18,0]}</b>'))

        fig.add_annotation(dict(font=dict(color="black", size=10), x=0.88, y=1.16, xanchor='left', showarrow=False, text='<b>RESULTADO</b>'))
        fig.add_annotation(dict(font=dict(color="black", size=10), x=0.93, y=1.11, showarrow=False, text=f'<b>{dfa.iat[19,0]}</b>'))

        st.plotly_chart(fig)

#############################################################################################################################################
#############################################################################################################################################
#############################################################################################################################################
#############################################################################################################################################

        #Plotar Gráfico Alternativo
        fontsize=28
        # Player Comparison Data
        markdown_1 = f"<div style='text-align:center;  color: blue; font-weight: bold; font-size:{fontsize}px'>{clube:}</div>"
        st.markdown("<h4 style='text-align: center;'>Comparativo com a Média da Liga</h4>", unsafe_allow_html=True)
        st.markdown(markdown_1, unsafe_allow_html=True)
        dfb = df1.iloc[np.r_[0:2, 58, 7, 9, 22, 26], np.r_[0:21]]
        dfb_transposed = dfb.T
        # Set the first row as the new header
        dfb_transposed.columns = dfb_transposed.iloc[0]
        # Drop the first row
        dfb_transposed = dfb_transposed.iloc[1:]
        # Rename the first column to 'clubs'
        dfb_transposed.index.name = 'Clubes'
        dfb = dfb_transposed
        # Renaming Columns
        dfb = dfb.rename(columns={"Receita c/ Publicidade e patrocínio": "Publicidade/patrocínio",
                                  "Receita c/ Match-Day": "Match-Day",
                                  "Receita c/ Sócio-torcedor": "Sócio-Torcedor",
                                  "Receita c/ Negociação de atletas": "Venda de jogadores",
                                  "Receita c/ Transmissão + Premiações": "Transmissão/Premiações",
                                  "RECEITA RECORRENTE": "Receita Recorrente" 
                                  })

        # Preparing the Graph
        params = list(dfb.columns)
        params = params[0:]

        #Preparing Data
        ranges = []
        a_values = []
        b_values = []

        for x in params:
            a = min(dfb[params][x])
            a = a
            b = max(dfb[params][x])
            b = b
            ranges.append((a, b))

        for x in range(len(dfb.index)):
            if dfb.index[x] == clube:
                a_values = dfb.iloc[x].values.tolist()
            if dfb.index[x] == 'Média da Liga':
                b_values = dfb.iloc[x].values.tolist()
                                    
        a_values = a_values[0:]
        b_values = b_values[0:]

        # Rounding values to no decimal places
        a_values = [round(value) for value in a_values]
        b_values = [round(value) for value in b_values]

        values = [a_values, b_values]

        #Plotting Data
        title = dict(
            title_name = clube,
            title_color = '#B6282F',
            subtitle_name = "(R$ milhões)",
            subtitle_color = '#B6282F',
            title_name_2 = 'Média da Liga',
            title_color_2 = '#344D94',
            subtitle_name_2 = "(R$ milhões)",
            subtitle_color_2 = '#344D94',
            title_fontsize = 18,
        ) 

        ## instantiate object
        radar = Radar()

        ## instantiate object -- changing fontsize
        radar=Radar(fontfamily='Cursive', range_fontsize=14)
        radar=Radar(fontfamily='Cursive', label_fontsize=14)

        fig,ax = radar.plot_radar(ranges=ranges,params=params,values=values,radar_color=['#B6282F', '#344D94'], dpi=600, alphas=[.6,.5], title=title, compare=True)
        #fig,ax = radar.plot_radar(ranges=ranges,params=params,values=values,radar_color=['#7eb6e0', '#f77b72'], dpi=600, alphas=[.8,.6], title=title, compare=True)
        st.pyplot(fig)

###############################################################################################################################################
###############################################################################################################################################
###############################################################################################################################################
###############################################################################################################################################


        #Plotar Gráfico Alternativo - 2024 x 2023
        fontsize=28
        # Player Comparison Data
        markdown_1 = f"<div style='text-align:center;  color: blue; font-weight: bold; font-size:{fontsize}px'>{clube:}</div>"
        st.markdown("<h4 style='text-align: center;'>Comparativo 2024 vs 2023</h4>", unsafe_allow_html=True)
        st.markdown(markdown_1, unsafe_allow_html=True)
        dfb = df1.iloc[np.r_[0:2, 58, 7, 9, 22, 26], np.r_[0, 11]]
        dfb = dfb.rename(columns={"Fluminense": "Fluminense - 2024"})
        dfb_2023 = df1_2023.iloc[np.r_[0:2, 58, 7, 9, 22, 26], np.r_[0, 11]]
        dfb_2023 = dfb_2023.rename(columns={"Fluminense": "Fluminense - 2023"})
        # Fazendo o merge com base na coluna "Clubes"
        dfb = pd.merge(dfb, dfb_2023, on="Clubes", how="inner")  # você pode trocar o "how" se quiser
        
        dfb_transposed = dfb.T
        # Set the first row as the new header
        dfb_transposed.columns = dfb_transposed.iloc[0]
        # Drop the first row
        dfb_transposed = dfb_transposed.iloc[1:]
        # Rename the first column to 'clubs'
        dfb_transposed.index.name = 'Clubes'
        dfb = dfb_transposed
        # Renaming Columns
        dfb = dfb.rename(columns={"Receita c/ Publicidade e patrocínio": "Publicidade/patrocínio",
                                  "Receita c/ Match-Day": "Match-Day",
                                  "Receita c/ Sócio-torcedor": "Sócio-Torcedor",
                                  "Receita c/ Negociação de atletas": "Venda de jogadores",
                                  "Receita c/ Direitos de transmissão": "Direitos de transmissão" 
                                  })

        teste_2024 = pd.read_csv("índices.csv")
        teste_2024 = teste_2024.iloc[np.r_[0:2, 58, 7, 9, 22, 26], np.r_[0: 20]]
        teste_2024_transposed = teste_2024.T
        # Set the first row as the new header
        teste_2024_transposed.columns = teste_2024_transposed.iloc[0]
        # Drop the first row
        teste_2024_transposed = teste_2024_transposed.iloc[1:]
        # Rename the first column to 'clubs'
        teste_2024_transposed.index.name = 'Clubes'
        teste_2024 = teste_2024_transposed
        # Renaming Columns
        teste_2024 = teste_2024.rename(columns={"Receita c/ Publicidade e patrocínio": "Publicidade/patrocínio",
                                  "Receita c/ Match-Day": "Match-Day",
                                  "Receita c/ Sócio-torcedor": "Sócio-Torcedor",
                                  "Receita c/ Negociação de atletas": "Venda de jogadores",
                                  "Receita c/ Direitos de transmissão": "Direitos de transmissão" 
                                  })

        teste_2023 = pd.read_csv("índices_2023.csv")
        teste_2023 = teste_2023.iloc[np.r_[0:2, 58, 7, 9, 22, 26], np.r_[0: 20]]
        teste_2023_transposed = teste_2023.T
        # Set the first row as the new header
        teste_2023_transposed.columns = teste_2023_transposed.iloc[0]
        # Drop the first row
        teste_2023_transposed = teste_2023_transposed.iloc[1:]
        # Rename the first column to 'clubs'
        teste_2023_transposed.index.name = 'Clubes'
        teste_2023 = teste_2023_transposed
        # Renaming Columns
        teste_2023 = teste_2023.rename(columns={"Receita c/ Publicidade e patrocínio": "Publicidade/patrocínio",
                                  "Receita c/ Match-Day": "Match-Day",
                                  "Receita c/ Sócio-torcedor": "Sócio-Torcedor",
                                  "Receita c/ Negociação de atletas": "Venda de jogadores",
                                  "Receita c/ Direitos de transmissão": "Direitos de transmissão" 
                                  })
    
        # Preparing the Graph
        params = list(dfb.columns)
        params = params[0:]
        #Preparing Data
        ranges = []
        a_values = []
        b_values = []

        for x in range(len(params)):
            # Combine as duas séries
            combined_values = pd.concat([teste_2023[params].iloc[:, x], teste_2024[params].iloc[:, x]])
            
            # Encontre o mínimo e o máximo
            a = combined_values.min()
            b = combined_values.max()
        
            ranges.append((a, b))

        for x in range(len(dfb.index)):
            if dfb.index[x] == "Fluminense - 2024":
                a_values = dfb.iloc[x].values.tolist()
            if dfb.index[x] == "Fluminense - 2023":
                b_values = dfb.iloc[x].values.tolist()
                                    
        a_values = a_values[0:]
        b_values = b_values[0:]

        # Rounding values to no decimal places
        a_values = [round(value) for value in a_values]
        b_values = [round(value) for value in b_values]

        values = [a_values, b_values]

        #Plotting Data
        title = dict(
            title_name = "Receitas e Despesas/2024",
            title_color = '#B6282F',
            subtitle_name = "(R$ milhões)",
            subtitle_color = '#B6282F',
            title_name_2 = 'Receitas e Despesas/2023',
            title_color_2 = '#344D94',
            subtitle_name_2 = "(R$ milhões)",
            subtitle_color_2 = '#344D94',
            title_fontsize = 18,
        ) 

        ## instantiate object
        radar = Radar()

        ## instantiate object -- changing fontsize
        radar=Radar(fontfamily='Cursive', range_fontsize=14)
        radar=Radar(fontfamily='Cursive', label_fontsize=14)

        fig,ax = radar.plot_radar(ranges=ranges,params=params,values=values,radar_color=['#B6282F', '#344D94'], dpi=600, alphas=[.6,.5], title=title, compare=True)
        st.pyplot(fig)

#############################################################################################################################################
#############################################################################################################################################
#############################################################################################################################################
#############################################################################################################################################


#############################################################################################################################################
#############################################################################################################################################
#############################################################################################################################################
#############################################################################################################################################

    elif clube == "Vasco":
        
        def display_club_image(clube):
            try:
                # Get the image URL for the selected club
                club_image_url = club_image_paths.get(clube)
                
                if club_image_url:
                    # Center-align and display the image
                    st.markdown(
                        f"""
                        <div style="display: flex; justify-content: center;">
                            <img src="{club_image_url}" width="150">
                        </div>
                        """,
                        unsafe_allow_html=True
                    )
                else:
                    st.warning(f"Imagem não encontrada para o clube: {clube}")
            except Exception as e:
                st.error(f"Erro ao exibir a imagem: {e}")

        display_club_image(clube)
        
#############################################################################################################################################
#############################################################################################################################################
#############################################################################################################################################
#############################################################################################################################################

        # Custom CSS for better formatting
        st.markdown("""
        <style>
            .main {
                padding: 2rem;
            }
            .stAlert {
                background-color: #f8f9fa;
                padding: 1rem;
                border-radius: 0.5rem;
                border-left: 5px solid #ff4b4b;
            }
            .info-box {
                background-color: #e6f3ff;
                padding: 1rem;
                border-radius: 0.5rem;
                border-left: 5px solid #4B8BF5;
                margin-bottom: 1rem;
            }
            h1, h2, h3 {
                color: #1E3A8A;
            }
            .katex {
                font-size: 1.1em;
            }
        </style>
        """, unsafe_allow_html=True)

        st.markdown("""
        <div class="info-box">
        <h4>Resumo:</h4>
        <p>O Vasco disponibilizou DFs provisórias, não auditadas. </p>
        </div>
        """, unsafe_allow_html=True)

#############################################################################################################################################
#############################################################################################################################################
#############################################################################################################################################
#############################################################################################################################################

        st.markdown("<h4 style='text-align: center;  color: black;'>Demonstração de Resultado</b></h4>", unsafe_allow_html=True)
        st.markdown("<h5 style='text-align: center;  color: black;'>(em R$ milhões)<br></b></h5>", unsafe_allow_html=True)
        st.markdown("---")

        # Define labels, sources and targets (same as original)
        label = ["Direitos de transmissão", "Publicidade e patrocínio", "Arrecadação de jogos",
                 "Sócio-Torcedor", "Premiações", "Licenciamento da marca", 
                 "RECEITA RECORRENTE", "Negociação de atletas", "Outras receitas", 
                 "RECEITA OPERACIONAL", "Pessoal e encargos", "Direitos de Imagem", 
                 "Despesas com jogos", "Despesas gerais e administrativas", "Depreciação amortização", 
                 "Outras despesas", "DESPESAS", "RESULTADO OPERACIONAL", 
                 "Resultado financeiro", "RESULTADO"]

        source =               [0, 1, 2, 3, 4, 6, 7, 9,  9, 16, 16, 16, 16, 16, 18, 17] #18 sources
        target =               [6, 6, 6, 6, 6, 9, 9, 8, 16, 10, 13, 14, 15, 17, 19, 19] #18 targets
        value = df.iloc[np.r_[  0, 1, 2, 3, 4, 6, 7, 8,  9, 10, 13, 14, 15, 17, 18, 17], np.r_[19]].astype(int) #18 values
        dfa = df.iloc[:, np.r_[19]].astype(int)
        link = dict(source=source, target=target, value=value, color=color_link)
        node = dict(label = label, pad=35, thickness=20)
        data = go.Sankey(link=link, node=node)

        # Using positioning more similar to your original layout
        # These coordinates preserve the general structure but with slight improvements
        x = [0.15, 0.15, 0.15, 0.15, 0.15,              # Revenue sources (left)
            0.30,                                   # Recurring Revenue (left-center)
            0.375, 0.375,                           # Additional revenues (left-center)
            0.425,                                   # Net Operating Revenue (center)
            0.75, 0.75, 0.75, 0.75,                       # Expense categories (right)
            0.55,                                   # Total Expenses (right-center)
            0.65,                                   # Resultado Operacional
            0.83,                                   # Resultado financeiro
            0.92]                                   # Results (far right)
            
        y = [-0.22, 0.0, 0.22, 0.44, 0.66,                 # Revenue sources (left)
            -0.05,                                  # Recurring Revenue (left-center)
            0.22, 0.40,                             # Additional revenues (left-center)
            0.00,                                   # Net Operating Revenue (center)
            +0.15, 0.30, 0.45, 0.60,                      # Expense categories (right)
            0.20,                                   # Total Expenses (right-center)
            -0.20,                                  # Resultado Operacional
            -0.16,                                  # Resultado financeiro
            -0.02]                                   # Results (far right)

        x = [.001 if v==0 else .999 if v==1 else v for v in x]
        y = [.001 if v==0 else .999 if v==1 else v for v in y]

        # Colors that match the original diagram more closely
        # Light blue for revenue flows, green for positive results, red for expenses
        color_for_nodes = [
            'steelblue', 'steelblue', 'steelblue', 'steelblue', 'steelblue',                           # Revenue sources
            'steelblue',                                                                  # Recurring Revenue
            'steelblue', 'steelblue',                                                     # Additional revenues
            'indianred',                                                                  # Net Operating Revenue
            'steelblue', 
            'indianred', 'indianred', 'indianred', 'indianred', 'indianred',            # Expense categories
            'indianred',                                                                  # Total Expenses
            'indianred', 
            'indianred', 
            'indianred', 'indianred',
            'steelblue'
            # Results
        ]
        
        # Flow colors that match the original diagram more closely
        color_for_links = [
            'LightSkyBlue', 'LightSkyBlue', 'LightSkyBlue', 'LightSkyBlue', 'LightSkyBlue',                # Revenue source flows
            'LightSkyBlue', 'LightSkyBlue', 'LightCoral',                                 # Additional revenue flows
            'LightSkyBlue',                                                                         # Flow to operating result
            'LightCoral',                                                                   # Flow to expenses
            'LightCoral', 'LightCoral', 'LightCoral', 'LightCoral', 'LightCoral',           # Expense category flows
            'LightCoral', 
            'LightCoral',
            'LightCoral'
            # Result flows
        ]

        fig = go.Figure(data=[go.Sankey(
                # The following line hides our labels. They still show
                # when you hover the mouse over an object
                textfont=dict(color="rgba(0,0,0,0)", size=1),
                node = dict(
                    pad = 35,
                    line = dict(color = "white", width = 1),
                    label = label,
                    x = x,
                    y = y
                ),
                link = dict(
                    source = source,
                    target = target,
                    value = value
                    ))])

        # Update our chart
        fig.update_layout(
            hovermode='x',
        )
        # Apply node and link colour choices
        fig.update_traces(node_color = color_for_nodes,
                        link_color = color_for_links)
            

        fig.add_annotation(dict(font=dict(color="black", size=11), x=0.02, y=1.31, xanchor='left', showarrow=False, text='<b>Direitos de<br>transmissão</b>'))
        fig.add_annotation(dict(font=dict(color="steelblue", size=11), x=0.05, y=1.20, showarrow=False, text=f'<b>{dfa.iat[0,0]}</b>'))

        fig.add_annotation(dict(font=dict(color="black", size=11), x=0.02, y=1.08, xanchor='left', showarrow=False, text='<b>Publicidade e<br>patrocínio</b>'))
        fig.add_annotation(dict(font=dict(color="steelblue", size=11), x=0.05, y=0.97, showarrow=False, text=f'<b>{dfa.iat[1,0]}</b>'))

        fig.add_annotation(dict(font=dict(color="black", size=11), x=0.02, y=0.87, xanchor='left', showarrow=False, text='<b>Arrecadação<br>de jogos</b>'))
        fig.add_annotation(dict(font=dict(color="steelblue", size=11), x=0.05, y=0.76, showarrow=False, text=f'<b>{dfa.iat[2,0]}</b>'))

        fig.add_annotation(dict(font=dict(color="black", size=11), x=0.02, y=0.60, xanchor='left', showarrow=False, text='<b>Sócio-torcedor</b>'))
        fig.add_annotation(dict(font=dict(color="steelblue", size=11), x=0.05, y=0.54, showarrow=False, text=f'<b>{dfa.iat[3,0]}</b>'))

        fig.add_annotation(dict(font=dict(color="black", size=11), x=0.02, y=0.37, xanchor='left', showarrow=False, text='<b>Premiações</b>'))
        fig.add_annotation(dict(font=dict(color="steelblue", size=11), x=0.05, y=0.28, showarrow=False, text=f'<b>{dfa.iat[4,0]}</b>'))

        fig.add_annotation(dict(font=dict(color="black", size=10), x=0.255, y=1.30, xanchor='left', showarrow=False, text='<b>RECEITA<br>RECORRENTE</b>'))
        fig.add_annotation(dict(font=dict(color="steelblue", size=10), x=0.285, y=1.21, showarrow=False, text=f'<b>{dfa.iat[6,0]}</b>'))
            
        fig.add_annotation(dict(font=dict(color="black", size=11), x=0.27, y=0.86, xanchor='left', showarrow=False, text='<b>Negociação<br>de atletas</b>'))
        fig.add_annotation(dict(font=dict(color="steelblue", size=11), x=0.30, y=0.74, showarrow=False, text=f'<b>{dfa.iat[7,0]}</b>'))

        fig.add_annotation(dict(font=dict(color="black", size=11), x=0.22, y=0.60, xanchor='left', showarrow=False, text='<b>Outras<br>receitas e despesas</b>'))
        fig.add_annotation(dict(font=dict(color="indianred", size=11), x=0.28, y=0.52, showarrow=False, text=f'<b>{dfa.iat[8,0]}</b>'))

        fig.add_annotation(dict(font=dict(color="black", size=10), x=0.38   , y=1.30, xanchor='left', showarrow=False, text='<b>RECEITA<br>OPERACIONAL</b>'))
        fig.add_annotation(dict(font=dict(color="steelblue", size=10), x=0.425, y=1.20, showarrow=False, text=f'<b>{dfa.iat[9,0]}</b>'))

        fig.add_annotation(dict(font=dict(color="black", size=10), x=0.52, y=1.10, xanchor='left', showarrow=False, text='<b>DESPESAS</b>'))
        fig.add_annotation(dict(font=dict(color="indianred", size=10), x=0.55, y=1.04, showarrow=False, text=f'<b>{dfa.iat[16,0]}</b>'))

        fig.add_annotation(dict(font=dict(color="black", size=10), x=0.78, y=0.95, xanchor='left', showarrow=False, text='<b>Pessoal, encargos<br>e imagem</b>'))
        fig.add_annotation(dict(font=dict(color="indianred", size=10), x=0.86, y=0.84, showarrow=False, text=f'<b>{dfa.iat[10,0]}</b>'))

        fig.add_annotation(dict(font=dict(color="black", size=10), x=0.78, y=0.76, xanchor='left', showarrow=False, text='<b>Despesas gerais<br>e administrativas</b>'))
        fig.add_annotation(dict(font=dict(color="indianred", size=10), x=0.85, y=0.64, showarrow=False, text=f'<b>{dfa.iat[13,0]}</b>'))

        fig.add_annotation(dict(font=dict(color="black", size=10), x=0.79, y=0.57, xanchor='left', showarrow=False, text='<b>Depreciação<br>amortização</b>'))
        fig.add_annotation(dict(font=dict(color="indianred", size=10), x=0.85, y=0.49, showarrow=False, text=f'<b>{dfa.iat[14,0]}</b>'))

        fig.add_annotation(dict(font=dict(color="black", size=10), x=0.79, y=0.38, xanchor='left', showarrow=False, text='<b>Outras despesas</b>'))
        fig.add_annotation(dict(font=dict(color="indianred", size=10), x=0.85, y=0.30, showarrow=False, text=f'<b>{dfa.iat[15,0]}</b>'))

        fig.add_annotation(dict(font=dict(color="black", size=10), x=0.60, y=1.36, xanchor='left', showarrow=False, text='<b>RESULTADO<br>OPERACIONAL</b>'))
        fig.add_annotation(dict(font=dict(color="indianred", size=10), x=0.65, y=1.27, showarrow=False, text=f'<b>{dfa.iat[17,0]}</b>'))

        fig.add_annotation(dict(font=dict(color="black", size=10), x=0.79, y=1.34, xanchor='left', showarrow=False, text='<b>RESULTADO<br>FINANCEIRO</b>'))
        fig.add_annotation(dict(font=dict(color="indianred", size=10), x=0.84, y=1.25, showarrow=False, text=f'<b>{dfa.iat[18,0]}</b>'))

        fig.add_annotation(dict(font=dict(color="black", size=10), x=0.88, y=1.16, xanchor='left', showarrow=False, text='<b>RESULTADO</b>'))
        fig.add_annotation(dict(font=dict(color="indianred", size=10), x=0.93, y=1.11, showarrow=False, text=f'<b>{dfa.iat[19,0]}</b>'))

        st.plotly_chart(fig)

#############################################################################################################################################
#############################################################################################################################################
#############################################################################################################################################
#############################################################################################################################################

        #Plotar Gráfico Alternativo
        fontsize=28
        # Player Comparison Data
        markdown_1 = f"<div style='text-align:center;  color: blue; font-weight: bold; font-size:{fontsize}px'>{clube:}</div>"
        st.markdown("<h4 style='text-align: center;'>Comparativo com a Média da Liga</h4>", unsafe_allow_html=True)
        st.markdown(markdown_1, unsafe_allow_html=True)
        dfb = df1.iloc[np.r_[47, 1:5, 7, 9, 26], np.r_[0:21]]
        dfb_transposed = dfb.T
        # Set the first row as the new header
        dfb_transposed.columns = dfb_transposed.iloc[0]
        # Drop the first row
        dfb_transposed = dfb_transposed.iloc[1:]
        # Rename the first column to 'clubs'
        dfb_transposed.index.name = 'Clubes'
        dfb = dfb_transposed
        # Renaming Columns
        dfb = dfb.rename(columns={"Receita c/ Publicidade e patrocínio": "Publicidade/patrocínio",
                                  "Receita c/ Match-Day": "Match-Day",
                                  "Receita c/ Sócio-torcedor": "Sócio-Torcedor",
                                  "Receita c/ Negociação de atletas": "Venda de jogadores",
                                  "Receita c/ Transmissão + Premiações": "Transmissão/Premiações",
                                  "RECEITA RECORRENTE": "Receita Recorrente" 
                                  })

        # Preparing the Graph
        params = list(dfb.columns)
        params = params[0:]

        #Preparing Data
        ranges = []
        a_values = []
        b_values = []

        for x in params:
            a = min(dfb[params][x])
            a = a
            b = max(dfb[params][x])
            b = b
            ranges.append((a, b))

        for x in range(len(dfb.index)):
            if dfb.index[x] == clube:
                a_values = dfb.iloc[x].values.tolist()
            if dfb.index[x] == 'Média da Liga':
                b_values = dfb.iloc[x].values.tolist()
                                    
        a_values = a_values[0:]
        b_values = b_values[0:]

        # Rounding values to no decimal places
        a_values = [round(value) for value in a_values]
        b_values = [round(value) for value in b_values]

        values = [a_values, b_values]

        #Plotting Data
        title = dict(
            title_name = clube,
            title_color = '#B6282F',
            subtitle_name = "(R$ milhões)",
            subtitle_color = '#B6282F',
            title_name_2 = 'Média da Liga',
            title_color_2 = '#344D94',
            subtitle_name_2 = "(R$ milhões)",
            subtitle_color_2 = '#344D94',
            title_fontsize = 18,
        ) 

        ## instantiate object
        radar = Radar()

        ## instantiate object -- changing fontsize
        radar=Radar(fontfamily='Cursive', range_fontsize=14)
        radar=Radar(fontfamily='Cursive', label_fontsize=14)

        fig,ax = radar.plot_radar(ranges=ranges,params=params,values=values,radar_color=['#B6282F', '#344D94'], dpi=600, alphas=[.6,.5], title=title, compare=True)
        #fig,ax = radar.plot_radar(ranges=ranges,params=params,values=values,radar_color=['#7eb6e0', '#f77b72'], dpi=600, alphas=[.8,.6], title=title, compare=True)
        st.pyplot(fig)


#############################################################################################################################################
#############################################################################################################################################
#############################################################################################################################################
#############################################################################################################################################


        #Plotar Gráfico Alternativo - 2024 x 2023
        fontsize=28
        # Player Comparison Data
        markdown_1 = f"<div style='text-align:center;  color: blue; font-weight: bold; font-size:{fontsize}px'>{clube:}</div>"
        st.markdown("<h4 style='text-align: center;'>Comparativo 2024 vs 2023</h4>", unsafe_allow_html=True)
        st.markdown(markdown_1, unsafe_allow_html=True)
        dfb = df1.iloc[np.r_[47, 1:5, 7, 9, 26], np.r_[0, 19]]
        dfb = dfb.rename(columns={"Vasco": "Vasco - 2024"})
        dfb_2023 = df1_2023.iloc[np.r_[47, 1:5, 7, 9, 26], np.r_[0, 19]]
        dfb_2023 = dfb_2023.rename(columns={"Vasco": "Vasco - 2023"})
        # Fazendo o merge com base na coluna "Clubes"
        dfb = pd.merge(dfb, dfb_2023, on="Clubes", how="inner")  # você pode trocar o "how" se quiser
        
        dfb_transposed = dfb.T
        # Set the first row as the new header
        dfb_transposed.columns = dfb_transposed.iloc[0]
        # Drop the first row
        dfb_transposed = dfb_transposed.iloc[1:]
        # Rename the first column to 'clubs'
        dfb_transposed.index.name = 'Clubes'
        dfb = dfb_transposed
        # Renaming Columns
        dfb = dfb.rename(columns={"Receita c/ Publicidade e patrocínio": "Publicidade/patrocínio",
                                  "Receita c/ Match-Day": "Match-Day",
                                  "Receita c/ Sócio-torcedor": "Sócio-Torcedor",
                                  "Receita c/ Negociação de atletas": "Venda de jogadores",
                                  "Receita c/ Direitos de transmissão": "Direitos de transmissão" 
                                  })

        teste_2024 = pd.read_csv("índices.csv")
        teste_2024 = teste_2024.iloc[np.r_[47, 1:5, 7, 9, 26], np.r_[0: 20]]
        teste_2024_transposed = teste_2024.T
        # Set the first row as the new header
        teste_2024_transposed.columns = teste_2024_transposed.iloc[0]
        # Drop the first row
        teste_2024_transposed = teste_2024_transposed.iloc[1:]
        # Rename the first column to 'clubs'
        teste_2024_transposed.index.name = 'Clubes'
        teste_2024 = teste_2024_transposed
        # Renaming Columns
        teste_2024 = teste_2024.rename(columns={"Receita c/ Publicidade e patrocínio": "Publicidade/patrocínio",
                                  "Receita c/ Match-Day": "Match-Day",
                                  "Receita c/ Sócio-torcedor": "Sócio-Torcedor",
                                  "Receita c/ Negociação de atletas": "Venda de jogadores",
                                  "Receita c/ Direitos de transmissão": "Direitos de transmissão" 
                                  })

        teste_2023 = pd.read_csv("índices_2023.csv")
        teste_2023 = teste_2023.iloc[np.r_[47, 1:5, 7, 9, 26], np.r_[0: 20]]
        teste_2023_transposed = teste_2023.T
        # Set the first row as the new header
        teste_2023_transposed.columns = teste_2023_transposed.iloc[0]
        # Drop the first row
        teste_2023_transposed = teste_2023_transposed.iloc[1:]
        # Rename the first column to 'clubs'
        teste_2023_transposed.index.name = 'Clubes'
        teste_2023 = teste_2023_transposed
        # Renaming Columns
        teste_2023 = teste_2023.rename(columns={"Receita c/ Publicidade e patrocínio": "Publicidade/patrocínio",
                                  "Receita c/ Match-Day": "Match-Day",
                                  "Receita c/ Sócio-torcedor": "Sócio-Torcedor",
                                  "Receita c/ Negociação de atletas": "Venda de jogadores",
                                  "Receita c/ Direitos de transmissão": "Direitos de transmissão" 
                                  })
    
        # Preparing the Graph
        params = list(dfb.columns)
        params = params[0:]
        #Preparing Data
        ranges = []
        a_values = []
        b_values = []

        for x in range(len(params)):
            # Combine as duas séries
            combined_values = pd.concat([teste_2023[params].iloc[:, x], teste_2024[params].iloc[:, x]])
            
            # Encontre o mínimo e o máximo
            a = combined_values.min()
            b = combined_values.max()
        
            ranges.append((a, b))

        for x in range(len(dfb.index)):
            if dfb.index[x] == "Vasco - 2024":
                a_values = dfb.iloc[x].values.tolist()
            if dfb.index[x] == "Vasco - 2023":
                b_values = dfb.iloc[x].values.tolist()
                                    
        a_values = a_values[0:]
        b_values = b_values[0:]

        # Rounding values to no decimal places
        a_values = [round(value) for value in a_values]
        b_values = [round(value) for value in b_values]

        values = [a_values, b_values]

        #Plotting Data
        title = dict(
            title_name = "Receitas e Despesas/2024",
            title_color = '#B6282F',
            subtitle_name = "(R$ milhões)",
            subtitle_color = '#B6282F',
            title_name_2 = 'Receitas e Despesas/2023',
            title_color_2 = '#344D94',
            subtitle_name_2 = "(R$ milhões)",
            subtitle_color_2 = '#344D94',
            title_fontsize = 18,
        ) 

        ## instantiate object
        radar = Radar()

        ## instantiate object -- changing fontsize
        radar=Radar(fontfamily='Cursive', range_fontsize=14)
        radar=Radar(fontfamily='Cursive', label_fontsize=14)

        fig,ax = radar.plot_radar(ranges=ranges,params=params,values=values,radar_color=['#B6282F', '#344D94'], dpi=600, alphas=[.6,.5], title=title, compare=True)
        st.pyplot(fig)


#############################################################################################################################################
#############################################################################################################################################
#############################################################################################################################################
#############################################################################################################################################
#############################################################################################################################################
#############################################################################################################################################
#############################################################################################################################################
#############################################################################################################################################

    elif clube == "Atlético GO":
        
        def display_club_image(clube):
            try:
                # Get the image URL for the selected club
                club_image_url = club_image_paths.get(clube)
                
                if club_image_url:
                    # Center-align and display the image
                    st.markdown(
                        f"""
                        <div style="display: flex; justify-content: center;">
                            <img src="{club_image_url}" width="150">
                        </div>
                        """,
                        unsafe_allow_html=True
                    )
                else:
                    st.warning(f"Imagem não encontrada para o clube: {clube}")
            except Exception as e:
                st.error(f"Erro ao exibir a imagem: {e}")

        display_club_image(clube)
        
###############################################################################################################################################
###############################################################################################################################################
###############################################################################################################################################
###############################################################################################################################################

        # Custom CSS for better formatting
        st.markdown("""
        <style>
            .main {
                padding: 2rem;
            }
            .stAlert {
                background-color: #f8f9fa;
                padding: 1rem;
                border-radius: 0.5rem;
                border-left: 5px solid #ff4b4b;
            }
            .info-box {
                background-color: #e6f3ff;
                padding: 1rem;
                border-radius: 0.5rem;
                border-left: 5px solid #4B8BF5;
                margin-bottom: 1rem;
            }
            h1, h2, h3 {
                color: #1E3A8A;
            }
            .katex {
                font-size: 1.1em;
            }
        </style>
        """, unsafe_allow_html=True)

        st.markdown("""
        <div class="info-box">
        <h4>Resumo:</h4>
        <p>O Atlético Goianiense fechou 2024 com déficit de R$ 45,1 mi, revertendo o superávit do ano anterior, 
        devido à recompra de 10% das cotas da Liga Forte União (LFU) registrada como despesa extraordinária 
        (único clube que reconheceu essa reversão). Mesmo assim, a receita consolidada saltou para R$ 109,6 mi, 
        puxada por TV, bilheteria e novos patrocínios. O auditor emitiu abstenção de opinião por falhas na segregação 
        SAF/Associação e no tratamento contábil da recompra da LFU. </p>
        <p>Os números indicam necessidade contínua de disciplina de gastos e/ou novas fontes de receita, agravada pelo
        rebaixamento à Série B. </p>
        <p><b>Nota:</b> Utiliza apenas dados das demonstrações financeiras auditadas.</p>
        </div>
        """, unsafe_allow_html=True)

###############################################################################################################################################
###############################################################################################################################################
###############################################################################################################################################
###############################################################################################################################################



        st.markdown("<h4 style='text-align: center;  color: black;'>Demonstração de Resultado</b></h4>", unsafe_allow_html=True)
        st.markdown("<h5 style='text-align: center;  color: black;'>(em R$ milhões)<br></b></h5>", unsafe_allow_html=True)
        st.markdown("---")

        # Define labels, sources and targets (same as original)
        label = ["Direitos de transmissão", "Publicidade e patrocínio", "Arrecadação de jogos",
                 "Sócio-Torcedor", "Premiações", "Licenciamento da marca", 
                 "RECEITA RECORRENTE", "Negociação de atletas", "Outras receitas", 
                 "RECEITA OPERACIONAL", "Pessoal e encargos", "Direitos de Imagem", 
                 "Despesas com jogos", "Despesas gerais e administrativas", "Depreciação amortização", 
                 "Outras despesas", "DESPESAS", "RESULTADO OPERACIONAL", 
                 "Resultado financeiro", "RESULTADO"]

        source =               [0, 1, 2, 3, 6, 7, 8,  9, 16, 16, 16, 16, 16, 16, 17, 18] #18 sources
        target =               [6, 6, 6, 6, 9, 9, 9, 16, 10, 11, 13, 14, 15, 17, 19, 19] #18 targets
        value = df.iloc[np.r_[  0, 1, 2, 3, 6, 7, 8,  9, 10, 11, 13, 14, 15, 17, 17, 18], np.r_[1]].astype(int) #18 values
        dfa = df.iloc[:, np.r_[1]].astype(int)
        link = dict(source=source, target=target, value=value, color=color_link)
        node = dict(label = label, pad=35, thickness=20)
        data = go.Sankey(link=link, node=node)

        # Using positioning more similar to your original layout
        # These coordinates preserve the general structure but with slight improvements
        x = [0.15, 0.15, 0.15, 0.15,                # Revenue sources (left)
            0.30,                                   # Recurring Revenue (left-center)
            0.375, 0.375,                           # Additional revenues (left-center)
            0.45,                                   # Net Operating Revenue (center)
            0.70, 0.70, 0.70, 0.70, 0.70,           # Expense categories (right)
            0.60,                                   # Total Expenses (right-center)
            0.70,                                   # Resultado Operacional
            0.87,                                   # Resultado financeiro
            0.92]                                   # Results (far right)
            
        y = [-0.22, 0.0, 0.22, 0.44,                # Revenue sources (left)
            -0.05,                                  # Recurring Revenue (left-center)
            0.40, 0.22,                             # Additional revenues (left-center)
            0.10,                                   # Net Operating Revenue (center)
            0.20, 0.35, 0.50, 0.65, 0.80,          # Expense categories (right)
            0.35,                                   # Total Expenses (right-center)
            -0.16,                                   # Resultado Operacional
            0.00,                                   # Resultado financeiro
            -0.18]                                   # Results (far right)

        x = [.001 if v==0 else .999 if v==1 else v for v in x]
        y = [.001 if v==0 else .999 if v==1 else v for v in y]

        # Colors that match the original diagram more closely
        # Light blue for revenue flows, green for positive results, red for expenses
        color_for_nodes = [
            'steelblue', 'steelblue', 'steelblue', 'steelblue', 'steelblue',                           # Revenue sources
            'steelblue',                                                                  # Recurring Revenue
            'steelblue', 'steelblue',                                                     # Additional revenues
            'steelblue',                                                                  # Net Operating Revenue
            'steelblue',                                                                  # Net Operating Revenue
            'indianred', 'indianred',
            'indianred', 'indianred', 'indianred', 'indianred', 'indianred',             # Expense categories
            'indianred',                                                                  # Total Expenses
            'indianred', 
            'indianred', 
            'lime', 'lime',
            'steelblue'
            # Results
        ]
        
        # Flow colors that match the original diagram more closely
        color_for_links = [
            'LightSkyBlue', 'LightSkyBlue', 'LightSkyBlue', 'LightSkyBlue', 'LightSkyBlue',                 # Revenue source flows
            'LightSkyBlue', 
            'LightSkyBlue', 'LightSkyBlue',                                 # Additional revenue flows
            'LightCoral',                                                                         # Flow to operating result
            'LightCoral',                                                                   # Flow to expenses
            'LightCoral', 'LightCoral', 'LightCoral', 'LightCoral', 'LightCoral',           # Expense category flows
            'LightCoral', 
            'LimeGreen',
            'LimeGreen',
            'LimeGreen'
            # Result flows
        ]

        fig = go.Figure(data=[go.Sankey(
                # The following line hides our labels. They still show
                # when you hover the mouse over an object
                textfont=dict(color="rgba(0,0,0,0)", size=1),
                node = dict(
                    pad = 35,
                    line = dict(color = "white", width = 1),
                    label = label,
                    x = x,
                    y = y
                ),
                link = dict(
                    source = source,
                    target = target,
                    value = value
                    ))])

        # Update our chart
        fig.update_layout(
            hovermode='x',
        )
        # Apply node and link colour choices
        fig.update_traces(node_color = color_for_nodes,
                        link_color = color_for_links)
            

        fig.add_annotation(dict(font=dict(color="black", size=11), x=0.02, y=1.31, xanchor='left', showarrow=False, text='<b>Direitos de<br>transmissão</b>'))
        fig.add_annotation(dict(font=dict(color="steelblue", size=11), x=0.05, y=1.20, showarrow=False, text=f'<b>{dfa.iat[0,0]}</b>'))

        fig.add_annotation(dict(font=dict(color="black", size=11), x=0.02, y=1.08, xanchor='left', showarrow=False, text='<b>Publicidade e<br>patrocínio</b>'))
        fig.add_annotation(dict(font=dict(color="steelblue", size=11), x=0.05, y=0.97, showarrow=False, text=f'<b>{dfa.iat[1,0]}</b>'))

        fig.add_annotation(dict(font=dict(color="black", size=11), x=0.02, y=0.87, xanchor='left', showarrow=False, text='<b>Arrecadação<br>de jogos</b>'))
        fig.add_annotation(dict(font=dict(color="steelblue", size=11), x=0.05, y=0.76, showarrow=False, text=f'<b>{dfa.iat[2,0]}</b>'))

        fig.add_annotation(dict(font=dict(color="black", size=11), x=0.04, y=0.61, xanchor='left', showarrow=False, text='<b>Sócio<br>torcedor</b>'))
        fig.add_annotation(dict(font=dict(color="steelblue", size=11), x=0.07, y=0.53, showarrow=False, text=f'<b>{dfa.iat[3,0]}</b>'))
           
            
        fig.add_annotation(dict(font=dict(color="black", size=10), x=0.255, y=1.30, xanchor='left', showarrow=False, text='<b>RECEITA<br>RECORRENTE</b>'))
        fig.add_annotation(dict(font=dict(color="steelblue", size=10), x=0.285, y=1.21, showarrow=False, text=f'<b>{dfa.iat[6,0]}</b>'))
            
        fig.add_annotation(dict(font=dict(color="black", size=11), x=0.27, y=0.69, xanchor='left', showarrow=False, text='<b>Negociação<br>de atletas</b>'))
        fig.add_annotation(dict(font=dict(color="steelblue", size=11), x=0.30, y=0.56, showarrow=False, text=f'<b>{dfa.iat[7,0]}</b>'))

        fig.add_annotation(dict(font=dict(color="black", size=11), x=0.27, y=0.87, xanchor='left', showarrow=False, text='<b>Outras<br>receitas</b>'))
        fig.add_annotation(dict(font=dict(color="steelblue", size=11), x=0.29, y=0.76   , showarrow=False, text=f'<b>{dfa.iat[8,0]}</b>'))

        fig.add_annotation(dict(font=dict(color="black", size=10), x=0.40, y=1.17, xanchor='left', showarrow=False, text='<b>RECEITA<br>OPERACIONAL</b>'))
        fig.add_annotation(dict(font=dict(color="steelblue", size=10), x=0.45, y=1.07, showarrow=False, text=f'<b>{dfa.iat[9,0]}</b>'))

        fig.add_annotation(dict(font=dict(color="black", size=10), x=0.56, y=1.00, xanchor='left', showarrow=False, text='<b>DESPESAS</b>'))
        fig.add_annotation(dict(font=dict(color="indianred", size=10), x=0.595, y=0.94, showarrow=False, text=f'<b>{dfa.iat[16,0]}</b>'))

        fig.add_annotation(dict(font=dict(color="black", size=10), x=0.73, y=0.88, xanchor='left', showarrow=False, text='<b>Pessoal e<br>encargos</b>'))
        fig.add_annotation(dict(font=dict(color="indianred", size=10), x=0.78, y=0.78, showarrow=False, text=f'<b>{dfa.iat[10,0]}</b>'))

        fig.add_annotation(dict(font=dict(color="black", size=10), x=0.73, y=0.705, xanchor='left', showarrow=False, text='<b>Direitos de imagem</b>'))
        fig.add_annotation(dict(font=dict(color="indianred", size=10), x=0.80, y=0.67, showarrow=False, text=f'<b>{dfa.iat[11,0]}</b>'))

        fig.add_annotation(dict(font=dict(color="black", size=10), x=0.73, y=0.53, xanchor='left', showarrow=False, text='<b>Despesas gerais<br>e administrativas</b>'))
        fig.add_annotation(dict(font=dict(color="indianred", size=10), x=0.80, y=0.45, showarrow=False, text=f'<b>{dfa.iat[13,0]}</b>'))

        fig.add_annotation(dict(font=dict(color="black", size=10), x=0.73, y=0.35, xanchor='left', showarrow=False, text='<b>Depreciação e<br>Amortização</b>'))
        fig.add_annotation(dict(font=dict(color="indianred", size=10), x=0.78, y=0.25, showarrow=False, text=f'<b>{dfa.iat[14,0]}</b>'))

        fig.add_annotation(dict(font=dict(color="black", size=10), x=0.73, y=0.15, xanchor='left', showarrow=False, text='<b>Outras despesas/<br>Reversão LFU</b>'))
        fig.add_annotation(dict(font=dict(color="indianred", size=10), x=0.795, y=0.08, showarrow=False, text=f'<b>{dfa.iat[15,0]}</b>'))

        fig.add_annotation(dict(font=dict(color="black", size=10), x=0.65, y=1.37, xanchor='left', showarrow=False, text='<b>RESULTADO<br>OPERACIONAL</b>'))
        fig.add_annotation(dict(font=dict(color="indianred", size=10), x=0.70, y=1.27, showarrow=False, text=f'<b>{dfa.iat[17,0]}</b>'))

        fig.add_annotation(dict(font=dict(color="black", size=10), x=0.79, y=1.06, xanchor='left', showarrow=False, text='<b>RESULTADO<br>FINANCEIRO</b>'))
        fig.add_annotation(dict(font=dict(color="lime", size=10), x=0.84, y=0.97, showarrow=False, text=f'<b>{dfa.iat[18,0]}</b>'))

        fig.add_annotation(dict(font=dict(color="black", size=10), x=0.88, y=1.35, xanchor='left', showarrow=False, text='<b>RESULTADO</b>'))
        fig.add_annotation(dict(font=dict(color="indianred", size=10), x=0.93, y=1.29, showarrow=False, text=f'<b>{dfa.iat[19,0]}</b>'))

        st.plotly_chart(fig)

#############################################################################################################################################
#############################################################################################################################################

#############################################################################################################################################
#############################################################################################################################################

        #Plotar Gráfico Alternativo
        fontsize=28
        # Player Comparison Data
        markdown_1 = f"<div style='text-align:center;  color: red; font-weight: bold; font-size:{fontsize}px'>{clube:}</div>"
        st.markdown("<h4 style='text-align: center;'>Comparativo com a Média da Liga</h4>", unsafe_allow_html=True)
        st.markdown(markdown_1, unsafe_allow_html=True)
        dfb = df1.iloc[np.r_[0:2, 58, 7, 9, 22, 26], np.r_[0:21]]
        dfb_transposed = dfb.T
        # Set the first row as the new header
        dfb_transposed.columns = dfb_transposed.iloc[0]
        # Drop the first row
        dfb_transposed = dfb_transposed.iloc[1:]
        # Rename the first column to 'clubs'
        dfb_transposed.index.name = 'Clubes'
        dfb = dfb_transposed
        # Renaming Columns
        dfb = dfb.rename(columns={"Receita c/ Publicidade e patrocínio": "Publicidade/patrocínio",
                                  "Receita c/ Match-Day": "Match-Day",
                                  "Receita c/ Sócio-torcedor": "Sócio-Torcedor",
                                  "Receita c/ Negociação de atletas": "Venda de jogadores",
                                  "Receita c/ Transmissão + Premiações": "Transmissão/Premiações",
                                  "RECEITA RECORRENTE": "Receita Recorrente" 
                                  })

        # Preparing the Graph
        params = list(dfb.columns)
        params = params[0:]

        #Preparing Data
        ranges = []
        a_values = []
        b_values = []

        for x in params:
            a = min(dfb[params][x])
            a = a
            b = max(dfb[params][x])
            b = b
            ranges.append((a, b))

        for x in range(len(dfb.index)):
            if dfb.index[x] == clube:
                a_values = dfb.iloc[x].values.tolist()
            if dfb.index[x] == 'Média da Liga':
                b_values = dfb.iloc[x].values.tolist()
                                    
        a_values = a_values[0:]
        b_values = b_values[0:]

        # Rounding values to no decimal places
        a_values = [round(value) for value in a_values]
        b_values = [round(value) for value in b_values]

        values = [a_values, b_values]

        #Plotting Data
        title = dict(
            title_name = clube,
            title_color = '#B6282F',
            subtitle_name = "(R$ milhões)",
            subtitle_color = '#B6282F',
            title_name_2 = 'Média da Liga',
            title_color_2 = '#344D94',
            subtitle_name_2 = "(R$ milhões)",
            subtitle_color_2 = '#344D94',
            title_fontsize = 18,
        ) 

        ## instantiate object
        radar = Radar()

        ## instantiate object -- changing fontsize
        radar=Radar(fontfamily='Cursive', range_fontsize=14)
        radar=Radar(fontfamily='Cursive', label_fontsize=14)

        fig,ax = radar.plot_radar(ranges=ranges,params=params,values=values,radar_color=['#B6282F', '#344D94'], dpi=600, alphas=[.6,.5], title=title, compare=True)
        #fig,ax = radar.plot_radar(ranges=ranges,params=params,values=values,radar_color=['#7eb6e0', '#f77b72'], dpi=600, alphas=[.8,.6], title=title, compare=True)
        st.pyplot(fig)

#############################################################################################################################################
#############################################################################################################################################
#############################################################################################################################################
#############################################################################################################################################

    elif clube == "Criciúma":
        
        def display_club_image(clube):
            try:
                # Get the image URL for the selected club
                club_image_url = club_image_paths.get(clube)
                
                if club_image_url:
                    # Center-align and display the image
                    st.markdown(
                        f"""
                        <div style="display: flex; justify-content: center;">
                            <img src="{club_image_url}" width="150">
                        </div>
                        """,
                        unsafe_allow_html=True
                    )
                else:
                    st.warning(f"Imagem não encontrada para o clube: {clube}")
            except Exception as e:
                st.error(f"Erro ao exibir a imagem: {e}")

        display_club_image(clube)

###############################################################################################################################################
###############################################################################################################################################
###############################################################################################################################################
###############################################################################################################################################

        # Custom CSS for better formatting
        st.markdown("""
        <style>
            .main {
                padding: 2rem;
            }
            .stAlert {
                background-color: #f8f9fa;
                padding: 1rem;
                border-radius: 0.5rem;
                border-left: 5px solid #ff4b4b;
            }
            .info-box {
                background-color: #e6f3ff;
                padding: 1rem;
                border-radius: 0.5rem;
                border-left: 5px solid #4B8BF5;
                margin-bottom: 1rem;
            }
            h1, h2, h3 {
                color: #1E3A8A;
            }
            .katex {
                font-size: 1.1em;
            }
        </style>
        """, unsafe_allow_html=True)

        st.markdown("""
        <div class="info-box">
        <h4>Resumo:</h4>
        <p>Em 2024 o Criciúma registrou déficit de R$ 29,0 milhões (vs. superávit de R$ 57,2 mi em 2023) motivado pela baixa de R$ 31,1 mi do 
        contrato com a Liga Forte União (tendo reduzido a venda de direitos comerciais de 20% para 10%) e por forte escalada de gastos no futebol profissional. 
        Mesmo assim, o clube, rebaixado para a Série B, encerrou o ano com o caixa em R$ 20,0 mi. </p>
        <p><b>Nota:</b> Utiliza apenas dados das demonstrações financeiras auditadas.</p>
        </div>
        """, unsafe_allow_html=True)

###############################################################################################################################################
###############################################################################################################################################
###############################################################################################################################################
###############################################################################################################################################
        
        st.markdown("<h4 style='text-align: center;  color: black;'>Demonstração de Resultado</b></h4>", unsafe_allow_html=True)
        st.markdown("<h5 style='text-align: center;  color: black;'>(em R$ milhões)<br></b></h5>", unsafe_allow_html=True)
        st.markdown("---")

        # Define labels, sources and targets (same as original)
        label = ["Direitos de transmissão", "Publicidade e patrocínio", "Arrecadação de jogos", 
                "Sócio-torcedor", "Premiações", "Licenciamento da marca", 
                "RECEITA RECORRENTE", "Negociação de atletas", "Outras receitas", 
                "RECEITA OPERACIONAL", "Pessoal e encargos", "Direitos de imagem", 
                "Despesas com jogos", "Despesas gerais e administrativas", 
                "Depreciação amortização", "Outras despesas", 
                "DESPESAS", "RESULTADO OPERACIONAL", "Resultado financeiro", "RESULTADO"]


        source =              [0, 1, 2, 3, 5, 6, 7, 9,  9, 16, 16, 16, 16, 17, 18] #18 sources
        target =              [6, 6, 6, 6, 6, 9, 9, 8, 16, 10, 13, 15, 17, 19, 19] #18 targets
        value = df.iloc[np.r_[21, 1, 2, 3, 5, 6, 7, 8,  9, 10, 13, 15, 17, 19, 18], np.r_[14]].astype(int) #18 values
        dfa = df.iloc[:, np.r_[14]].astype(int)

        # Using positioning more similar to your original layout
        # These coordinates preserve the general structure but with slight improvements
        x = [0.15, 0.15, 0.15, 0.15, 0.15,          # Revenue sources (left)
            0.30,                                   # Recurring Revenue (left-center)
            0.375, 0.55,                           # Additional revenues (left-center)
            0.45,                                   # Net Operating Revenue (center)
            0.75, 0.75, 0.75,                       # Expense categories (right)
            0.60,                                   # Total Expenses (right-center)
            0.70,                                   # Resultado Operacional
            0.90,                                   # Resultado financeiro
            0.85]                                   # Results (far right)
            
        y = [-0.22, 0.0, 0.22, 0.44, 0.66,          # Revenue sources (left)
            +0.03,                                  # Recurring Revenue (left-center)
            0.35, -0.18,                             # Additional revenues (left-center)
            0.10,                                   # Net Operating Revenue (center)
            0.45, 0.65, 0.77,                       # Expense categories (right)
            0.35,                                   # Total Expenses (right-center)
            -0.00,                                  # Resultado Operacional
            -0.20,                                  # Resultado financeiro
            -0.10]                                   # Results (far right)

        # Colors that match the original diagram more closely
        # Light blue for revenue flows, green for positive results, red for expenses
        color_for_nodes = [
            'steelblue', 'steelblue', 'steelblue', 'steelblue', 'steelblue',              # Revenue sources
            'steelblue',                                                                  # Recurring Revenue
            'steelblue', 'steelblue',                                                     # Additional revenues
            'indianred', 'steelblue',                                                                 # Net Operating Revenue
            'indianred', 'indianred', 'indianred',                                        # Expense categories
            'indianred',                                                                  # Total Expenses
            'indianred', 'indianred', 
            'indianred', 'indianred', 
            'indianred','indianred'                                          # Results
        ]
        
        # Flow colors that match the original diagram more closely
        color_for_links = [
            'LightSkyBlue', 'LightSkyBlue', 'LightSkyBlue', 'LightSkyBlue', 'LightSkyBlue', # Revenue source flows
            'LightSkyBlue', 'LightSkyBlue', 'LightCoral',                                 # Additional revenue flows
            'LightCoral',                                                                         # Flow to operating result
            'LightCoral',                                                                   # Flow to expenses
            'LightCoral', 'LightCoral', 'LightCoral',                                       # Expense category flows
            'LightCoral', 
            'LightCoral'                                                             # Result flows
        ]

        link = dict(source=source, target=target, value=value, color=color_link)
        node = dict(label = label, pad=35, thickness=20)
        data = go.Sankey(link=link, node=node)

        # Set our X and Y co-ords 
        x = [.001 if v==0 else .999 if v==1 else v for v in x]
        y = [.001 if v==0 else .999 if v==1 else v for v in y]

        fig = go.Figure(data=[go.Sankey(
                # The following line hides our labels. They still show
                # when you hover the mouse over an object
                textfont=dict(color="rgba(0,0,0,0)", size=1),
                node = dict(
                    pad = 35,
                    line = dict(color = "white", width = 1),
                    label = label,
                    x = x,
                    y = y
                ),
                link = dict(
                    source = source,
                    target = target,
                    value = value
                    ))])

        # Update our chart
        fig.update_layout(
            hovermode='x',
        )
        # Apply node and link colour choices
        fig.update_traces(node_color = color_for_nodes,
                        link_color = color_for_links)
            
        fig.add_annotation(dict(font=dict(color="black", size=11), x=0.02, y=1.31, xanchor='left', showarrow=False, text='<b>Direitos de<br>transmissão</b>'))
        fig.add_annotation(dict(font=dict(color="steelblue", size=11), x=0.05, y=1.20, showarrow=False, text=f'<b>{dfa.iat[0,0]}</b>'))

        fig.add_annotation(dict(font=dict(color="black", size=11), x=0.02, y=1.08, xanchor='left', showarrow=False, text='<b>Publicidade e<br>patrocínio</b>'))
        fig.add_annotation(dict(font=dict(color="steelblue", size=11), x=0.05, y=0.97, showarrow=False, text=f'<b>{dfa.iat[1,0]}</b>'))

        fig.add_annotation(dict(font=dict(color="black", size=11), x=0.02, y=0.87, xanchor='left', showarrow=False, text='<b>Arrecadação<br>de jogos</b>'))
        fig.add_annotation(dict(font=dict(color="steelblue", size=11), x=0.05, y=0.76, showarrow=False, text=f'<b>{dfa.iat[2,0]}</b>'))

        fig.add_annotation(dict(font=dict(color="black", size=11), x=0.02, y=0.60, xanchor='left', showarrow=False, text='<b>Sócio-torcedor</b>'))
        fig.add_annotation(dict(font=dict(color="steelblue", size=11), x=0.05, y=0.54, showarrow=False, text=f'<b>{dfa.iat[3,0]}</b>'))

        fig.add_annotation(dict(font=dict(color="black", size=11), x=0.02, y=0.37, xanchor='left', showarrow=False, text='<b>Licenciamento<br>da marca</b>'))
        fig.add_annotation(dict(font=dict(color="steelblue", size=11), x=0.06, y=0.28, showarrow=False, text=f'<b>{dfa.iat[5,0]}</b>'))
            
        fig.add_annotation(dict(font=dict(color="black", size=10), x=0.255, y=1.28, xanchor='left', showarrow=False, text='<b>RECEITA<br>RECORRENTE</b>'))
        fig.add_annotation(dict(font=dict(color="steelblue", size=10), x=0.29, y=1.19, showarrow=False, text=f'<b>{dfa.iat[6,0]}</b>'))
            
        fig.add_annotation(dict(font=dict(color="black", size=11), x=0.27, y=0.76, xanchor='left', showarrow=False, text='<b>Negociação<br>de atletas</b>'))
        fig.add_annotation(dict(font=dict(color="steelblue", size=11), x=0.30, y=0.62, showarrow=False, text=f'<b>{dfa.iat[7,0]}</b>'))

        fig.add_annotation(dict(font=dict(color="black", size=11), x=0.51, y=1.39, xanchor='left', showarrow=False, text='<b>Ajutes em<br>ROL</b>'))
        fig.add_annotation(dict(font=dict(color="indianred", size=11), x=0.55, y=1.29, showarrow=False, text=f'<b>{dfa.iat[8,0]}</b>'))

        fig.add_annotation(dict(font=dict(color="black", size=10), x=0.40, y=1.22, xanchor='left', showarrow=False, text='<b>RECEITA<br>OPERACIONAL</b>'))
        fig.add_annotation(dict(font=dict(color="steelblue", size=10), x=0.45, y=1.12, showarrow=False, text=f'<b>{dfa.iat[9,0]}</b>'))

        fig.add_annotation(dict(font=dict(color="black", size=10), x=0.56, y=0.99, xanchor='left', showarrow=False, text='<b>DESPESAS</b>'))
        fig.add_annotation(dict(font=dict(color="indianred", size=10), x=0.60, y=0.94, showarrow=False, text=f'<b>{dfa.iat[16,0]}</b>'))

        fig.add_annotation(dict(font=dict(color="black", size=10), x=0.78, y=0.60, xanchor='left', showarrow=False, text='<b>Pessoal e<br>encargos</b>'))
        fig.add_annotation(dict(font=dict(color="indianred", size=10), x=0.825, y=0.53, showarrow=False, text=f'<b>{dfa.iat[10,0]}</b>'))

        fig.add_annotation(dict(font=dict(color="black", size=10), x=0.78, y=0.37, xanchor='left', showarrow=False, text='<b>Despesas gerais<br>e administrativas</b>'))
        fig.add_annotation(dict(font=dict(color="indianred", size=10), x=0.84, y=0.275, showarrow=False, text=f'<b>{dfa.iat[13,0]}</b>'))

        fig.add_annotation(dict(font=dict(color="black", size=10), x=0.78, y=0.22, xanchor='left', showarrow=False, text='<b>Outras despesas</b>'))
        fig.add_annotation(dict(font=dict(color="indianred", size=10), x=0.845, y=0.16, showarrow=False, text=f'<b>{dfa.iat[15,0]}</b>'))

        fig.add_annotation(dict(font=dict(color="black", size=10), x=0.65, y=1.21, xanchor='left', showarrow=False, text='<b>RESULTADO<br>OPERACIONAL</b>'))
        fig.add_annotation(dict(font=dict(color="indianred", size=10), x=0.71, y=1.11, showarrow=False, text=f'<b>{dfa.iat[17,0]}</b>'))

        fig.add_annotation(dict(font=dict(color="black", size=10), x=0.88, y=1.39, xanchor='left', showarrow=False, text='<b>RESULTADO<br>FINANCEIRO</b>'))
        fig.add_annotation(dict(font=dict(color="indianred", size=10), x=0.93, y=1.29, showarrow=False, text=f'<b>{dfa.iat[18,0]}</b>'))

        fig.add_annotation(dict(font=dict(color="black", size=10), x=0.88, y=1.16, xanchor='left', showarrow=False, text='<b>RESULTADO</b>'))
        fig.add_annotation(dict(font=dict(color="indianred", size=10), x=0.93, y=1.11, showarrow=False, text=f'<b>{dfa.iat[19,0]}</b>'))

        st.plotly_chart(fig)

#############################################################################################################################################
#############################################################################################################################################

        #Plotar Gráfico Alternativo
        fontsize=28
        # Player Comparison Data
        markdown_1 = f"<div style='text-align:center;  color: blue; font-weight: bold; font-size:{fontsize}px'>{clube:}</div>"
        st.markdown("<h4 style='text-align: center;'>Comparativo com a Média da Liga</h4>", unsafe_allow_html=True)
        st.markdown(markdown_1, unsafe_allow_html=True)
        dfb = df1.iloc[np.r_[0:2, 58, 7, 9, 22, 26], np.r_[0:21]]
        dfb_transposed = dfb.T
        # Set the first row as the new header
        dfb_transposed.columns = dfb_transposed.iloc[0]
        # Drop the first row
        dfb_transposed = dfb_transposed.iloc[1:]
        # Rename the first column to 'clubs'
        dfb_transposed.index.name = 'Clubes'
        dfb = dfb_transposed
        # Renaming Columns
        dfb = dfb.rename(columns={"Receita c/ Publicidade e patrocínio": "Publicidade/patrocínio",
                                  "Receita c/ Match-Day": "Match-Day",
                                  "Receita c/ Sócio-torcedor": "Sócio-Torcedor",
                                  "Receita c/ Negociação de atletas": "Venda de jogadores",
                                  "Receita c/ Transmissão + Premiações": "Transmissão/Premiações",
                                  "RECEITA RECORRENTE": "Receita Recorrente" 
                                  })

        # Preparing the Graph
        params = list(dfb.columns)
        params = params[0:]

        #Preparing Data
        ranges = []
        a_values = []
        b_values = []

        for x in params:
            a = min(dfb[params][x])
            a = a
            b = max(dfb[params][x])
            b = b
            ranges.append((a, b))

        for x in range(len(dfb.index)):
            if dfb.index[x] == clube:
                a_values = dfb.iloc[x].values.tolist()
            if dfb.index[x] == 'Média da Liga':
                b_values = dfb.iloc[x].values.tolist()
                                    
        a_values = a_values[0:]
        b_values = b_values[0:]

        # Rounding values to no decimal places
        a_values = [round(value) for value in a_values]
        b_values = [round(value) for value in b_values]

        values = [a_values, b_values]

        #Plotting Data
        title = dict(
            title_name = clube,
            title_color = '#B6282F',
            subtitle_name = "(R$ milhões)",
            subtitle_color = '#B6282F',
            title_name_2 = 'Média da Liga',
            title_color_2 = '#344D94',
            subtitle_name_2 = "(R$ milhões)",
            subtitle_color_2 = '#344D94',
            title_fontsize = 18,
        ) 

        ## instantiate object
        radar = Radar()

        ## instantiate object -- changing fontsize
        radar=Radar(fontfamily='Cursive', range_fontsize=14)
        radar=Radar(fontfamily='Cursive', label_fontsize=14)

        fig,ax = radar.plot_radar(ranges=ranges,params=params,values=values,radar_color=['#B6282F', '#344D94'], dpi=600, alphas=[.6,.5], title=title, compare=True)
        #fig,ax = radar.plot_radar(ranges=ranges,params=params,values=values,radar_color=['#7eb6e0', '#f77b72'], dpi=600, alphas=[.8,.6], title=title, compare=True)
        st.pyplot(fig)

###############################################################################################################################################
###############################################################################################################################################
###############################################################################################################################################
###############################################################################################################################################


    elif clube == "Grêmio":
        
        def display_club_image(clube):
            try:
                # Get the image URL for the selected club
                club_image_url = club_image_paths.get(clube)
                
                if club_image_url:
                    # Center-align and display the image
                    st.markdown(
                        f"""
                        <div style="display: flex; justify-content: center;">
                            <img src="{club_image_url}" width="150">
                        </div>
                        """,
                        unsafe_allow_html=True
                    )
                else:
                    st.warning(f"Imagem não encontrada para o clube: {clube}")
            except Exception as e:
                st.error(f"Erro ao exibir a imagem: {e}")

        display_club_image(clube)

###############################################################################################################################################
###############################################################################################################################################
###############################################################################################################################################
###############################################################################################################################################

        # Custom CSS for better formatting
        st.markdown("""
        <style>
            .main {
                padding: 2rem;
            }
            .stAlert {
                background-color: #f8f9fa;
                padding: 1rem;
                border-radius: 0.5rem;
                border-left: 5px solid #ff4b4b;
            }
            .info-box {
                background-color: #e6f3ff;
                padding: 1rem;
                border-radius: 0.5rem;
                border-left: 5px solid #4B8BF5;
                margin-bottom: 1rem;
            }
            h1, h2, h3 {
                color: #1E3A8A;
            }
            .katex {
                font-size: 1.1em;
            }
        </style>
        """, unsafe_allow_html=True)

        st.markdown("""
        <div class="info-box">
        <h4>Resumo:</h4>
        <p>Em 2024 o Grêmio reverteu o déficit de R$ 28 mi de 2023 para superávit de R$ 44 mi, amparado no aumento de 22,5% da Receita Total para R$ 593 mi.  </p>
        <h4>Destaques:</h4>
        <p>1. O aumento da Receita é explicado pela venda de jogadores, R$ 106 mi, e pelo ganho de valor justo na compra de créditos da Arena, R$ 89 mi.  
        <p>2. A Geração de Caixa Operacional, R$ 122 mi, dobrou em relação a 2023, e foi inteiramente consumida pela compra de jogadores, R$ 130 mi. </p>
        <p>3. O Custo Operacional, R$ 398 mi, aumentou 10%, e corresponde a 67% da Receita Líquida. </p>  
        <p><b>Nota:</b> Utiliza apenas dados das demonstrações financeiras auditadas.</p>
        </div>
        """, unsafe_allow_html=True)

###############################################################################################################################################
###############################################################################################################################################
###############################################################################################################################################
###############################################################################################################################################
        
        st.markdown("<h4 style='text-align: center;  color: black;'>Demonstração de Resultado</b></h4>", unsafe_allow_html=True)
        st.markdown("<h5 style='text-align: center;  color: black;'>(em R$ milhões)<br></b></h5>", unsafe_allow_html=True)
        st.markdown("---")

        # Defining labels, sources and targets

        # Define labels, sources and targets (same as original)
        label = ["Direitos de transmissão", "Publicidade e patrocínio", "Arrecadação de jogos", 
                "Sócio-torcedor", "Premiações", "Licenciamento da marca", 
                "RECEITA RECORRENTE", "Negociação de atletas", "Outras receitas", 
                "RECEITA OPERACIONAL", "Pessoal e encargos", "Direitos de imagem", 
                "Despesas com jogos", "Despesas gerais e administrativas", 
                "Depreciação amortização", "Outras despesas", 
                "DESPESAS", "RESULTADO OPERACIONAL", "Resultado financeiro", "RESULTADO"]


        source =              [0, 1, 2, 3, 5, 6, 7, 8, 9,   9, 16, 16, 16, 16, 16, 16, 17, 19] #18 sources
        target =              [6, 6, 6, 6, 6, 9, 9, 9, 17, 16, 10, 11, 12, 13, 14, 15, 18, 18] #18 targets
        value = df.iloc[np.r_[21, 1, 2, 3, 5, 6, 7, 8, 17, 9, 10, 11, 12, 13, 14, 15, 17, 19], np.r_[13]].astype(int) #18 values
        dfa = df.iloc[:, np.r_[13]].astype(int)

        # Using positioning more similar to your original layout
        # These coordinates preserve the general structure but with slight improvements
        x = [0.15, 0.15, 0.15, 0.15, 0.15,    # Revenue sources (left)
            0.30,                                   # Recurring Revenue (left-center)
            0.375, 0.375,                           # Additional revenues (left-center)
            0.45,                                   # Net Operating Revenue (center)
            0.75, 0.75, 0.75, 0.75, 0.75, 0.75,     # Expense categories (right)
            0.60,                                   # Total Expenses (right-center)
            0.65,                                   # Resultado Operacional
            0.75,                                   # Resultado financeiro
            0.85]                                   # Results (far right)
            
        y = [-0.22, 0.0, 0.22, 0.44, 0.66,    # Revenue sources (left)
            -0.13,                                  # Recurring Revenue (left-center)
            0.20, 0.40,                             # Additional revenues (left-center)
            0.02,                                   # Net Operating Revenue (center)
            0.00, 0.20, 0.35, 0.50, 0.65, 0.80,    # Expense categories (right)
            0.30,                                   # Total Expenses (right-center)
            -0.19,                                  # Resultado Operacional
            -0.175,                                  # Resultado financeiro
            -0.19]                                   # Results (far right)

        # Colors that match the original diagram more closely
        # Light blue for revenue flows, green for positive results, red for expenses
        color_for_nodes = [
            'steelblue', 'steelblue', 'steelblue', 'steelblue', 'steelblue', 'steelblue',  # Revenue sources
            'steelblue',                                                                  # Recurring Revenue
            'steelblue', 'steelblue',                                                     # Additional revenues
            'steelblue',                                                                  # Net Operating Revenue
            'indianred', 'indianred', 'indianred', 'indianred', 'indianred', 'indianred', # Expense categories
            'indianred',                                                                  # Total Expenses
            'limegreen', 
            'indianred', 
            'limegreen'                                         # Results
        ]
        
        # Flow colors that match the original diagram more closely
        color_for_links = [
            'LightSkyBlue', 'LightSkyBlue', 'LightSkyBlue', 'LightSkyBlue', 'LightSkyBlue',    # Revenue source flows
            'LightSkyBlue', 'LightSkyBlue', 'LightSkyBlue',                                          # Additional revenue flows
            'lime',                                                                         # Flow to operating result
            'LightCoral',                                                                    # Flow to expenses
            'LightCoral', 'LightCoral', 'LightCoral', 'LightCoral', 'LightCoral', 'LightCoral',    # Expense category flows
            'LightCoral', 
            'lime'                                                             # Result flows
        ]

        link = dict(source=source, target=target, value=value, color=color_link)
        node = dict(label = label, pad=35, thickness=20)
        data = go.Sankey(link=link, node=node)

        # Set our X and Y co-ords 
        x = [.001 if v==0 else .999 if v==1 else v for v in x]
        y = [.001 if v==0 else .999 if v==1 else v for v in y]


        fig = go.Figure(data=[go.Sankey(
                # The following line hides our labels. They still show
                # when you hover the mouse over an object
                textfont=dict(color="rgba(0,0,0,0)", size=1),
                node = dict(
                    pad = 35,
                    line = dict(color = "white", width = 1),
                    label = label,
                    x = x,
                    y = y
                ),
                link = dict(
                    source = source,
                    target = target,
                    value = value
                    ))])

        # Update our chart
        fig.update_layout(
            hovermode='x',
        )
        # Apply node and link colour choices
        fig.update_traces(node_color = color_for_nodes,
                        link_color = color_for_links)
            
        fig.add_annotation(dict(font=dict(color="black", size=11), x=0.02, y=1.36, xanchor='left', showarrow=False, text='<b>Direitos de<br>transmissão e<br>Premiações</b>'))
        fig.add_annotation(dict(font=dict(color="steelblue", size=11), x=0.05, y=1.20, showarrow=False, text=f'<b>{dfa.iat[0,0]}</b>'))

        fig.add_annotation(dict(font=dict(color="black", size=11), x=0.02, y=1.08, xanchor='left', showarrow=False, text='<b>Publicidade e<br>patrocínio</b>'))
        fig.add_annotation(dict(font=dict(color="steelblue", size=11), x=0.05, y=0.97, showarrow=False, text=f'<b>{dfa.iat[1,0]}</b>'))

        fig.add_annotation(dict(font=dict(color="black", size=11), x=0.02, y=0.87, xanchor='left', showarrow=False, text='<b>Arrecadação<br>de jogos</b>'))
        fig.add_annotation(dict(font=dict(color="steelblue", size=11), x=0.05, y=0.76, showarrow=False, text=f'<b>{dfa.iat[2,0]}</b>'))

        fig.add_annotation(dict(font=dict(color="black", size=11), x=0.02, y=0.62, xanchor='left', showarrow=False, text='<b>Sócio-torcedor</b>'))
        fig.add_annotation(dict(font=dict(color="steelblue", size=11), x=0.06, y=0.56, showarrow=False, text=f'<b>{dfa.iat[3,0]}</b>'))

        fig.add_annotation(dict(font=dict(color="black", size=11), x=0.02, y=0.42, xanchor='left', showarrow=False, text='<b>Licenciamento<br>da marca</b>'))
        fig.add_annotation(dict(font=dict(color="steelblue", size=11), x=0.06, y=0.31, showarrow=False, text=f'<b>{dfa.iat[5,0]}</b>'))
            
        fig.add_annotation(dict(font=dict(color="black", size=10), x=0.25, y=1.39, xanchor='left', showarrow=False, text='<b>RECEITA<br>RECORRENTE</b>'))
        fig.add_annotation(dict(font=dict(color="steelblue", size=10), x=0.28, y=1.30, showarrow=False, text=f'<b>{dfa.iat[6,0]}</b>'))
            
        fig.add_annotation(dict(font=dict(color="black", size=11), x=0.27, y=0.88, xanchor='left', showarrow=False, text='<b>Negociação<br>de atletas</b>'))
        fig.add_annotation(dict(font=dict(color="steelblue", size=11), x=0.295, y=0.78, showarrow=False, text=f'<b>{dfa.iat[7,0]}</b>'))

        fig.add_annotation(dict(font=dict(color="black", size=11), x=0.29, y=0.68, xanchor='left', showarrow=False, text='<b>Outras<br>receitas</b>'))
        fig.add_annotation(dict(font=dict(color="steelblue", size=11), x=0.30, y=0.55, showarrow=False, text=f'<b>{dfa.iat[8,0]}</b>'))

        fig.add_annotation(dict(font=dict(color="black", size=10), x=0.40, y=1.33, xanchor='left', showarrow=False, text='<b>RECEITA<br>OPERACIONAL</b>'))
        fig.add_annotation(dict(font=dict(color="steelblue", size=10), x=0.45, y=1.23, showarrow=False, text=f'<b>{dfa.iat[9,0]}</b>'))

        fig.add_annotation(dict(font=dict(color="black", size=10), x=0.56, y=1, xanchor='left', showarrow=False, text='<b>DESPESAS</b>'))
        fig.add_annotation(dict(font=dict(color="indianred", size=10), x=0.595, y=0.94, showarrow=False, text=f'<b>{dfa.iat[16,0]}</b>'))

        fig.add_annotation(dict(font=dict(color="black", size=10), x=0.78, y=1.08, xanchor='left', showarrow=False, text='<b>Pessoal e<br>encargos</b>'))
        fig.add_annotation(dict(font=dict(color="indianred", size=10), x=0.825, y=0.99, showarrow=False, text=f'<b>{dfa.iat[10,0]}</b>'))

        fig.add_annotation(dict(font=dict(color="black", size=10), x=0.78, y=0.88, xanchor='left', showarrow=False, text='<b>Direitos de<br>imagem</b>'))
        fig.add_annotation(dict(font=dict(color="indianred", size=10), x=0.825, y=0.78, showarrow=False, text=f'<b>{dfa.iat[11,0]}</b>'))

        fig.add_annotation(dict(font=dict(color="black", size=10), x=0.78, y=0.66, xanchor='left', showarrow=False, text='<b>Despesas com<br>jogos</b>'))
        fig.add_annotation(dict(font=dict(color="indianred", size=10), x=0.84, y=0.58, showarrow=False, text=f'<b>{dfa.iat[12,0]}</b>'))

        fig.add_annotation(dict(font=dict(color="black", size=10), x=0.78, y=0.505, xanchor='left', showarrow=False, text='<b>Despesas gerais<br>e administrativas</b>'))
        fig.add_annotation(dict(font=dict(color="indianred", size=10), x=0.85, y=0.425, showarrow=False, text=f'<b>{dfa.iat[13,0]}</b>'))

        fig.add_annotation(dict(font=dict(color="black", size=10), x=0.78, y=0.35, xanchor='left', showarrow=False, text='<b>Depreciação<br>amortização</b>'))
        fig.add_annotation(dict(font=dict(color="indianred", size=10), x=0.83, y=0.25, showarrow=False, text=f'<b>{dfa.iat[14,0]}</b>'))

        fig.add_annotation(dict(font=dict(color="black", size=10), x=0.78, y=0.17, xanchor='left', showarrow=False, text='<b>Outras despesas</b>'))
        fig.add_annotation(dict(font=dict(color="indianred", size=10), x=0.855, y=0.11, showarrow=False, text=f'<b>{dfa.iat[15,0]}</b>'))

        fig.add_annotation(dict(font=dict(color="black", size=10), x=0.60, y=1.38, xanchor='left', showarrow=False, text='<b>RESULTADO<br>OPERACIONAL</b>'))
        fig.add_annotation(dict(font=dict(color="limegreen", size=10), x=0.65, y=1.28, showarrow=False, text=f'<b>{dfa.iat[17,0]}</b>'))

        fig.add_annotation(dict(font=dict(color="black", size=10), x=0.71, y=1.38, xanchor='left', showarrow=False, text='<b>RESULTADO<br>FINANCEIRO</b>'))
        fig.add_annotation(dict(font=dict(color="indianred", size=10), x=0.76, y=1.28, showarrow=False, text=f'<b>{dfa.iat[18,0]}</b>'))

        fig.add_annotation(dict(font=dict(color="black", size=10), x=0.82, y=1.33, xanchor='left', showarrow=False, text='<b>RESULTADO</b>'))
        fig.add_annotation(dict(font=dict(color="limegreen", size=10), x=0.86, y=1.28, showarrow=False, text=f'<b>{dfa.iat[19,0]}</b>'))

        fig.add_layout_image(
            dict(
                source="https://raw.githubusercontent.com/JAmerico1898/Financials-2025/b8aa21e79bd9f585f0acd3daf3d22d6c1002c314/Gremio.png",  # Change this to your image path
                xref="paper",  # Use "paper" for relative positioning within the plot
                yref="paper",
                x=1,  # Bottom left corner
                y=0,  # Bottom left corner
                sizex=0.1,  # Size of the image in x-axis proportion of plot's width
                sizey=0.1,  # Size of the image in y-axis proportion of plot's height
                xanchor="right",  # Anchor point is set to the left of the image
                yanchor="bottom"  # Anchor point is set to the bottom of the image
            )
        )


        st.plotly_chart(fig)

#############################################################################################################################################
#############################################################################################################################################

        #Plotar Gráfico Alternativo
        fontsize=28
        # Player Comparison Data
        markdown_1 = f"<div style='text-align:center;  color: blue; font-weight: bold; font-size:{fontsize}px'>{clube:}</div>"
        st.markdown("<h4 style='text-align: center;'>Comparativo com a Média da Liga</h4>", unsafe_allow_html=True)
        st.markdown(markdown_1, unsafe_allow_html=True)
        dfb = df1.iloc[np.r_[0:2, 58, 7, 9, 22, 26], np.r_[0:21]]
        dfb_transposed = dfb.T
        # Set the first row as the new header
        dfb_transposed.columns = dfb_transposed.iloc[0]
        # Drop the first row
        dfb_transposed = dfb_transposed.iloc[1:]
        # Rename the first column to 'clubs'
        dfb_transposed.index.name = 'Clubes'
        dfb = dfb_transposed
        # Renaming Columns
        dfb = dfb.rename(columns={"Receita c/ Publicidade e patrocínio": "Publicidade/patrocínio",
                                  "Receita c/ Match-Day": "Match-Day",
                                  "Receita c/ Sócio-torcedor": "Sócio-Torcedor",
                                  "Receita c/ Negociação de atletas": "Venda de jogadores",
                                  "Receita c/ Transmissão + Premiações": "Transmissão/Premiações",
                                  "RECEITA RECORRENTE": "Receita Recorrente" 
                                  })

        # Preparing the Graph
        params = list(dfb.columns)
        params = params[0:]

        #Preparing Data
        ranges = []
        a_values = []
        b_values = []

        for x in params:
            a = min(dfb[params][x])
            a = a
            b = max(dfb[params][x])
            b = b
            ranges.append((a, b))

        for x in range(len(dfb.index)):
            if dfb.index[x] == clube:
                a_values = dfb.iloc[x].values.tolist()
            if dfb.index[x] == 'Média da Liga':
                b_values = dfb.iloc[x].values.tolist()
                                    
        a_values = a_values[0:]
        b_values = b_values[0:]

        # Rounding values to no decimal places
        a_values = [round(value) for value in a_values]
        b_values = [round(value) for value in b_values]

        values = [a_values, b_values]

        #Plotting Data
        title = dict(
            title_name = clube,
            title_color = '#B6282F',
            subtitle_name = "(R$ milhões)",
            subtitle_color = '#B6282F',
            title_name_2 = 'Média da Liga',
            title_color_2 = '#344D94',
            subtitle_name_2 = "(R$ milhões)",
            subtitle_color_2 = '#344D94',
            title_fontsize = 18,
        ) 

        ## instantiate object
        radar = Radar()

        ## instantiate object -- changing fontsize
        radar=Radar(fontfamily='Cursive', range_fontsize=14)
        radar=Radar(fontfamily='Cursive', label_fontsize=14)

        fig,ax = radar.plot_radar(ranges=ranges,params=params,values=values,radar_color=['#B6282F', '#344D94'], dpi=600, alphas=[.6,.5], title=title, compare=True)
        #fig,ax = radar.plot_radar(ranges=ranges,params=params,values=values,radar_color=['#7eb6e0', '#f77b72'], dpi=600, alphas=[.8,.6], title=title, compare=True)
        st.pyplot(fig)

###############################################################################################################################################
###############################################################################################################################################
###############################################################################################################################################
###############################################################################################################################################


        #Plotar Gráfico Alternativo - 2024 x 2023
        fontsize=28
        # Player Comparison Data
        markdown_1 = f"<div style='text-align:center;  color: blue; font-weight: bold; font-size:{fontsize}px'>{clube:}</div>"
        st.markdown("<h4 style='text-align: center;'>Comparativo 2024 vs 2023</h4>", unsafe_allow_html=True)
        st.markdown(markdown_1, unsafe_allow_html=True)
        dfb = df1.iloc[np.r_[0:2, 58, 7, 9, 22, 26], np.r_[0, 13]]
        dfb = dfb.rename(columns={"Grêmio": "Grêmio - 2024"})
        dfb_2023 = df1_2023.iloc[np.r_[0:2, 58, 7, 9, 22, 26], np.r_[0, 13]]
        dfb_2023 = dfb_2023.rename(columns={"Grêmio": "Grêmio - 2023"})
        # Fazendo o merge com base na coluna "Clubes"
        dfb = pd.merge(dfb, dfb_2023, on="Clubes", how="inner")  # você pode trocar o "how" se quiser
        
        dfb_transposed = dfb.T
        # Set the first row as the new header
        dfb_transposed.columns = dfb_transposed.iloc[0]
        # Drop the first row
        dfb_transposed = dfb_transposed.iloc[1:]
        # Rename the first column to 'clubs'
        dfb_transposed.index.name = 'Clubes'
        dfb = dfb_transposed
        # Renaming Columns
        dfb = dfb.rename(columns={"Receita c/ Publicidade e patrocínio": "Publicidade/patrocínio",
                                  "Receita c/ Match-Day": "Match-Day",
                                  "Receita c/ Sócio-torcedor": "Sócio-Torcedor",
                                  "Receita c/ Negociação de atletas": "Venda de jogadores",
                                  "Receita c/ Direitos de transmissão": "Direitos de transmissão" 
                                  })

        teste_2024 = pd.read_csv("índices.csv")
        teste_2024 = teste_2024.iloc[np.r_[0:2, 58, 7, 9, 22, 26], np.r_[0: 20]]
        teste_2024_transposed = teste_2024.T
        # Set the first row as the new header
        teste_2024_transposed.columns = teste_2024_transposed.iloc[0]
        # Drop the first row
        teste_2024_transposed = teste_2024_transposed.iloc[1:]
        # Rename the first column to 'clubs'
        teste_2024_transposed.index.name = 'Clubes'
        teste_2024 = teste_2024_transposed
        # Renaming Columns
        teste_2024 = teste_2024.rename(columns={"Receita c/ Publicidade e patrocínio": "Publicidade/patrocínio",
                                  "Receita c/ Match-Day": "Match-Day",
                                  "Receita c/ Sócio-torcedor": "Sócio-Torcedor",
                                  "Receita c/ Negociação de atletas": "Venda de jogadores",
                                  "Receita c/ Direitos de transmissão": "Direitos de transmissão" 
                                  })

        teste_2023 = pd.read_csv("índices_2023.csv")
        teste_2023 = teste_2023.iloc[np.r_[0:2, 58, 7, 9, 22, 26], np.r_[0: 20]]
        teste_2023_transposed = teste_2023.T
        # Set the first row as the new header
        teste_2023_transposed.columns = teste_2023_transposed.iloc[0]
        # Drop the first row
        teste_2023_transposed = teste_2023_transposed.iloc[1:]
        # Rename the first column to 'clubs'
        teste_2023_transposed.index.name = 'Clubes'
        teste_2023 = teste_2023_transposed
        # Renaming Columns
        teste_2023 = teste_2023.rename(columns={"Receita c/ Publicidade e patrocínio": "Publicidade/patrocínio",
                                  "Receita c/ Match-Day": "Match-Day",
                                  "Receita c/ Sócio-torcedor": "Sócio-Torcedor",
                                  "Receita c/ Negociação de atletas": "Venda de jogadores",
                                  "Receita c/ Direitos de transmissão": "Direitos de transmissão" 
                                  })
    
        # Preparing the Graph
        params = list(dfb.columns)
        params = params[0:]
        #Preparing Data
        ranges = []
        a_values = []
        b_values = []

        for x in range(len(params)):
            # Combine as duas séries
            combined_values = pd.concat([teste_2023[params].iloc[:, x], teste_2024[params].iloc[:, x]])
            
            # Encontre o mínimo e o máximo
            a = combined_values.min()
            b = combined_values.max()
        
            ranges.append((a, b))

        for x in range(len(dfb.index)):
            if dfb.index[x] == "Grêmio - 2024":
                a_values = dfb.iloc[x].values.tolist()
            if dfb.index[x] == "Grêmio - 2023":
                b_values = dfb.iloc[x].values.tolist()
                                    
        a_values = a_values[0:]
        b_values = b_values[0:]

        # Rounding values to no decimal places
        a_values = [round(value) for value in a_values]
        b_values = [round(value) for value in b_values]

        values = [a_values, b_values]

        #Plotting Data
        title = dict(
            title_name = "Receitas e Despesas/2024",
            title_color = '#B6282F',
            subtitle_name = "(R$ milhões)",
            subtitle_color = '#B6282F',
            title_name_2 = 'Receitas e Despesas/2023',
            title_color_2 = '#344D94',
            subtitle_name_2 = "(R$ milhões)",
            subtitle_color_2 = '#344D94',
            title_fontsize = 18,
        ) 

        ## instantiate object
        radar = Radar()

        ## instantiate object -- changing fontsize
        radar=Radar(fontfamily='Cursive', range_fontsize=14)
        radar=Radar(fontfamily='Cursive', label_fontsize=14)

        fig,ax = radar.plot_radar(ranges=ranges,params=params,values=values,radar_color=['#B6282F', '#344D94'], dpi=600, alphas=[.6,.5], title=title, compare=True)
        st.pyplot(fig)

#############################################################################################################################################
#############################################################################################################################################
#############################################################################################################################################
#############################################################################################################################################

    elif clube == "Atlético":
        
        def display_club_image(clube):
            try:
                # Get the image URL for the selected club
                club_image_url = club_image_paths.get(clube)
                
                if club_image_url:
                    # Center-align and display the image
                    st.markdown(
                        f"""
                        <div style="display: flex; justify-content: center;">
                            <img src="{club_image_url}" width="150">
                        </div>
                        """,
                        unsafe_allow_html=True
                    )
                else:
                    st.warning(f"Imagem não encontrada para o clube: {clube}")
            except Exception as e:
                st.error(f"Erro ao exibir a imagem: {e}")

        display_club_image(clube)

#############################################################################################################################################
#############################################################################################################################################
#############################################################################################################################################
#############################################################################################################################################

        # Custom CSS for better formatting
        st.markdown("""
        <style>
            .main {
                padding: 2rem;
            }
            .stAlert {
                background-color: #f8f9fa;
                padding: 1rem;
                border-radius: 0.5rem;
                border-left: 5px solid #ff4b4b;
            }
            .info-box {
                background-color: #e6f3ff;
                padding: 1rem;
                border-radius: 0.5rem;
                border-left: 5px solid #4B8BF5;
                margin-bottom: 1rem;
            }
            h1, h2, h3 {
                color: #1E3A8A;
            }
            .katex {
                font-size: 1.1em;
            }
        </style>
        """, unsafe_allow_html=True)

        st.markdown("""
        <div class="info-box">
        <h4>Resumo:</h4>
        <p>Em 2024, o Atlético alcançou a maior receita de sua história, totalizando R$627 milhões (depois dos impostos). Contudo, o clube registrou
        apesar do prejuízo líquido de R$299 milhões, fortemente impactado pelo resultado financeiro negativo de R$219 milhões. A dívida expandida 
        aumentou para R$2,1 bilhão. O investimento no futebol somou R$542 milhões, incluindo folha salarial recorde e aquisições de atletas. </p>
        <h4>Destaques:</h4>
        <p>1. Valor total de ativos: Avaliado em R$2,3 bilhões, incluindo a Arena MRV (R$1,3 bi) e Cidade do Galo (R$200 mi). </p>
        <p>2. Dívida com bancos e Arena MRV: R$953 milhões ao final de 2024. </p>
        <p>3. Receita com venda de atletas: R$183 milhões (maior da história do clube). </p>
        <p>4. Investimento em atletas: R$218 milhões. </p>
        <p>5. Receitas operacionais em alta, com recorde em matchday + ST (R$113 milhões) e transmissão/premiações (R$248 milhões).
        <p><b>Nota:</b> Utiliza apenas dados das demonstrações financeiras auditadas.</p>
        </div>
        """, unsafe_allow_html=True)

#############################################################################################################################################
#############################################################################################################################################
#############################################################################################################################################
#############################################################################################################################################
     
        st.markdown("<h4 style='text-align: center;  color: black;'>Demonstração de Resultado</b></h4>", unsafe_allow_html=True)
        st.markdown("<h5 style='text-align: center;  color: black;'>(em R$ milhões)<br></b></h5>", unsafe_allow_html=True)
        st.markdown("---")

        # Define labels, sources and targets (same as original)
        label = ["Direitos de transmissão", "Publicidade e patrocínio", "Arrecadação de jogos", 
                "Sócio-torcedor", "Premiações", "Licenciamento da marca", 
                "RECEITA RECORRENTE", "Negociação de atletas", "Outras receitas", 
                "RECEITA OPERACIONAL", "Pessoal e encargos", "Direitos de imagem", 
                "Despesas com jogos", "Despesas gerais e administrativas", 
                "Depreciação amortização", "Outras despesas", 
                "DESPESAS", "RESULTADO OPERACIONAL", "Resultado financeiro", "RESULTADO"]


        source =              [0, 1, 2, 3, 5, 6, 7, 8,  9, 16, 16, 16, 16, 16, 16, 16, 17, 18] #18 sources
        target =              [6, 6, 6, 6, 6, 9, 9, 9, 16, 10, 11, 12, 13, 14, 15, 17, 19, 19] #18 targets
        value = df.iloc[np.r_[ 0, 1, 2, 3, 5, 6, 7, 8,  9, 10, 11, 12, 13, 14, 15, 17, 17, 18], np.r_[2]].astype(int) #18 values
        dfa = df.iloc[:, np.r_[2]].astype(int)

        # Using positioning more similar to your original layout
        # These coordinates preserve the general structure but with slight improvements
        x = [0.15, 0.15, 0.15, 0.15, 0.15,          # Revenue sources (left)
            0.30,                                   # Recurring Revenue (left-center)
            0.375, 0.375,                           # Additional revenues (left-center)
            0.45,                                   # Net Operating Revenue (center)
            0.75, 0.75, 0.75, 0.75, 0.75, 0.75,     # Expense categories (right)
            0.595,                                   # Total Expenses (right-center)
            0.45,                                   # Resultado Operacional
            0.35,                                   # Resultado financeiro
            0.25]                                   # Results (far right)
            
        y = [-0.22, 0.0, 0.22, 0.44, 0.66,    # Revenue sources (left)
            -0.05,                                  # Recurring Revenue (left-center)
            0.20, 0.40,                             # Additional revenues (left-center)
            0.05,                                   # Net Operating Revenue (center)
            0.00, 0.20, 0.35, 0.50, 0.65, 0.80,    # Expense categories (right)
            0.26,                                   # Total Expenses (right-center)
            0.65,                                  # Resultado Operacional
            0.80,                                  # Resultado financeiro
            0.80]                                   # Results (far right)

        # Colors that match the original diagram more closely
        # Light blue for revenue flows, green for positive results, red for expenses
        color_for_nodes = [
            'steelblue', 'steelblue', 'steelblue', 'steelblue', 'steelblue', 'steelblue',  # Revenue sources
            'steelblue',                                                                  # Recurring Revenue
            'steelblue', 'steelblue',                                                     # Additional revenues
            'steelblue',                                                                  # Net Operating Revenue
            'indianred', 'indianred', 'indianred', 'indianred', 'indianred', 'indianred', # Expense categories
            'indianred',                                                                  # Total Expenses
            'indianred', 
            'indianred', 
            'indianred'                                         # Results
        ]
        
        # Flow colors that match the original diagram more closely
        color_for_links = [
            'LightSkyBlue', 'LightSkyBlue', 'LightSkyBlue', 'LightSkyBlue', 'LightSkyBlue',    # Revenue source flows
            'LightSkyBlue', 'LightSkyBlue', 'LightSkyBlue',                                          # Additional revenue flows
            'LightCoral',                                                                         # Flow to operating result
            'LightCoral',                                                                    # Flow to expenses
            'LightCoral', 'LightCoral', 'LightCoral', 'LightCoral', 'LightCoral', 'LightCoral',    # Expense category flows
            'LightCoral', 
            'LightCoral'                                                             # Result flows
        ]

        link = dict(source=source, target=target, value=value, color=color_link)
        node = dict(label = label, pad=35, thickness=20)
        data = go.Sankey(link=link, node=node)

        # Set our X and Y co-ords 
        x = [.001 if v==0 else .999 if v==1 else v for v in x]
        y = [.001 if v==0 else .999 if v==1 else v for v in y]

        fig = go.Figure(data=[go.Sankey(
                # The following line hides our labels. They still show
                # when you hover the mouse over an object
                textfont=dict(color="rgba(0,0,0,0)", size=1),
                node = dict(
                    pad = 35,
                    line = dict(color = "white", width = 1),
                    label = label,
                    x = x,
                    y = y
                ),
                link = dict(
                    source = source,
                    target = target,
                    value = value
                    ))])

        # Update our chart
        fig.update_layout(
            hovermode='x',
        )
        # Apply node and link colour choices
        fig.update_traces(node_color = color_for_nodes,
                        link_color = color_for_links)
            
        fig.add_annotation(dict(font=dict(color="black", size=11), x=0.02, y=1.36, xanchor='left', showarrow=False, text='<b>Direitos de<br>transmissão e<br>Premiações</b>'))
        fig.add_annotation(dict(font=dict(color="steelblue", size=11), x=0.05, y=1.20, showarrow=False, text=f'<b>{dfa.iat[0,0]}</b>'))

        fig.add_annotation(dict(font=dict(color="black", size=11), x=0.02, y=1.08, xanchor='left', showarrow=False, text='<b>Publicidade e<br>patrocínio</b>'))
        fig.add_annotation(dict(font=dict(color="steelblue", size=11), x=0.05, y=0.97, showarrow=False, text=f'<b>{dfa.iat[1,0]}</b>'))

        fig.add_annotation(dict(font=dict(color="black", size=11), x=0.02, y=0.87, xanchor='left', showarrow=False, text='<b>Arrecadação<br>de jogos</b>'))
        fig.add_annotation(dict(font=dict(color="steelblue", size=11), x=0.05, y=0.76, showarrow=False, text=f'<b>{dfa.iat[2,0]}</b>'))

        fig.add_annotation(dict(font=dict(color="black", size=11), x=0.02, y=0.62, xanchor='left', showarrow=False, text='<b>Sócio-torcedor</b>'))
        fig.add_annotation(dict(font=dict(color="steelblue", size=11), x=0.06, y=0.56, showarrow=False, text=f'<b>{dfa.iat[3,0]}</b>'))
            
        fig.add_annotation(dict(font=dict(color="black", size=11), x=0.02, y=0.37, xanchor='left', showarrow=False, text='<b>Licenciamento<br>da marca</b>'))
        fig.add_annotation(dict(font=dict(color="steelblue", size=11), x=0.06, y=0.26, showarrow=False, text=f'<b>{dfa.iat[5,0]}</b>'))

        fig.add_annotation(dict(font=dict(color="black", size=10), x=0.25, y=1.29, xanchor='left', showarrow=False, text='<b>RECEITA<br>RECORRENTE</b>'))
        fig.add_annotation(dict(font=dict(color="steelblue", size=10), x=0.28, y=1.20, showarrow=False, text=f'<b>{dfa.iat[6,0]}</b>'))
            
        fig.add_annotation(dict(font=dict(color="black", size=11), x=0.27, y=0.88, xanchor='left', showarrow=False, text='<b>Negociação<br>de atletas</b>'))
        fig.add_annotation(dict(font=dict(color="steelblue", size=11), x=0.295, y=0.78, showarrow=False, text=f'<b>{dfa.iat[7,0]}</b>'))

        fig.add_annotation(dict(font=dict(color="black", size=11), x=0.25, y=0.63, xanchor='left', showarrow=False, text='<b>Outras receitas<br>& despesas</b>'))
        fig.add_annotation(dict(font=dict(color="steelblue", size=11), x=0.295, y=0.53, showarrow=False, text=f'<b>{dfa.iat[8,0]}</b>'))

        fig.add_annotation(dict(font=dict(color="black", size=10), x=0.40, y=1.23, xanchor='left', showarrow=False, text='<b>RECEITA<br>OPERACIONAL</b>'))
        fig.add_annotation(dict(font=dict(color="steelblue", size=10), x=0.45, y=1.13, showarrow=False, text=f'<b>{dfa.iat[9,0]}</b>'))

        fig.add_annotation(dict(font=dict(color="black", size=10), x=0.56, y=1.05, xanchor='left', showarrow=False, text='<b>DESPESAS</b>'))
        fig.add_annotation(dict(font=dict(color="indianred", size=10), x=0.595, y=0.99, showarrow=False, text=f'<b>{dfa.iat[16,0]}</b>'))

        fig.add_annotation(dict(font=dict(color="black", size=10), x=0.78, y=1.08, xanchor='left', showarrow=False, text='<b>Pessoal e<br>encargos</b>'))
        fig.add_annotation(dict(font=dict(color="indianred", size=10), x=0.825, y=0.99, showarrow=False, text=f'<b>{dfa.iat[10,0]}</b>'))

        fig.add_annotation(dict(font=dict(color="black", size=10), x=0.78, y=0.88, xanchor='left', showarrow=False, text='<b>Direitos de<br>imagem</b>'))
        fig.add_annotation(dict(font=dict(color="indianred", size=10), x=0.825, y=0.78, showarrow=False, text=f'<b>{dfa.iat[11,0]}</b>'))

        fig.add_annotation(dict(font=dict(color="black", size=10), x=0.78, y=0.66, xanchor='left', showarrow=False, text='<b>Despesas com<br>jogos</b>'))
        fig.add_annotation(dict(font=dict(color="indianred", size=10), x=0.84, y=0.58, showarrow=False, text=f'<b>{dfa.iat[12,0]}</b>'))

        fig.add_annotation(dict(font=dict(color="black", size=10), x=0.78, y=0.505, xanchor='left', showarrow=False, text='<b>Despesas gerais<br>e administrativas</b>'))
        fig.add_annotation(dict(font=dict(color="indianred", size=10), x=0.85, y=0.425, showarrow=False, text=f'<b>{dfa.iat[13,0]}</b>'))

        fig.add_annotation(dict(font=dict(color="black", size=10), x=0.78, y=0.35, xanchor='left', showarrow=False, text='<b>Depreciação<br>amortização</b>'))
        fig.add_annotation(dict(font=dict(color="indianred", size=10), x=0.83, y=0.25, showarrow=False, text=f'<b>{dfa.iat[14,0]}</b>'))

        fig.add_annotation(dict(font=dict(color="black", size=10), x=0.78, y=0.17, xanchor='left', showarrow=False, text='<b>Outras despesas</b>'))
        fig.add_annotation(dict(font=dict(color="indianred", size=10), x=0.855, y=0.11, showarrow=False, text=f'<b>{dfa.iat[15,0]}</b>'))

        fig.add_annotation(dict(font=dict(color="black", size=10), x=0.41, y=0.505, xanchor='left', showarrow=False, text='<b>RESULTADO<br>OPERACIONAL</b>'))
        fig.add_annotation(dict(font=dict(color="indianred", size=10), x=0.45, y=0.425, showarrow=False, text=f'<b>{dfa.iat[17,0]}</b>'))

        fig.add_annotation(dict(font=dict(color="black", size=10), x=0.38, y=0.18, xanchor='left', showarrow=False, text='<b>RESULTADO<br>FINANCEIRO</b>'))
        fig.add_annotation(dict(font=dict(color="indianred", size=10), x=0.42, y=0.12, showarrow=False, text=f'<b>{dfa.iat[18,0]}</b>'))

        fig.add_annotation(dict(font=dict(color="black", size=10), x=0.14, y=0.19, xanchor='left', showarrow=False, text='<b>RESULTADO</b>'))
        fig.add_annotation(dict(font=dict(color="indianred", size=10), x=0.17, y=0.13, showarrow=False, text=f'<b>{dfa.iat[19,0]}</b>'))

        st.plotly_chart(fig)

#############################################################################################################################################
#############################################################################################################################################
#############################################################################################################################################
#############################################################################################################################################

        #Plotar Gráfico Alternativo
        fontsize=28
        # Player Comparison Data
        markdown_1 = f"<div style='text-align:center;  color: gray; font-weight: bold; font-size:{fontsize}px'>{clube:}</div>"
        st.markdown("<h4 style='text-align: center;'>Comparativo com a Média da Liga</h4>", unsafe_allow_html=True)
        st.markdown(markdown_1, unsafe_allow_html=True)
        dfb = df1.iloc[np.r_[0:2, 58, 7, 9, 22, 26], np.r_[0:21]]
        dfb_transposed = dfb.T
        # Set the first row as the new header
        dfb_transposed.columns = dfb_transposed.iloc[0]
        # Drop the first row
        dfb_transposed = dfb_transposed.iloc[1:]
        # Rename the first column to 'clubs'
        dfb_transposed.index.name = 'Clubes'
        dfb = dfb_transposed
        # Renaming Columns
        dfb = dfb.rename(columns={"Receita c/ Publicidade e patrocínio": "Publicidade/patrocínio",
                                  "Receita c/ Match-Day": "Match-Day",
                                  "Receita c/ Sócio-torcedor": "Sócio-Torcedor",
                                  "Receita c/ Negociação de atletas": "Venda de jogadores",
                                  "Receita c/ Transmissão + Premiações": "Transmissão/Premiações",
                                  "RECEITA RECORRENTE": "Receita Recorrente" 
                                  })

        # Preparing the Graph
        params = list(dfb.columns)
        params = params[0:]

        #Preparing Data
        ranges = []
        a_values = []
        b_values = []

        for x in params:
            a = min(dfb[params][x])
            a = a
            b = max(dfb[params][x])
            b = b
            ranges.append((a, b))

        for x in range(len(dfb.index)):
            if dfb.index[x] == clube:
                a_values = dfb.iloc[x].values.tolist()
            if dfb.index[x] == 'Média da Liga':
                b_values = dfb.iloc[x].values.tolist()
                                    
        a_values = a_values[0:]
        b_values = b_values[0:]

        # Rounding values to no decimal places
        a_values = [round(value) for value in a_values]
        b_values = [round(value) for value in b_values]

        values = [a_values, b_values]

        #Plotting Data
        title = dict(
            title_name = clube,
            title_color = '#B6282F',
            subtitle_name = "(R$ milhões)",
            subtitle_color = '#B6282F',
            title_name_2 = 'Média da Liga',
            title_color_2 = '#344D94',
            subtitle_name_2 = "(R$ milhões)",
            subtitle_color_2 = '#344D94',
            title_fontsize = 18,
        ) 

        ## instantiate object
        radar = Radar()

        ## instantiate object -- changing fontsize
        radar=Radar(fontfamily='Cursive', range_fontsize=14)
        radar=Radar(fontfamily='Cursive', label_fontsize=14)

        fig,ax = radar.plot_radar(ranges=ranges,params=params,values=values,radar_color=['#B6282F', '#344D94'], dpi=600, alphas=[.6,.5], title=title, compare=True)
        #fig,ax = radar.plot_radar(ranges=ranges,params=params,values=values,radar_color=['#7eb6e0', '#f77b72'], dpi=600, alphas=[.8,.6], title=title, compare=True)
        st.pyplot(fig)

###############################################################################################################################################
###############################################################################################################################################
###############################################################################################################################################
###############################################################################################################################################


        #Plotar Gráfico Alternativo - 2024 x 2023
        fontsize=28
        # Player Comparison Data
        markdown_1 = f"<div style='text-align:center;  color: gray; font-weight: bold; font-size:{fontsize}px'>{clube:}</div>"
        st.markdown("<h4 style='text-align: center;'>Comparativo 2024 vs 2023</h4>", unsafe_allow_html=True)
        st.markdown(markdown_1, unsafe_allow_html=True)
        dfb = df1.iloc[np.r_[0:2, 58, 7, 9, 22, 26], np.r_[0, 2]]
        dfb = dfb.rename(columns={"Atlético": "Atlético - 2024"})
        dfb_2023 = df1_2023.iloc[np.r_[0:2, 58, 7, 9, 22, 26], np.r_[0, 3]]
        dfb_2023 = dfb_2023.rename(columns={"Atlético": "Atlético - 2023"})
        # Fazendo o merge com base na coluna "Clubes"
        dfb = pd.merge(dfb, dfb_2023, on="Clubes", how="inner")  # você pode trocar o "how" se quiser
        
        dfb_transposed = dfb.T
        # Set the first row as the new header
        dfb_transposed.columns = dfb_transposed.iloc[0]
        # Drop the first row
        dfb_transposed = dfb_transposed.iloc[1:]
        # Rename the first column to 'clubs'
        dfb_transposed.index.name = 'Clubes'
        dfb = dfb_transposed
        # Renaming Columns
        dfb = dfb.rename(columns={"Receita c/ Publicidade e patrocínio": "Publicidade/patrocínio",
                                  "Receita c/ Match-Day": "Match-Day",
                                  "Receita c/ Sócio-torcedor": "Sócio-Torcedor",
                                  "Receita c/ Negociação de atletas": "Venda de jogadores",
                                  "Receita c/ Direitos de transmissão": "Direitos de transmissão" 
                                  })

        teste_2024 = pd.read_csv("índices.csv")
        teste_2024 = teste_2024.iloc[np.r_[0:2, 58, 7, 9, 22, 26], np.r_[0: 20]]
        teste_2024_transposed = teste_2024.T
        # Set the first row as the new header
        teste_2024_transposed.columns = teste_2024_transposed.iloc[0]
        # Drop the first row
        teste_2024_transposed = teste_2024_transposed.iloc[1:]
        # Rename the first column to 'clubs'
        teste_2024_transposed.index.name = 'Clubes'
        teste_2024 = teste_2024_transposed
        # Renaming Columns
        teste_2024 = teste_2024.rename(columns={"Receita c/ Publicidade e patrocínio": "Publicidade/patrocínio",
                                  "Receita c/ Match-Day": "Match-Day",
                                  "Receita c/ Sócio-torcedor": "Sócio-Torcedor",
                                  "Receita c/ Negociação de atletas": "Venda de jogadores",
                                  "Receita c/ Direitos de transmissão": "Direitos de transmissão" 
                                  })

        teste_2023 = pd.read_csv("índices_2023.csv")
        teste_2023 = teste_2023.iloc[np.r_[0:2, 58, 7, 9, 22, 26], np.r_[0: 20]]
        teste_2023_transposed = teste_2023.T
        # Set the first row as the new header
        teste_2023_transposed.columns = teste_2023_transposed.iloc[0]
        # Drop the first row
        teste_2023_transposed = teste_2023_transposed.iloc[1:]
        # Rename the first column to 'clubs'
        teste_2023_transposed.index.name = 'Clubes'
        teste_2023 = teste_2023_transposed
        # Renaming Columns
        teste_2023 = teste_2023.rename(columns={"Receita c/ Publicidade e patrocínio": "Publicidade/patrocínio",
                                  "Receita c/ Match-Day": "Match-Day",
                                  "Receita c/ Sócio-torcedor": "Sócio-Torcedor",
                                  "Receita c/ Negociação de atletas": "Venda de jogadores",
                                  "Receita c/ Direitos de transmissão": "Direitos de transmissão" 
                                  })
    
        # Preparing the Graph
        params = list(dfb.columns)
        params = params[0:]
        #Preparing Data
        ranges = []
        a_values = []
        b_values = []

        for x in range(len(params)):
            # Combine as duas séries
            combined_values = pd.concat([teste_2023[params].iloc[:, x], teste_2024[params].iloc[:, x]])
            
            # Encontre o mínimo e o máximo
            a = combined_values.min()
            b = combined_values.max()
        
            ranges.append((a, b))

        for x in range(len(dfb.index)):
            if dfb.index[x] == "Atlético - 2024":
                a_values = dfb.iloc[x].values.tolist()
            if dfb.index[x] == "Atlético - 2023":
                b_values = dfb.iloc[x].values.tolist()
                                    
        a_values = a_values[0:]
        b_values = b_values[0:]

        # Rounding values to no decimal places
        a_values = [round(value) for value in a_values]
        b_values = [round(value) for value in b_values]

        values = [a_values, b_values]

        #Plotting Data
        title = dict(
            title_name = "Receitas e Despesas/2024",
            title_color = '#B6282F',
            subtitle_name = "(R$ milhões)",
            subtitle_color = '#B6282F',
            title_name_2 = 'Receitas e Despesas/2023',
            title_color_2 = '#344D94',
            subtitle_name_2 = "(R$ milhões)",
            subtitle_color_2 = '#344D94',
            title_fontsize = 18,
        ) 

        ## instantiate object
        radar = Radar()

        ## instantiate object -- changing fontsize
        radar=Radar(fontfamily='Cursive', range_fontsize=14)
        radar=Radar(fontfamily='Cursive', label_fontsize=14)

        fig,ax = radar.plot_radar(ranges=ranges,params=params,values=values,radar_color=['#B6282F', '#344D94'], dpi=600, alphas=[.6,.5], title=title, compare=True)
        st.pyplot(fig)

###############################################################################################################################################
###############################################################################################################################################
###############################################################################################################################################
###############################################################################################################################################

    elif clube == "Bahia":
        
        def display_club_image(clube):
            try:
                # Get the image URL for the selected club
                club_image_url = club_image_paths.get(clube)
                
                if club_image_url:
                    # Center-align and display the image
                    st.markdown(
                        f"""
                        <div style="display: flex; justify-content: center;">
                            <img src="{club_image_url}" width="150">
                        </div>
                        """,
                        unsafe_allow_html=True
                    )
                else:
                    st.warning(f"Imagem não encontrada para o clube: {clube}")
            except Exception as e:
                st.error(f"Erro ao exibir a imagem: {e}")

        display_club_image(clube)
        
###############################################################################################################################################
###############################################################################################################################################
###############################################################################################################################################
###############################################################################################################################################

        # Custom CSS for better formatting
        st.markdown("""
        <style>
            .main {
                padding: 2rem;
            }
            .stAlert {
                background-color: #f8f9fa;
                padding: 1rem;
                border-radius: 0.5rem;
                border-left: 5px solid #ff4b4b;
            }
            .info-box {
                background-color: #e6f3ff;
                padding: 1rem;
                border-radius: 0.5rem;
                border-left: 5px solid #4B8BF5;
                margin-bottom: 1rem;
            }
            h1, h2, h3 {
                color: #1E3A8A;
            }
            .katex {
                font-size: 1.1em;
            }
        </style>
        """, unsafe_allow_html=True)

        st.markdown("""
        <div class="info-box">
        <h4>Resumo:</h4>
        <p>O Bahia vive um ciclo de crescimento acelerado financiado essencialmente pelo City Football Group (CFG).
        O plano financeiro depende da liquidez provida pelo CFG enquanto os investimentos em elenco se convertem 
        (no médio prazo) em performance esportiva, novas receitas e reversão do déficit patrimonial. </p>
        <h4>Destaques:</h4>
        <p>1. Explosão dos custos do futebol: a rubrica Custo de pessoal/negociações saltou para R$ 391 mi 
        (143 % acima de 2023), levando o custo das atividades a superar a receita em 63 %. 
        A relação salários / receita = 1,07 é muito acima do limite prudencial (< 0,7). </p>
        <p>2. Intangível (R$ 670 mi, +27 %): registra investimentos em direitos federativos; reflete agressiva política de contratações. </p>
        <p>3. Partes relacionadas: empréstimos com o City Football Group subiram para R$ 679,9 mi. 
        Não há juros nem prazo definido e podem ser convertidos em capital e hoje representam 78 % do passivo de longo prazo. </p>
        <p>4. Financiamento supriu 141 % do consumo de caixa pelas atividades operacional e de investimento.
        99 % das entradas de financiamento (R$ 388,6 mi) correspondem ao mútuo do CFG Brasil. </p>
        <p>5. Investimentos concentram‑se em aquisição de atletas (R$296 mi) – coerente com o salto no intangível. </p>
        <p><b>Nota:</b> Utiliza apenas dados das demonstrações financeiras auditadas.</p>
        </div>
        """, unsafe_allow_html=True)

###############################################################################################################################################
###############################################################################################################################################
###############################################################################################################################################
###############################################################################################################################################

        st.markdown("<h4 style='text-align: center;  color: black;'>Demonstração de Resultado</b></h4>", unsafe_allow_html=True)
        st.markdown("<h5 style='text-align: center;  color: black;'>(em R$ milhões)<br></b></h5>", unsafe_allow_html=True)
        st.markdown("---")

        # Define labels, sources and targets (same as original)
        label = ["Direitos de transmissão", "Publicidade e patrocínio", "Arrecadação de jogos",
                 "Sócio-Torcedor", "Premiações", "Licenciamento da marca", 
                 "RECEITA RECORRENTE", "Negociação de atletas", "Outras receitas", 
                 "RECEITA OPERACIONAL", "Pessoal e encargos", "Direitos de Imagem", 
                 "Despesas com jogos", "Despesas gerais e administrativas", "Depreciação amortização", 
                 "Outras despesas", "DESPESAS", "RESULTADO OPERACIONAL", 
                 "Resultado financeiro", "RESULTADO"]

        source =               [0, 1, 2, 5, 6, 7, 9,  9, 16, 16, 16, 16, 16, 16, 16, 18, 17] #18 sources
        target =               [6, 6, 6, 6, 9, 9, 8, 16, 10, 11, 12, 13, 14, 15, 17, 17, 19] #18 targets
        value = df.iloc[np.r_[  0, 1, 2, 5, 6, 7, 8,  9, 10, 11, 12, 13, 14, 15, 17, 18, 19], np.r_[4]].astype(int) #18 values
        dfa = df.iloc[:, np.r_[4]].astype(int)
        link = dict(source=source, target=target, value=value, color=color_link)
        node = dict(label = label, pad=35, thickness=20)
        data = go.Sankey(link=link, node=node)

        # Using positioning more similar to your original layout
        # These coordinates preserve the general structure but with slight improvements
        x = [0.15, 0.15, 0.15, 0.15,               # Revenue sources (left)
            0.30,                                   # Recurring Revenue (left-center)
            0.375, 0.55,                           # Additional revenues (left-center)
            0.45,                                   # Net Operating Revenue (center)
            0.75, 0.75, 0.75, 0.75, 0.75,           # Expense categories (right)
            0.55,                                   # Total Expenses (right-center)
            0.40,                                   # Resultado Operacional
            0.55,                                   # Resultado financeiro
            0.25]                                   # Results (far right)
            
        y = [-0.22, 0.0, 0.22, 0.44,             # Revenue sources (left)
            -0.08,                                  # Recurring Revenue (left-center)
            0.40, -0.22,                             # Additional revenues (left-center)
            0.00,                                   # Net Operating Revenue (center)
            -0.05, 0.20, 0.35, 0.50, 0.65,          # Expense categories (right)
            0.20,                                   # Total Expenses (right-center)
            0.65,                                  # Resultado Operacional
            0.77,                                  # Resultado financeiro
            0.75]                                   # Results (far right)

        x = [.001 if v==0 else .999 if v==1 else v for v in x]
        y = [.001 if v==0 else .999 if v==1 else v for v in y]

        # Colors that match the original diagram more closely
        # Light blue for revenue flows, green for positive results, red for expenses
        color_for_nodes = [
            'steelblue', 'steelblue', 'steelblue', 'steelblue',                           # Revenue sources
            'steelblue',                                                                  # Recurring Revenue
            'steelblue', 'steelblue',                                                     # Additional revenues
            'steelblue',                                                                  # Net Operating Revenue
            'indianred', 'steelblue',
            'indianred', 'indianred', 'indianred', 'indianred', 'indianred',             # Expense categories
            'indianred',                                                                  # Total Expenses
            'indianred', 
            'indianred', 
            'indianred', 'indianred',
            'steelblue'
            # Results
        ]
        
        # Flow colors that match the original diagram more closely
        color_for_links = [
            'LightSkyBlue', 'LightSkyBlue', 'LightSkyBlue', 'LightSkyBlue',                 # Revenue source flows
            'LightSkyBlue', 'LightSkyBlue', 'LightCoral',                                 # Additional revenue flows
            'LightSkyBlue',                                                                         # Flow to operating result
            'LightCoral',                                                                   # Flow to expenses
            'LightCoral', 'LightCoral', 'LightCoral', 'LightCoral', 'LightCoral',           # Expense category flows
            'LightCoral', 
            'lime',
            'LightCoral'
            # Result flows
        ]

        fig = go.Figure(data=[go.Sankey(
                # The following line hides our labels. They still show
                # when you hover the mouse over an object
                textfont=dict(color="rgba(0,0,0,0)", size=1),
                node = dict(
                    pad = 35,
                    line = dict(color = "white", width = 1),
                    label = label,
                    x = x,
                    y = y
                ),
                link = dict(
                    source = source,
                    target = target,
                    value = value
                    ))])

        # Update our chart
        fig.update_layout(
            hovermode='x',
        )
        # Apply node and link colour choices
        fig.update_traces(node_color = color_for_nodes,
                        link_color = color_for_links)

        fig.add_annotation(dict(font=dict(color="black", size=11), x=0.02, y=1.36, xanchor='left', showarrow=False, text='<b>Direitos de<br>transmissão e<br>Premiações</b>'))
        fig.add_annotation(dict(font=dict(color="steelblue", size=11), x=0.05, y=1.20, showarrow=False, text=f'<b>{dfa.iat[0,0]}</b>'))

        fig.add_annotation(dict(font=dict(color="black", size=11), x=0.02, y=1.08, xanchor='left', showarrow=False, text='<b>Publicidade e<br>patrocínio</b>'))
        fig.add_annotation(dict(font=dict(color="steelblue", size=11), x=0.05, y=0.97, showarrow=False, text=f'<b>{dfa.iat[1,0]}</b>'))

        fig.add_annotation(dict(font=dict(color="black", size=11), x=0.02, y=0.87, xanchor='left', showarrow=False, text='<b>Arrecadação<br>de jogos + ST</b>'))
        fig.add_annotation(dict(font=dict(color="steelblue", size=11), x=0.05, y=0.76, showarrow=False, text=f'<b>{dfa.iat[2,0]}</b>'))

        fig.add_annotation(dict(font=dict(color="black", size=11), x=0.02, y=0.62, xanchor='left', showarrow=False, text='<b>Licenciamento<br>da marca</b>'))
        fig.add_annotation(dict(font=dict(color="steelblue", size=11), x=0.06, y=0.54, showarrow=False, text=f'<b>{dfa.iat[5,0]}</b>'))
            
        fig.add_annotation(dict(font=dict(color="black", size=11), x=0.25, y=1.30, xanchor='left', showarrow=False, text='<b>RECEITA<br>RECORRENTE</b>'))
        fig.add_annotation(dict(font=dict(color="steelblue", size=11), x=0.28, y=1.20, showarrow=False, text=f'<b>{dfa.iat[6,0]}</b>'))
            
        fig.add_annotation(dict(font=dict(color="black", size=11), x=0.27, y=0.66, xanchor='left', showarrow=False, text='<b>Negociação<br>de atletas</b>'))
        fig.add_annotation(dict(font=dict(color="steelblue", size=11), x=0.295, y=0.58, showarrow=False, text=f'<b>{dfa.iat[7,0]}</b>'))

        fig.add_annotation(dict(font=dict(color="black", size=11), x=0.57, y=1.29, xanchor='left', showarrow=False, text='<b>Ajuste nas<br>Receitas</b>'))
        fig.add_annotation(dict(font=dict(color="indianred", size=11), x=0.605, y=1.19, showarrow=False, text=f'<b>{dfa.iat[8,0]}</b>'))

        fig.add_annotation(dict(font=dict(color="black", size=11), x=0.40, y=1.23, xanchor='left', showarrow=False, text='<b>RECEITA<br>OPERACIONAL</b>'))
        fig.add_annotation(dict(font=dict(color="steelblue", size=11), x=0.45, y=1.13, showarrow=False, text=f'<b>{dfa.iat[9,0]}</b>'))

        fig.add_annotation(dict(font=dict(color="black", size=11), x=0.515, y=1.10, xanchor='left', showarrow=False, text='<b>DESPESAS</b>'))
        fig.add_annotation(dict(font=dict(color="indianred", size=11), x=0.55, y=1.04, showarrow=False, text=f'<b>{dfa.iat[16,0]}</b>'))

        fig.add_annotation(dict(font=dict(color="black", size=11), x=0.78, y=1.12, xanchor='left', showarrow=False, text='<b>Pessoal e<br>encargos</b>'))
        fig.add_annotation(dict(font=dict(color="indianred", size=11), x=0.825, y=1.01, showarrow=False, text=f'<b>{dfa.iat[10,0]}</b>'))

        fig.add_annotation(dict(font=dict(color="black", size=11), x=0.78, y=0.91, xanchor='left', showarrow=False, text='<b>Despesas<br>c/ jogos</b>'))
        fig.add_annotation(dict(font=dict(color="indianred", size=11), x=0.825, y=0.79, showarrow=False, text=f'<b>{dfa.iat[12,0]}</b>'))

        fig.add_annotation(dict(font=dict(color="black", size=11), x=0.78, y=0.73, xanchor='left', showarrow=False, text='<b>Despesas gerais<br>e administrativas</b>'))
        fig.add_annotation(dict(font=dict(color="indianred", size=11), x=0.84, y=0.59, showarrow=False, text=f'<b>{dfa.iat[13,0]}</b>'))

        fig.add_annotation(dict(font=dict(color="black", size=11), x=0.78, y=0.50, xanchor='left', showarrow=False, text='<b>Depreciação<br>amortização</b>'))
        fig.add_annotation(dict(font=dict(color="indianred", size=11), x=0.83, y=0.42, showarrow=False, text=f'<b>{dfa.iat[14,0]}</b>'))

        fig.add_annotation(dict(font=dict(color="black", size=11), x=0.78, y=0.36, xanchor='left', showarrow=False, text='<b>Outras despesas</b>'))
        fig.add_annotation(dict(font=dict(color="indianred", size=11), x=0.84, y=0.27, showarrow=False, text=f'<b>{dfa.iat[15,0]}</b>'))

        fig.add_annotation(dict(font=dict(color="black", size=11), x=0.36, y=0.14, xanchor='left', showarrow=False, text='<b>RESULTADO<br>OPERACIONAL</b>'))
        fig.add_annotation(dict(font=dict(color="indianred", size=11), x=0.40, y=0.09, showarrow=False, text=f'<b>{dfa.iat[17,0]}</b>'))

        fig.add_annotation(dict(font=dict(color="black", size=11), x=0.515, y=0.36, xanchor='left', showarrow=False, text='<b>RESULTADO<br>FINANCEIRO</b>'))
        fig.add_annotation(dict(font=dict(color="limegreen", size=11), x=0.55, y=0.25, showarrow=False, text=f'<b>{dfa.iat[18,0]}</b>'))

        fig.add_annotation(dict(font=dict(color="black", size=11), x=0.13, y=0.22, xanchor='left', showarrow=False, text='<b>RESULTADO</b>'))
        fig.add_annotation(dict(font=dict(color="indianred", size=11), x=0.16, y=0.16, showarrow=False, text=f'<b>{dfa.iat[19,0]}</b>'))

        st.plotly_chart(fig)

#############################################################################################################################################
#############################################################################################################################################

        #Plotar Gráfico Alternativo
        fontsize=28
        # Player Comparison Data
        markdown_1 = f"<div style='text-align:center;  color: blue; font-weight: bold; font-size:{fontsize}px'>{clube:}</div>"
        st.markdown("<h4 style='text-align: center;'>Comparativo com a Média da Liga</h4>", unsafe_allow_html=True)
        st.markdown(markdown_1, unsafe_allow_html=True)
        dfb = df1.iloc[np.r_[0:2, 58, 7, 9, 22, 26], np.r_[0:21]]
        dfb_transposed = dfb.T
        # Set the first row as the new header
        dfb_transposed.columns = dfb_transposed.iloc[0]
        # Drop the first row
        dfb_transposed = dfb_transposed.iloc[1:]
        # Rename the first column to 'clubs'
        dfb_transposed.index.name = 'Clubes'
        dfb = dfb_transposed
        # Renaming Columns
        dfb = dfb.rename(columns={"Receita c/ Publicidade e patrocínio": "Publicidade/patrocínio",
                                  "Receita c/ Match-Day": "Match-Day",
                                  "Receita c/ Sócio-torcedor": "Sócio-Torcedor",
                                  "Receita c/ Negociação de atletas": "Venda de jogadores",
                                  "Receita c/ Transmissão + Premiações": "Transmissão/Premiações",
                                  "RECEITA RECORRENTE": "Receita Recorrente" 
                                  })

        # Preparing the Graph
        params = list(dfb.columns)
        params = params[0:]

        #Preparing Data
        ranges = []
        a_values = []
        b_values = []

        for x in params:
            a = min(dfb[params][x])
            a = a
            b = max(dfb[params][x])
            b = b
            ranges.append((a, b))

        for x in range(len(dfb.index)):
            if dfb.index[x] == clube:
                a_values = dfb.iloc[x].values.tolist()
            if dfb.index[x] == 'Média da Liga':
                b_values = dfb.iloc[x].values.tolist()
                                    
        a_values = a_values[0:]
        b_values = b_values[0:]

        # Rounding values to no decimal places
        a_values = [round(value) for value in a_values]
        b_values = [round(value) for value in b_values]

        values = [a_values, b_values]

        #Plotting Data
        title = dict(
            title_name = clube,
            title_color = '#B6282F',
            subtitle_name = "(R$ milhões)",
            subtitle_color = '#B6282F',
            title_name_2 = 'Média da Liga',
            title_color_2 = '#344D94',
            subtitle_name_2 = "(R$ milhões)",
            subtitle_color_2 = '#344D94',
            title_fontsize = 18,
        ) 

        ## instantiate object
        radar = Radar()

        ## instantiate object -- changing fontsize
        radar=Radar(fontfamily='Cursive', range_fontsize=14)
        radar=Radar(fontfamily='Cursive', label_fontsize=14)

        fig,ax = radar.plot_radar(ranges=ranges,params=params,values=values,radar_color=['#B6282F', '#344D94'], dpi=600, alphas=[.6,.5], title=title, compare=True)
        #fig,ax = radar.plot_radar(ranges=ranges,params=params,values=values,radar_color=['#7eb6e0', '#f77b72'], dpi=600, alphas=[.8,.6], title=title, compare=True)
        st.pyplot(fig)


#############################################################################################################################################
#############################################################################################################################################
#############################################################################################################################################
#############################################################################################################################################


        #Plotar Gráfico Alternativo - 2024 x 2023
        fontsize=28
        # Player Comparison Data
        markdown_1 = f"<div style='text-align:center;  color: blue; font-weight: bold; font-size:{fontsize}px'>{clube:}</div>"
        st.markdown("<h4 style='text-align: center;'>Comparativo 2024 vs 2023</h4>", unsafe_allow_html=True)
        st.markdown(markdown_1, unsafe_allow_html=True)
        dfb = df1.iloc[np.r_[0:2, 58, 7, 9, 22, 26], np.r_[0, 4]]
        dfb = dfb.rename(columns={"Bahia": "Bahia - 2024"})
        dfb_2023 = df1_2023.iloc[np.r_[0:2, 58, 7, 9, 22, 26], np.r_[0, 4]]
        dfb_2023 = dfb_2023.rename(columns={"Bahia": "Bahia - 2023"})
        # Fazendo o merge com base na coluna "Clubes"
        dfb = pd.merge(dfb, dfb_2023, on="Clubes", how="inner")  # você pode trocar o "how" se quiser
        
        dfb_transposed = dfb.T
        # Set the first row as the new header
        dfb_transposed.columns = dfb_transposed.iloc[0]
        # Drop the first row
        dfb_transposed = dfb_transposed.iloc[1:]
        # Rename the first column to 'clubs'
        dfb_transposed.index.name = 'Clubes'
        dfb = dfb_transposed
        # Renaming Columns
        dfb = dfb.rename(columns={"Receita c/ Publicidade e patrocínio": "Publicidade/patrocínio",
                                  "Receita c/ Match-Day": "Match-Day",
                                  "Receita c/ Sócio-torcedor": "Sócio-Torcedor",
                                  "Receita c/ Negociação de atletas": "Venda de jogadores",
                                  "Receita c/ Direitos de transmissão": "Direitos de transmissão" 
                                  })

        teste_2024 = pd.read_csv("índices.csv")
        teste_2024 = teste_2024.iloc[np.r_[0:2, 58, 7, 9, 22, 26], np.r_[0: 20]]
        teste_2024_transposed = teste_2024.T
        # Set the first row as the new header
        teste_2024_transposed.columns = teste_2024_transposed.iloc[0]
        # Drop the first row
        teste_2024_transposed = teste_2024_transposed.iloc[1:]
        # Rename the first column to 'clubs'
        teste_2024_transposed.index.name = 'Clubes'
        teste_2024 = teste_2024_transposed
        # Renaming Columns
        teste_2024 = teste_2024.rename(columns={"Receita c/ Publicidade e patrocínio": "Publicidade/patrocínio",
                                  "Receita c/ Match-Day": "Match-Day",
                                  "Receita c/ Sócio-torcedor": "Sócio-Torcedor",
                                  "Receita c/ Negociação de atletas": "Venda de jogadores",
                                  "Receita c/ Direitos de transmissão": "Direitos de transmissão" 
                                  })

        teste_2023 = pd.read_csv("índices_2023.csv")
        teste_2023 = teste_2023.iloc[np.r_[0:2, 58, 7, 9, 22, 26], np.r_[0: 20]]
        teste_2023_transposed = teste_2023.T
        # Set the first row as the new header
        teste_2023_transposed.columns = teste_2023_transposed.iloc[0]
        # Drop the first row
        teste_2023_transposed = teste_2023_transposed.iloc[1:]
        # Rename the first column to 'clubs'
        teste_2023_transposed.index.name = 'Clubes'
        teste_2023 = teste_2023_transposed
        # Renaming Columns
        teste_2023 = teste_2023.rename(columns={"Receita c/ Publicidade e patrocínio": "Publicidade/patrocínio",
                                  "Receita c/ Match-Day": "Match-Day",
                                  "Receita c/ Sócio-torcedor": "Sócio-Torcedor",
                                  "Receita c/ Negociação de atletas": "Venda de jogadores",
                                  "Receita c/ Direitos de transmissão": "Direitos de transmissão" 
                                  })
    
        # Preparing the Graph
        params = list(dfb.columns)
        params = params[0:]
        #Preparing Data
        ranges = []
        a_values = []
        b_values = []

        for x in range(len(params)):
            # Combine as duas séries
            combined_values = pd.concat([teste_2023[params].iloc[:, x], teste_2024[params].iloc[:, x]])
            
            # Encontre o mínimo e o máximo
            a = combined_values.min()
            b = combined_values.max()
        
            ranges.append((a, b))

        for x in range(len(dfb.index)):
            if dfb.index[x] == "Bahia - 2024":
                a_values = dfb.iloc[x].values.tolist()
            if dfb.index[x] == "Bahia - 2023":
                b_values = dfb.iloc[x].values.tolist()
                                    
        a_values = a_values[0:]
        b_values = b_values[0:]

        # Rounding values to no decimal places
        a_values = [round(value) for value in a_values]
        b_values = [round(value) for value in b_values]

        values = [a_values, b_values]

        #Plotting Data
        title = dict(
            title_name = "Receitas e Despesas/2024",
            title_color = '#B6282F',
            subtitle_name = "(R$ milhões)",
            subtitle_color = '#B6282F',
            title_name_2 = 'Receitas e Despesas/2023',
            title_color_2 = '#344D94',
            subtitle_name_2 = "(R$ milhões)",
            subtitle_color_2 = '#344D94',
            title_fontsize = 18,
        ) 

        ## instantiate object
        radar = Radar()

        ## instantiate object -- changing fontsize
        radar=Radar(fontfamily='Cursive', range_fontsize=14)
        radar=Radar(fontfamily='Cursive', label_fontsize=14)

        fig,ax = radar.plot_radar(ranges=ranges,params=params,values=values,radar_color=['#B6282F', '#344D94'], dpi=600, alphas=[.6,.5], title=title, compare=True)
        st.pyplot(fig)

###############################################################################################################################################
###############################################################################################################################################
###############################################################################################################################################
###############################################################################################################################################

    elif clube == "Juventude":
        
        def display_club_image(clube):
            try:
                # Get the image URL for the selected club
                club_image_url = club_image_paths.get(clube)
                
                if club_image_url:
                    # Center-align and display the image
                    st.markdown(
                        f"""
                        <div style="display: flex; justify-content: center;">
                            <img src="{club_image_url}" width="150">
                        </div>
                        """,
                        unsafe_allow_html=True
                    )
                else:
                    st.warning(f"Imagem não encontrada para o clube: {clube}")
            except Exception as e:
                st.error(f"Erro ao exibir a imagem: {e}")

        display_club_image(clube)

###############################################################################################################################################
###############################################################################################################################################
###############################################################################################################################################
###############################################################################################################################################

        # Custom CSS for better formatting
        st.markdown("""
        <style>
            .main {
                padding: 2rem;
            }
            .stAlert {
                background-color: #f8f9fa;
                padding: 1rem;
                border-radius: 0.5rem;
                border-left: 5px solid #ff4b4b;
            }
            .info-box {
                background-color: #e6f3ff;
                padding: 1rem;
                border-radius: 0.5rem;
                border-left: 5px solid #4B8BF5;
                margin-bottom: 1rem;
            }
            h1, h2, h3 {
                color: #1E3A8A;
            }
            .katex {
                font-size: 1.1em;
            }
        </style>
        """, unsafe_allow_html=True)

        st.markdown("""
        <div class="info-box">
        <h4>Resumo:</h4>
        <p>O Juventude registrou um crescimento robusto de receitas (R$138 mi) sustentado por TV/premiações (68 %) 
        e patrocínios (19 %), consequência do retorno à Série A. O superávit de R$ 34 mi, um dos poucos da Série A,
        indicam boa eficiência em 2024. O auditor ressalvou o balanço devido a inconsistências em parcelamento do FGTS. </p>
        <h4>Destaques:</h4>
        <p>1. Folha salarial e encargos representam 60 % de todas as despesas, principal custo. </p>
        <p>2. Negócios com atletas foram discretos em 2024 (apenas 3 % da receita), limitando a 
        Receita total do clube. </p>
        <p>3. Resultado financeiro negativo modesto (-R$ 2 mi) indica endividamento baixo. </p>
        <p><b>Nota:</b> Utiliza apenas dados das demonstrações financeiras auditadas.</p>
        </div>
        """, unsafe_allow_html=True)

###############################################################################################################################################
###############################################################################################################################################
###############################################################################################################################################
###############################################################################################################################################
        
        st.markdown("<h4 style='text-align: center;  color: black;'>Demonstração de Resultado</b></h4>", unsafe_allow_html=True)
        st.markdown("<h5 style='text-align: center;  color: black;'>(em R$ milhões)<br></b></h5>", unsafe_allow_html=True)
        st.markdown("---")

        # Define labels, sources and targets (same as original)
        label = ["Direitos de transmissão", "Publicidade e patrocínio", "Arrecadação de jogos",
                 "Sócio-Torcedor", "Premiações", "Licenciamento da marca", 
                 "RECEITA RECORRENTE", "Negociação de atletas", "Outras receitas", 
                 "RECEITA OPERACIONAL", "Pessoal e encargos", "Direitos de Imagem", 
                 "Despesas com jogos", "Despesas gerais e administrativas", "Depreciação amortização", 
                 "Outras despesas", "DESPESAS", "RESULTADO OPERACIONAL", 
                 "Resultado financeiro", "RESULTADO"]

        source =               [0, 1, 2, 3, 5, 6, 7, 8,  9, 16, 16, 16, 16, 16,  9, 17, 18] #18 sources
        target =               [6, 6, 6, 6, 6, 9, 9, 9, 16, 10, 11, 13, 14, 15, 17, 19, 19] #18 targets
        value = df.iloc[np.r_[  0, 1, 2, 3, 5, 6, 7, 8, 16, 10, 11, 13, 14, 15, 17, 17, 18], np.r_[17]].astype(int) #18 values
        dfa = df.iloc[:, np.r_[17]].astype(int)
        link = dict(source=source, target=target, value=value, color=color_link)
        node = dict(label = label, pad=35, thickness=20)
        data = go.Sankey(link=link, node=node)

        # Using positioning more similar to your original layout
        # These coordinates preserve the general structure but with slight improvements
        x = [0.15, 0.15, 0.15, 0.15, 0.15,          # Revenue sources (left)
            0.30,                                   # Recurring Revenue (left-center)
            0.375, 0.375,                           # Additional revenues (left-center)
            0.45,                                   # Net Operating Revenue (center)
            0.75, 0.75, 0.75, 0.75, 0.75,           # Expense categories (right)
            0.60,                                   # Total Expenses (right-center)
            0.70,                                   # Resultado Operacional
            0.75,                                   # Resultado financeiro
            0.85]                                   # Results (far right)
            
        y = [-0.22, 0, 0.22, 0.44, 0.66,            # Revenue sources (left)
            -0.075,                                  # Recurring Revenue (left-center)
            0.22, 0.40,                             # Additional revenues (left-center)
            0.01,                                   # Net Operating Revenue (center)
            0.15, 0.35, 0.55, 0.75, 0.95,            # Expense categories (right)
            0.31,                                   # Total Expenses (right-center)
            -0.17,                                  # Resultado Operacional
            -0.05,                                   # Resultado financeiro
            -0.15]                                   # Results (far right)

        x = [.001 if v==0 else .999 if v==1 else v for v in x]
        y = [.001 if v==0 else .999 if v==1 else v for v in y]

        # Colors that match the original diagram more closely
        # Light blue for revenue flows, green for positive results, red for expenses
        color_for_nodes = [
            'steelblue', 'steelblue', 'steelblue', 'steelblue', 'steelblue',                           # Revenue sources
            'steelblue',                                                                  # Recurring Revenue
            'steelblue', 'steelblue',                                                     # Additional revenues
            'steelblue',                                                                  # Net Operating Revenue
            'steelblue',                                                                  # Net Operating Revenue
            'indianred', 'indianred',
            'indianred', 'indianred', 'indianred', 'indianred', 'indianred',             # Expense categories
            'limegreen',                                                                  # Total Expenses
            'indianred', 
            'limegreen', 
            # Results
        ]
        
        # Flow colors that match the original diagram more closely
        color_for_links = [
            'LightSkyBlue', 'LightSkyBlue', 'LightSkyBlue', 'LightSkyBlue', 'LightSkyBlue',                 # Revenue source flows
            'LightSkyBlue', 
            'LightSkyBlue', 'LightSkyBlue',                                 # Additional revenue flows
            'LightCoral',                                                                         # Flow to operating result
            'LightCoral',                                                                   # Flow to expenses
            'LightCoral', 'LightCoral', 'LightCoral', 'LightCoral', 'lime',           # Expense category flows
            'lime', 
            'LightCoral',
            'lime'
            # Result flows
        ]

        fig = go.Figure(data=[go.Sankey(
                # The following line hides our labels. They still show
                # when you hover the mouse over an object
                textfont=dict(color="rgba(0,0,0,0)", size=1),
                node = dict(
                    pad = 35,
                    line = dict(color = "white", width = 1),
                    label = label,
                    x = x,
                    y = y
                ),
                link = dict(
                    source = source,
                    target = target,
                    value = value
                    ))])

        # Update our chart
        fig.update_layout(
            hovermode='x',
        )
        # Apply node and link colour choices
        fig.update_traces(node_color = color_for_nodes,
                        link_color = color_for_links)
            
        fig.add_annotation(dict(font=dict(color="black", size=11), x=0.02, y=1.32, xanchor='left', showarrow=False, text='<b>Direitos de<br>transmissão e<br>Premiações</b>'))
        fig.add_annotation(dict(font=dict(color="steelblue", size=11), x=0.06, y=1.17, showarrow=False, text=f'<b>{dfa.iat[0,0]}</b>'))

        fig.add_annotation(dict(font=dict(color="black", size=11), x=0.02, y=1.10, xanchor='left', showarrow=False, text='<b>Publicidade e<br>patrocínio</b>'))
        fig.add_annotation(dict(font=dict(color="steelblue", size=11), x=0.06, y=0.98, showarrow=False, text=f'<b>{dfa.iat[1,0]}</b>'))

        fig.add_annotation(dict(font=dict(color="black", size=11), x=0.02, y=0.88, xanchor='left', showarrow=False, text='<b>Arrecadação<br>de jogos</b>'))
        fig.add_annotation(dict(font=dict(color="steelblue", size=11), x=0.06, y=0.76, showarrow=False, text=f'<b>{dfa.iat[2,0]}</b>'))

        fig.add_annotation(dict(font=dict(color="black", size=11), x=0.04, y=0.60, xanchor='left', showarrow=False, text='<b>Sócio<br>Torcedor</b>'))
        fig.add_annotation(dict(font=dict(color="steelblue", size=11), x=0.06, y=0.51, showarrow=False, text=f'<b>{dfa.iat[3,0]}</b>'))

        fig.add_annotation(dict(font=dict(color="black", size=11), x=0.02, y=0.40, xanchor='left', showarrow=False, text='<b>Licenciamento<br>da Marca</b>'))
        fig.add_annotation(dict(font=dict(color="steelblue", size=11), x=0.06, y=0.28, showarrow=False, text=f'<b>{dfa.iat[5,0]}</b>'))

        fig.add_annotation(dict(font=dict(color="black", size=10), x=0.25, y=1.39, xanchor='left', showarrow=False, text='<b>RECEITA<br>RECORRENTE</b>'))
        fig.add_annotation(dict(font=dict(color="steelblue", size=10), x=0.285, y=1.29, showarrow=False, text=f'<b>{dfa.iat[6,0]}</b>'))

        fig.add_annotation(dict(font=dict(color="black", size=11), x=0.29, y=0.62, xanchor='left', showarrow=False, text='<b>Outras<br>receitas</b>'))
        fig.add_annotation(dict(font=dict(color="steelblue", size=11), x=0.305, y=0.53, showarrow=False, text=f'<b>{dfa.iat[8,0]}</b>'))
            
        fig.add_annotation(dict(font=dict(color="black", size=11), x=0.26, y=0.88, xanchor='left', showarrow=False, text='<b>Negociação<br>de Atletas</b>'))
        fig.add_annotation(dict(font=dict(color="steelblue", size=11), x=0.29, y=0.78, showarrow=False, text=f'<b>{dfa.iat[7,0]}</b>'))

        fig.add_annotation(dict(font=dict(color="black", size=10), x=0.40, y=1.33, xanchor='left', showarrow=False, text='<b>RECEITA<br>OPERACIONAL</b>'))
        fig.add_annotation(dict(font=dict(color="steelblue", size=10), x=0.45, y=1.22, showarrow=False, text=f'<b>{dfa.iat[9,0]}</b>'))

        fig.add_annotation(dict(font=dict(color="black", size=10), x=0.56, y=0.91, xanchor='left', showarrow=False, text='<b>DESPESAS</b>'))
        fig.add_annotation(dict(font=dict(color="indianred", size=10), x=0.6, y=0.87, showarrow=False, text=f'<b>{dfa.iat[16,0]}</b>'))

        fig.add_annotation(dict(font=dict(color="black", size=10), x=0.78, y=0.94, xanchor='left', showarrow=False, text='<b>Pessoal e<br>encargos</b>'))
        fig.add_annotation(dict(font=dict(color="indianred", size=10), x=0.82, y=0.84, showarrow=False, text=f'<b>{dfa.iat[10,0]}</b>'))

        fig.add_annotation(dict(font=dict(color="black", size=10), x=0.78, y=0.74, xanchor='left', showarrow=False, text='<b>Despesa <br>com jogos</b>'))
        fig.add_annotation(dict(font=dict(color="indianred", size=10), x=0.82, y=0.61, showarrow=False, text=f'<b>{dfa.iat[12,0]}</b>'))

        fig.add_annotation(dict(font=dict(color="black", size=10), x=0.78, y=0.48, xanchor='left', showarrow=False, text='<b>Despesas gerais<br>e administrativas</b>'))
        fig.add_annotation(dict(font=dict(color="indianred", size=10), x=0.84, y=0.40, showarrow=False, text=f'<b>{dfa.iat[13,0]}</b>'))

        fig.add_annotation(dict(font=dict(color="black", size=10), x=0.78, y=0.22, xanchor='left', showarrow=False, text='<b>Depreciação e <br>amortização</b>'))
        fig.add_annotation(dict(font=dict(color="indianred", size=10), x=0.84, y=0.16, showarrow=False, text=f'<b>{dfa.iat[14,0]}</b>'))

        fig.add_annotation(dict(font=dict(color="black", size=10), x=0.78, y=0.00, xanchor='left', showarrow=False, text='<b>Despesas gerais<br>e administrativas</b>'))
        fig.add_annotation(dict(font=dict(color="indianred", size=10), x=0.84, y=-0.06, showarrow=False, text=f'<b>{dfa.iat[15,0]}</b>'))

        fig.add_annotation(dict(font=dict(color="black", size=10), x=0.645, y=1.38, xanchor='left', showarrow=False, text='<b>RESULTADO<br>OPERACIONAL</b>'))
        fig.add_annotation(dict(font=dict(color="Limegreen", size=10), x=0.71, y=1.28, showarrow=False, text=f'<b>{dfa.iat[17,0]}</b>'))

        fig.add_annotation(dict(font=dict(color="black", size=10), x=0.82, y=1.30, xanchor='left', showarrow=False, text='<b>RESULTADO</b>'))
        fig.add_annotation(dict(font=dict(color="Limegreen", size=10), x=0.86, y=1.25, showarrow=False, text=f'<b>{dfa.iat[19,0]}</b>'))

        fig.add_annotation(dict(font=dict(color="black", size=10), x=0.67, y=1.10, xanchor='left', showarrow=False, text='<b>Resultado<br>Financeiro</b>'))
        fig.add_annotation(dict(font=dict(color="indianred", size=10), x=0.71, y=1.00, showarrow=False, text=f'<b>{dfa.iat[18,0]}</b>'))

        st.plotly_chart(fig)

#############################################################################################################################################
#############################################################################################################################################
#############################################################################################################################################
#############################################################################################################################################

        #Plotar Gráfico Alternativo
        fontsize=28
        # Player Comparison Data
        markdown_1 = f"<div style='text-align:center;  color: grey; font-weight: bold; font-size:{fontsize}px'>{clube:}</div>"
        st.markdown("<h4 style='text-align: center;'>Comparativo com a Média da Liga</h4>", unsafe_allow_html=True)
        st.markdown(markdown_1, unsafe_allow_html=True)
        dfb = df1.iloc[np.r_[0:4, 6:8, 22, 26], np.r_[0:21]]
        dfb_transposed = dfb.T
        # Set the first row as the new header
        dfb_transposed.columns = dfb_transposed.iloc[0]
        # Drop the first row
        dfb_transposed = dfb_transposed.iloc[1:]
        # Rename the first column to 'clubs'
        dfb_transposed.index.name = 'Clubes'
        dfb = dfb_transposed
        # Renaming Columns
        dfb = dfb.rename(columns={"Receita c/ Publicidade e patrocínio": "Publicidade/patrocínio",
                                  "Receita c/ Match-Day": "Match-Day",
                                  "Receita c/ Sócio-torcedor": "Sócio-Torcedor",
                                  "Receita c/ Negociação de atletas": "Venda de jogadores",
                                  "Receita c/ Transmissão + Premiações": "Transmissão/Premiações",
                                  "RECEITA RECORRENTE": "Receita Recorrente" 
                                  })
        # Preparing the Graph
        params = list(dfb.columns)
        params = params[0:]

        #Preparing Data
        ranges = []
        a_values = []
        b_values = []

        for x in params:
            a = min(dfb[params][x])
            a = a
            b = max(dfb[params][x])
            b = b
            ranges.append((a, b))

        for x in range(len(dfb.index)):
            if dfb.index[x] == clube:
                a_values = dfb.iloc[x].values.tolist()
            if dfb.index[x] == 'Média da Liga':
                b_values = dfb.iloc[x].values.tolist()
                                    
        a_values = a_values[0:]
        b_values = b_values[0:]

        # Rounding values to no decimal places
        a_values = [round(value) for value in a_values]
        b_values = [round(value) for value in b_values]

        values = [a_values, b_values]

        #Plotting Data
        title = dict(
            title_name = clube,
            title_color = '#B6282F',
            subtitle_name = "(R$ milhões)",
            subtitle_color = '#B6282F',
            title_name_2 = 'Média da Liga',
            title_color_2 = '#344D94',
            subtitle_name_2 = "(R$ milhões)",
            subtitle_color_2 = '#344D94',
            title_fontsize = 18,
        ) 

        ## instantiate object
        radar = Radar()

        ## instantiate object -- changing fontsize
        radar=Radar(fontfamily='Cursive', range_fontsize=14)
        radar=Radar(fontfamily='Cursive', label_fontsize=14)

        fig,ax = radar.plot_radar(ranges=ranges,params=params,values=values,radar_color=['#B6282F', '#344D94'], dpi=600, alphas=[.6,.5], title=title, compare=True)
        #fig,ax = radar.plot_radar(ranges=ranges,params=params,values=values,radar_color=['#7eb6e0', '#f77b72'], dpi=600, alphas=[.8,.6], title=title, compare=True)
        st.pyplot(fig)

#############################################################################################################################################
#############################################################################################################################################
#############################################################################################################################################
#############################################################################################################################################


    elif clube == "Vitória":
        
        def display_club_image(clube):
            try:
                # Get the image URL for the selected club
                club_image_url = club_image_paths.get(clube)
                
                if club_image_url:
                    # Center-align and display the image
                    st.markdown(
                        f"""
                        <div style="display: flex; justify-content: center;">
                            <img src="{club_image_url}" width="150">
                        </div>
                        """,
                        unsafe_allow_html=True
                    )
                else:
                    st.warning(f"Imagem não encontrada para o clube: {clube}")
            except Exception as e:
                st.error(f"Erro ao exibir a imagem: {e}")

        display_club_image(clube)

###############################################################################################################################################
###############################################################################################################################################
###############################################################################################################################################
###############################################################################################################################################

        # Custom CSS for better formatting
        st.markdown("""
        <style>
            .main {
                padding: 2rem;
            }
            .stAlert {
                background-color: #f8f9fa;
                padding: 1rem;
                border-radius: 0.5rem;
                border-left: 5px solid #ff4b4b;
            }
            .info-box {
                background-color: #e6f3ff;
                padding: 1rem;
                border-radius: 0.5rem;
                border-left: 5px solid #4B8BF5;
                margin-bottom: 1rem;
            }
            h1, h2, h3 {
                color: #1E3A8A;
            }
            .katex {
                font-size: 1.1em;
            }
        </style>
        """, unsafe_allow_html=True)

        st.markdown("""
        <div class="info-box">
        <h4>Resumo:</h4>
        <p>O Vitória registrou um salto de receitas. A volta à Série A elevou cotas de TV, patrocínios e bilheteria. Entretanto, as 
        despesas cresceram em ritmo semelhante, impedindo a reversão do déficit. </p>
        <h4>Destaques:</h4>
        <p>1. Direitos de TV saltaram mais de 6x com a Série A. </p>
        <p>2. Patrocínios receberam impulso da exposição nacional. </p>
        <p>3. Negócios com atletas foram discretos em 2024, limitando a Receita total do clube. </p>
        <p>4. Programa de sócio-torcedor em expansão (42 mil associados) reforça base recorrente de caixa. </p>
        <p><b>Nota:</b> Utiliza apenas dados das demonstrações financeiras auditadas.</p>
        </div>
        """, unsafe_allow_html=True)

###############################################################################################################################################
###############################################################################################################################################
###############################################################################################################################################
###############################################################################################################################################
        
        st.markdown("<h4 style='text-align: center;  color: black;'>Demonstração de Resultado</b></h4>", unsafe_allow_html=True)
        st.markdown("<h5 style='text-align: center;  color: black;'>(em R$ milhões)<br></b></h5>", unsafe_allow_html=True)
        st.markdown("---")

        # Define labels, sources and targets (same as original)
        label = ["Direitos de transmissão", "Publicidade e patrocínio", "Arrecadação de jogos",
                 "Sócio-Torcedor", "Premiações", "Licenciamento da marca", 
                 "RECEITA RECORRENTE", "Negociação de atletas", "Outras receitas", 
                 "RECEITA OPERACIONAL", "Pessoal e encargos", "Direitos de Imagem", 
                 "Despesas com jogos", "Despesas gerais e administrativas", "Depreciação amortização", 
                 "Outras despesas", "DESPESAS", "RESULTADO OPERACIONAL", 
                 "Resultado financeiro", "RESULTADO"]

        source =               [0, 1, 2, 3, 6, 7, 8,  9, 16, 16, 16, 16, 16, 16, 16, 17, 18] #18 sources
        target =               [6, 6, 6, 6, 9, 9, 9, 16, 10, 11, 12, 13, 14, 15, 17, 19, 19] #18 targets
        value = df.iloc[np.r_[  0, 1, 2, 3, 6, 7, 8,  9, 10, 11, 12, 13, 14, 15, 17, 17, 18], np.r_[7]].astype(int) #18 values
        dfa = df.iloc[:, np.r_[7]].astype(int)
        link = dict(source=source, target=target, value=value, color=color_link)
        node = dict(label = label, pad=35, thickness=20)
        data = go.Sankey(link=link, node=node)

        # Using positioning more similar to your original layout
        # These coordinates preserve the general structure but with slight improvements
        x = [0.15, 0.15, 0.15, 0.15,                # Revenue sources (left)
            0.30,                                   # Recurring Revenue (left-center)
            0.375, 0.375,                           # Additional revenues (left-center)
            0.45,                                   # Net Operating Revenue (center)
            0.75, 0.75, 0.75, 0.75, 0.75, 0.75,     # Expense categories (right)
            0.60,                                   # Total Expenses (right-center)
            0.40,                                   # Resultado Operacional
            0.55,                                   # Resultado financeiro
            0.25]                                   # Results (far right)
            
        y = [-0.22, 0.0, 0.22, 0.44,                # Revenue sources (left)
            -0.08,                                  # Recurring Revenue (left-center)
            0.40, 0.22,                             # Additional revenues (left-center)
            0.00,                                   # Net Operating Revenue (center)
            -0.05, 0.20, 0.35, 0.50, 0.65, 0.80,    # Expense categories (right)
            0.20,                                   # Total Expenses (right-center)
            0.65,                                   # Resultado Operacional
            0.77,                                   # Resultado financeiro
            0.75]                                   # Results (far right)

        x = [.001 if v==0 else .999 if v==1 else v for v in x]
        y = [.001 if v==0 else .999 if v==1 else v for v in y]

        # Colors that match the original diagram more closely
        # Light blue for revenue flows, green for positive results, red for expenses
        color_for_nodes = [
            'steelblue', 'steelblue', 'steelblue', 'steelblue', 'steelblue',                           # Revenue sources
            'steelblue',                                                                  # Recurring Revenue
            'steelblue', 'steelblue',                                                     # Additional revenues
            'steelblue',                                                                  # Net Operating Revenue
            'steelblue',                                                                  # Net Operating Revenue
            'indianred', 'indianred',
            'indianred', 'indianred', 'indianred', 'indianred', 'indianred',             # Expense categories
            'indianred',                                                                  # Total Expenses
            'indianred', 
            'indianred', 
            'indianred', 'indianred',
            'steelblue'
            # Results
        ]
        
        # Flow colors that match the original diagram more closely
        color_for_links = [
            'LightSkyBlue', 'LightSkyBlue', 'LightSkyBlue', 'LightSkyBlue', 'LightSkyBlue',                 # Revenue source flows
            'LightSkyBlue', 
            'LightSkyBlue', 'LightSkyBlue',                                 # Additional revenue flows
            'LightCoral',                                                                         # Flow to operating result
            'LightCoral',                                                                   # Flow to expenses
            'LightCoral', 'LightCoral', 'LightCoral', 'LightCoral', 'LightCoral',           # Expense category flows
            'LightCoral', 
            'LightCoral',
            'LightCoral'
            # Result flows
        ]

        fig = go.Figure(data=[go.Sankey(
                # The following line hides our labels. They still show
                # when you hover the mouse over an object
                textfont=dict(color="rgba(0,0,0,0)", size=1),
                node = dict(
                    pad = 35,
                    line = dict(color = "white", width = 1),
                    label = label,
                    x = x,
                    y = y
                ),
                link = dict(
                    source = source,
                    target = target,
                    value = value
                    ))])

        # Update our chart
        fig.update_layout(
            hovermode='x',
        )
        # Apply node and link colour choices
        fig.update_traces(node_color = color_for_nodes,
                        link_color = color_for_links)
            
        fig.add_annotation(dict(font=dict(color="black", size=11), x=0.02, y=1.36, xanchor='left', showarrow=False, text='<b>Direitos de<br>transmissão e<br>Premiações</b>'))
        fig.add_annotation(dict(font=dict(color="steelblue", size=11), x=0.06, y=1.20, showarrow=False, text=f'<b>{dfa.iat[0,0]}</b>'))

        fig.add_annotation(dict(font=dict(color="black", size=11), x=0.02, y=1.08, xanchor='left', showarrow=False, text='<b>Publicidade e<br>patrocínio</b>'))
        fig.add_annotation(dict(font=dict(color="steelblue", size=11), x=0.06, y=0.97, showarrow=False, text=f'<b>{dfa.iat[1,0]}</b>'))

        fig.add_annotation(dict(font=dict(color="black", size=11), x=0.02, y=0.87, xanchor='left', showarrow=False, text='<b>Arrecadação<br>de jogos</b>'))
        fig.add_annotation(dict(font=dict(color="steelblue", size=11), x=0.06, y=0.75, showarrow=False, text=f'<b>{dfa.iat[2,0]}</b>'))

        fig.add_annotation(dict(font=dict(color="black", size=11), x=0.04, y=0.62, xanchor='left', showarrow=False, text='<b>Sócio<br>Torcedor</b>'))
        fig.add_annotation(dict(font=dict(color="steelblue", size=11), x=0.065, y=0.54, showarrow=False, text=f'<b>{dfa.iat[3,0]}</b>'))

        fig.add_annotation(dict(font=dict(color="black", size=10), x=0.25, y=1.36, xanchor='left', showarrow=False, text='<b>RECEITA<br>RECORRENTE</b>'))
        fig.add_annotation(dict(font=dict(color="steelblue", size=10), x=0.28, y=1.26, showarrow=False, text=f'<b>{dfa.iat[6,0]}</b>'))
            
        fig.add_annotation(dict(font=dict(color="black", size=11), x=0.29, y=0.88, xanchor='left', showarrow=False, text='<b>Negociação<br>de atletas</b>'))
        fig.add_annotation(dict(font=dict(color="steelblue", size=11), x=0.32, y=0.77, showarrow=False, text=f'<b>{dfa.iat[7,0]}</b>'))

        fig.add_annotation(dict(font=dict(color="black", size=11), x=0.31, y=0.68, xanchor='left', showarrow=False, text='<b>Outras<br>receitas</b>'))
        fig.add_annotation(dict(font=dict(color="steelblue", size=11), x=0.33, y=0.54, showarrow=False, text=f'<b>{dfa.iat[8,0]}</b>'))

        fig.add_annotation(dict(font=dict(color="black", size=10), x=0.40, y=1.27, xanchor='left', showarrow=False, text='<b>RECEITA<br>OPERACIONAL</b>'))
        fig.add_annotation(dict(font=dict(color="steelblue", size=10), x=0.45, y=1.17, showarrow=False, text=f'<b>{dfa.iat[9,0]}</b>'))

        fig.add_annotation(dict(font=dict(color="black", size=10), x=0.56, y=1.12, xanchor='left', showarrow=False, text='<b>DESPESAS</b>'))
        fig.add_annotation(dict(font=dict(color="indianred", size=10), x=0.6, y=1.06, showarrow=False, text=f'<b>{dfa.iat[16,0]}</b>'))

        fig.add_annotation(dict(font=dict(color="black", size=10), x=0.78, y=1.15, xanchor='left', showarrow=False, text='<b>Pessoal e<br>encargos</b>'))
        fig.add_annotation(dict(font=dict(color="indianred", size=10), x=0.82, y=1.05, showarrow=False, text=f'<b>{dfa.iat[10,0]}</b>'))

        fig.add_annotation(dict(font=dict(color="black", size=10), x=0.78, y=0.88, xanchor='left', showarrow=False, text='<b>Direitos de<br>imagem</b>'))
        fig.add_annotation(dict(font=dict(color="indianred", size=10), x=0.83, y=0.78, showarrow=False, text=f'<b>{dfa.iat[11,0]}</b>'))

        fig.add_annotation(dict(font=dict(color="black", size=10), x=0.78, y=0.72, xanchor='left', showarrow=False, text='<b>Despesas com<br>jogos</b>'))
        fig.add_annotation(dict(font=dict(color="indianred", size=10), x=0.84, y=0.59, showarrow=False, text=f'<b>{dfa.iat[12,0]}</b>'))

        fig.add_annotation(dict(font=dict(color="black", size=10), x=0.78, y=0.51, xanchor='left', showarrow=False, text='<b>Despesas gerais<br>e administrativas</b>'))
        fig.add_annotation(dict(font=dict(color="indianred", size=10), x=0.84, y=0.43, showarrow=False, text=f'<b>{dfa.iat[13,0]}</b>'))

        fig.add_annotation(dict(font=dict(color="black", size=10), x=0.78, y=0.36, xanchor='left', showarrow=False, text='<b>Depreciação e<br> Amortização</b>'))
        fig.add_annotation(dict(font=dict(color="indianred", size=10), x=0.84, y=0.26, showarrow=False, text=f'<b>{dfa.iat[14,0]}</b>'))

        fig.add_annotation(dict(font=dict(color="black", size=10), x=0.78, y=0.21, xanchor='left', showarrow=False, text='<b>Outras despesas</b>'))
        fig.add_annotation(dict(font=dict(color="indianred", size=10), x=0.84, y=0.14, showarrow=False, text=f'<b>{dfa.iat[15,0]}</b>'))

        fig.add_annotation(dict(font=dict(color="black", size=10), x=0.35, y=0.50, xanchor='left', showarrow=False, text='<b>RESULTADO<br>OPERACIONAL</b>'))
        fig.add_annotation(dict(font=dict(color="indianred", size=10), x=0.40, y=0.42, showarrow=False, text=f'<b>{dfa.iat[17,0]}</b>'))

        fig.add_annotation(dict(font=dict(color="black", size=10), x=0.50, y=0.35, xanchor='left', showarrow=False, text='<b>RESULTADO<br>FINANCEIRO</b>'))
        fig.add_annotation(dict(font=dict(color="indianred", size=10), x=0.542, y=0.24, showarrow=False, text=f'<b>{dfa.iat[18,0]}</b>'))

        fig.add_annotation(dict(font=dict(color="black", size=10), x=0.21, y=0.40, xanchor='left', showarrow=False, text='<b>RESULTADO</b>'))
        fig.add_annotation(dict(font=dict(color="indianred", size=10), x=0.24, y=0.34, showarrow=False, text=f'<b>{dfa.iat[19,0]}</b>'))
   


        fig.add_layout_image(
            dict(
                source="https://raw.githubusercontent.com/JAmerico1898/Financials-2025/b8aa21e79bd9f585f0acd3daf3d22d6c1002c314/Vitória.png",  # Change this to your image path
                xref="paper",  # Use "paper" for relative positioning within the plot
                yref="paper",
                x=1,  # Bottom left corner
                y=0,  # Bottom left corner
                sizex=0.1,  # Size of the image in x-axis proportion of plot's width
                sizey=0.1,  # Size of the image in y-axis proportion of plot's height
                xanchor="right",  # Anchor point is set to the left of the image
                yanchor="bottom"  # Anchor point is set to the bottom of the image
            )
        )


        st.plotly_chart(fig)

#############################################################################################################################################
#############################################################################################################################################

        #Plotar Gráfico Alternativo
        fontsize=28
        # Player Comparison Data
        markdown_1 = f"<div style='text-align:center;  color: red; font-weight: bold; font-size:{fontsize}px'>{clube:}</div>"
        st.markdown("<h4 style='text-align: center;'>Comparativo com a Média da Liga</h4>", unsafe_allow_html=True)
        st.markdown(markdown_1, unsafe_allow_html=True)
        dfb = df1.iloc[np.r_[0:2, 58, 7, 9, 22, 26], np.r_[0:21]]
        dfb_transposed = dfb.T
        # Set the first row as the new header
        dfb_transposed.columns = dfb_transposed.iloc[0]
        # Drop the first row
        dfb_transposed = dfb_transposed.iloc[1:]
        # Rename the first column to 'clubs'
        dfb_transposed.index.name = 'Clubes'
        dfb = dfb_transposed
        # Renaming Columns
        dfb = dfb.rename(columns={"Receita c/ Publicidade e patrocínio": "Publicidade/patrocínio",
                                  "Receita c/ Match-Day": "Match-Day",
                                  "Receita c/ Sócio-torcedor": "Sócio-Torcedor",
                                  "Receita c/ Negociação de atletas": "Venda de jogadores",
                                  "Receita c/ Transmissão + Premiações": "Transmissão/Premiações",
                                  "RECEITA RECORRENTE": "Receita Recorrente" 
                                  })

        # Preparing the Graph
        params = list(dfb.columns)
        params = params[0:]

        #Preparing Data
        ranges = []
        a_values = []
        b_values = []

        for x in params:
            a = min(dfb[params][x])
            a = a
            b = max(dfb[params][x])
            b = b
            ranges.append((a, b))

        for x in range(len(dfb.index)):
            if dfb.index[x] == clube:
                a_values = dfb.iloc[x].values.tolist()
            if dfb.index[x] == 'Média da Liga':
                b_values = dfb.iloc[x].values.tolist()
                                    
        a_values = a_values[0:]
        b_values = b_values[0:]

        # Rounding values to no decimal places
        a_values = [round(value) for value in a_values]
        b_values = [round(value) for value in b_values]

        values = [a_values, b_values]

        #Plotting Data
        title = dict(
            title_name = clube,
            title_color = '#B6282F',
            subtitle_name = "(R$ milhões)",
            subtitle_color = '#B6282F',
            title_name_2 = 'Média da Liga',
            title_color_2 = '#344D94',
            subtitle_name_2 = "(R$ milhões)",
            subtitle_color_2 = '#344D94',
            title_fontsize = 18,
        ) 

        ## instantiate object
        radar = Radar()

        ## instantiate object -- changing fontsize
        radar=Radar(fontfamily='Cursive', range_fontsize=14)
        radar=Radar(fontfamily='Cursive', label_fontsize=14)

        fig,ax = radar.plot_radar(ranges=ranges,params=params,values=values,radar_color=['#B6282F', '#344D94'], dpi=600, alphas=[.6,.5], title=title, compare=True)
        #fig,ax = radar.plot_radar(ranges=ranges,params=params,values=values,radar_color=['#7eb6e0', '#f77b72'], dpi=600, alphas=[.8,.6], title=title, compare=True)
        st.pyplot(fig)

#############################################################################################################################################
#############################################################################################################################################
#############################################################################################################################################
#############################################################################################################################################


    elif clube == "Cruzeiro":
        
        def display_club_image(clube):
            try:
                # Get the image URL for the selected club
                club_image_url = club_image_paths.get(clube)
                
                if club_image_url:
                    # Center-align and display the image
                    st.markdown(
                        f"""
                        <div style="display: flex; justify-content: center;">
                            <img src="{club_image_url}" width="150">
                        </div>
                        """,
                        unsafe_allow_html=True
                    )
                else:
                    st.warning(f"Imagem não encontrada para o clube: {clube}")
            except Exception as e:
                st.error(f"Erro ao exibir a imagem: {e}")

        display_club_image(clube)

###############################################################################################################################################
###############################################################################################################################################
###############################################################################################################################################
###############################################################################################################################################

        # Custom CSS for better formatting
        st.markdown("""
        <style>
            .main {
                padding: 2rem;
            }
            .stAlert {
                background-color: #f8f9fa;
                padding: 1rem;
                border-radius: 0.5rem;
                border-left: 5px solid #ff4b4b;
            }
            .info-box {
                background-color: #e6f3ff;
                padding: 1rem;
                border-radius: 0.5rem;
                border-left: 5px solid #4B8BF5;
                margin-bottom: 1rem;
            }
            h1, h2, h3 {
                color: #1E3A8A;
            }
            .katex {
                font-size: 1.1em;
            }
        </style>
        """, unsafe_allow_html=True)

        st.markdown("""
        <div class="info-box">
        <h4>Resumo:</h4>
        <p>2024 marcou uma nova fase para a Cruzeiro SAF, já sob controle do investidor Pedro Lourenço. 
        O ano foi caracterizado por forte adiantamento para futuro aumento de capital (R$ 200,8 mi em AFAC) 
        e aceleração dos investimentos em elenco e infraestrutura, mas também por uma reversão do lucro 
        extraordinário de 2023 para um prejuízo contábil relevante em 2024. O auditor emitiu opinião com ressalva 
        relacionada ao tratamento inadequado do ágio decorrente da aquisição da SAF.</p>
        <h4>Destaques:</h4>
        <p>1. A Receita de R$ 345 mi fica bem distante das Despesas (R$ 491 mi) e do Resultado Financeiro (-R$ 24 mi),
        resultando em prejuízo de R$ 170 mi. </p>
        <p>2. A Geração de Caixa Operacional de R$ 284 mi, não é suficiente para honrar os pagamentos de direitos
        federativos (R$ 332 mi contra apenas R$ 5,5 mi em 2023) e investimentos em infraestrutura R$ 64 mi. </p>
        <p>3. O modelo de negócios exige capital frequente do controlador e carrega obrigações expressivas com a RJ 
        da associação. </p>
        <p><b>Nota:</b> Utiliza apenas dados das demonstrações financeiras auditadas.</p>
        </div>
        """, unsafe_allow_html=True)

###############################################################################################################################################
###############################################################################################################################################
###############################################################################################################################################
###############################################################################################################################################
        
        st.markdown("<h4 style='text-align: center;  color: black;'>Demonstração de Resultado</b></h4>", unsafe_allow_html=True)
        st.markdown("<h5 style='text-align: center;  color: black;'>(em R$ milhões)<br></b></h5>", unsafe_allow_html=True)
        st.markdown("---")

        # Define labels, sources and targets (same as original)
        label = ["Direitos de transmissão", "Publicidade e patrocínio", "Arrecadação de jogos",
                 "Sócio-Torcedor", "Premiações", "Licenciamento da marca", 
                 "RECEITA RECORRENTE", "Negociação de atletas", "Outras receitas", 
                 "RECEITA OPERACIONAL", "Pessoal e encargos", "Direitos de Imagem", 
                 "Despesas com jogos", "Despesas gerais e administrativas", "Depreciação amortização", 
                 "Outras despesas", "DESPESAS", "RESULTADO OPERACIONAL", 
                 "Resultado financeiro", "RESULTADO"]

        source =               [0, 1, 2, 3, 5, 6, 7, 9,  9, 16, 16, 16, 16, 16, 16, 16, 18, 17] #18 sources
        target =               [6, 6, 6, 6, 6, 9, 9, 8, 16, 10, 11, 12, 13, 14, 15, 17, 19, 19] #18 targets
        value = df.iloc[np.r_[  0, 1, 2, 3, 5, 6, 7, 8,  9, 10, 11, 12, 13, 14, 15, 17, 18, 17], np.r_[8]].astype(int) #18 values
        dfa = df.iloc[:, np.r_[8]].astype(int)
        link = dict(source=source, target=target, value=value, color=color_link)
        node = dict(label = label, pad=35, thickness=20)
        data = go.Sankey(link=link, node=node)

        # Using positioning more similar to your original layout
        # These coordinates preserve the general structure but with slight improvements
        x = [0.15, 0.15, 0.15, 0.15, 0.15,              # Revenue sources (left)
            0.29,                                   # Recurring Revenue (left-center)
            0.375, 0.375,                           # Additional revenues (left-center)
            0.425,                                   # Net Operating Revenue (center)
            0.75, 0.75, 0.75, 0.75, 0.75,           # Expense categories (right)
            0.55,                                   # Total Expenses (right-center)
            0.40,                                   # Resultado Operacional
            0.55,                                   # Resultado financeiro
            0.25]                                   # Results (far right)
            
        y = [-0.22, 0.0, 0.22, 0.44, 0.66,            # Revenue sources (left)
            -0.00,                                  # Recurring Revenue (left-center)
            0.22, 0.40,                             # Additional revenues (left-center)
            0.00,                                   # Net Operating Revenue (center)
            +0.15, 0.30, 0.45, 0.60, 0.75,          # Expense categories (right)
            0.20,                                   # Total Expenses (right-center)
            0.65,                                  # Resultado Operacional
            0.77,                                  # Resultado financeiro
            0.75]                                   # Results (far right)

        x = [.001 if v==0 else .999 if v==1 else v for v in x]
        y = [.001 if v==0 else .999 if v==1 else v for v in y]

        # Colors that match the original diagram more closely
        # Light blue for revenue flows, green for positive results, red for expenses
        color_for_nodes = [
            'steelblue', 'steelblue', 'steelblue', 'steelblue', 'steelblue',                           # Revenue sources
            'steelblue',                                                                  # Recurring Revenue
            'steelblue', 'steelblue',                                                     # Additional revenues
            'indianred',                                                                  # Net Operating Revenue
            'steelblue', 
            'indianred', 'indianred', 'indianred', 'indianred', 'indianred',            # Expense categories
            'indianred',                                                                  # Total Expenses
            'indianred', 
            'indianred', 
            'indianred', 'indianred',
            'steelblue'
            # Results
        ]
        
        # Flow colors that match the original diagram more closely
        color_for_links = [
            'LightSkyBlue', 'LightSkyBlue', 'LightSkyBlue', 'LightSkyBlue', 'LightSkyBlue',                # Revenue source flows
            'LightSkyBlue', 'LightSkyBlue', 'LightCoral',                                 # Additional revenue flows
            'LightSkyBlue',                                                                         # Flow to operating result
            'LightCoral',                                                                   # Flow to expenses
            'LightCoral', 'LightCoral', 'LightCoral', 'LightCoral', 'LightCoral',           # Expense category flows
            'LightCoral', 
            'LightCoral',
            'LightCoral'
            # Result flows
        ]

        fig = go.Figure(data=[go.Sankey(
                # The following line hides our labels. They still show
                # when you hover the mouse over an object
                textfont=dict(color="rgba(0,0,0,0)", size=1),
                node = dict(
                    pad = 35,
                    line = dict(color = "white", width = 1),
                    label = label,
                    x = x,
                    y = y
                ),
                link = dict(
                    source = source,
                    target = target,
                    value = value
                    ))])

        # Update our chart
        fig.update_layout(
            hovermode='x',
        )
        # Apply node and link colour choices
        fig.update_traces(node_color = color_for_nodes,
                        link_color = color_for_links)
            
        fig.add_annotation(dict(font=dict(color="black", size=11), x=0.02, y=1.36, xanchor='left', showarrow=False, text='<b>Direitos de<br>transmissão e<br>Premiações</b>'))
        fig.add_annotation(dict(font=dict(color="steelblue", size=11), x=0.06, y=1.20, showarrow=False, text=f'<b>{dfa.iat[0,0]}</b>'))

        fig.add_annotation(dict(font=dict(color="black", size=11), x=0.02, y=1.08, xanchor='left', showarrow=False, text='<b>Publicidade e<br>patrocínio</b>'))
        fig.add_annotation(dict(font=dict(color="steelblue", size=11), x=0.06, y=0.97, showarrow=False, text=f'<b>{dfa.iat[1,0]}</b>'))

        fig.add_annotation(dict(font=dict(color="black", size=11), x=0.02, y=0.87, xanchor='left', showarrow=False, text='<b>Arrecadação<br>de jogos</b>'))
        fig.add_annotation(dict(font=dict(color="steelblue", size=11), x=0.06, y=0.75, showarrow=False, text=f'<b>{dfa.iat[2,0]}</b>'))

        fig.add_annotation(dict(font=dict(color="black", size=11), x=0.04, y=0.62, xanchor='left', showarrow=False, text='<b>Sócio<br>Torcedor</b>'))
        fig.add_annotation(dict(font=dict(color="steelblue", size=11), x=0.065, y=0.54, showarrow=False, text=f'<b>{dfa.iat[3,0]}</b>'))

        fig.add_annotation(dict(font=dict(color="black", size=10), x=0.25, y=1.255, xanchor='left', showarrow=False, text='<b>RECEITA<br>RECORRENTE</b>'))
        fig.add_annotation(dict(font=dict(color="steelblue", size=10), x=0.28, y=1.16, showarrow=False, text=f'<b>{dfa.iat[6,0]}</b>'))
            
        fig.add_annotation(dict(font=dict(color="black", size=11), x=0.04, y=0.41, xanchor='left', showarrow=False, text='<b>Licenciamento<br>da marca</b>'))
        fig.add_annotation(dict(font=dict(color="steelblue", size=11), x=0.065, y=0.30, showarrow=False, text=f'<b>{dfa.iat[5,0]}</b>'))

        fig.add_annotation(dict(font=dict(color="black", size=11), x=0.26, y=0.87, xanchor='left', showarrow=False, text='<b>Negociação<br>de atletas</b>'))
        fig.add_annotation(dict(font=dict(color="steelblue", size=11), x=0.29, y=0.75, showarrow=False, text=f'<b>{dfa.iat[7,0]}</b>'))

        fig.add_annotation(dict(font=dict(color="black", size=11), x=0.26, y=0.67, xanchor='left', showarrow=False, text='<b>Ajuste<br>na Receita</b>'))
        fig.add_annotation(dict(font=dict(color="indianred", size=11), x=0.29, y=0.53, showarrow=False, text=f'<b>{dfa.iat[7,0]}</b>'))

        fig.add_annotation(dict(font=dict(color="black", size=10), x=0.375, y=1.25, xanchor='left', showarrow=False, text='<b>RECEITA<br>OPERACIONAL</b>'))
        fig.add_annotation(dict(font=dict(color="steelblue", size=10), x=0.425, y=1.15, showarrow=False, text=f'<b>{dfa.iat[9,0]}</b>'))

        fig.add_annotation(dict(font=dict(color="black", size=10), x=0.52, y=1.12, xanchor='left', showarrow=False, text='<b>DESPESAS</b>'))
        fig.add_annotation(dict(font=dict(color="indianred", size=10), x=0.55, y=1.06, showarrow=False, text=f'<b>{dfa.iat[16,0]}</b>'))

        fig.add_annotation(dict(font=dict(color="black", size=10), x=0.78, y=0.93, xanchor='left', showarrow=False, text='<b>Pessoal e<br>encargos</b>'))
        fig.add_annotation(dict(font=dict(color="indianred", size=10), x=0.82, y=0.83, showarrow=False, text=f'<b>{dfa.iat[10,0]}</b>'))

        fig.add_annotation(dict(font=dict(color="black", size=10), x=0.78, y=0.78, xanchor='left', showarrow=False, text='<b>Despesas com<br>jogos</b>'))
        fig.add_annotation(dict(font=dict(color="indianred", size=10), x=0.83, y=0.68, showarrow=False, text=f'<b>{dfa.iat[12,0]}</b>'))

        fig.add_annotation(dict(font=dict(color="black", size=10), x=0.78, y=0.58, xanchor='left', showarrow=False, text='<b>Despesas gerais<br>e administrativas</b>'))
        fig.add_annotation(dict(font=dict(color="indianred", size=10), x=0.83, y=0.50, showarrow=False, text=f'<b>{dfa.iat[13,0]}</b>'))

        fig.add_annotation(dict(font=dict(color="black", size=10), x=0.78, y=0.41, xanchor='left', showarrow=False, text='<b>Depreciação<br>Amortização</b>'))
        fig.add_annotation(dict(font=dict(color="indianred", size=10), x=0.84, y=0.30, showarrow=False, text=f'<b>{dfa.iat[14,0]}</b>'))

        fig.add_annotation(dict(font=dict(color="black", size=10), x=0.78, y=0.25, xanchor='left', showarrow=False, text='<b>Outras despesas</b>'))
        fig.add_annotation(dict(font=dict(color="indianred", size=10), x=0.84, y=0.18, showarrow=False, text=f'<b>{dfa.iat[15,0]}</b>'))

        fig.add_annotation(dict(font=dict(color="black", size=10), x=0.35, y=0.51, xanchor='left', showarrow=False, text='<b>RESULTADO<br>OPERACIONAL</b>'))
        fig.add_annotation(dict(font=dict(color="indianred", size=10), x=0.40, y=0.43, showarrow=False, text=f'<b>{dfa.iat[17,0]}</b>'))

        fig.add_annotation(dict(font=dict(color="black", size=10), x=0.51, y=0.36, xanchor='left', showarrow=False, text='<b>RESULTADO<br>FINANCEIRO</b>'))
        fig.add_annotation(dict(font=dict(color="indianred", size=10), x=0.55, y=0.25, showarrow=False, text=f'<b>{dfa.iat[18,0]}</b>'))

        fig.add_annotation(dict(font=dict(color="black", size=10), x=0.21, y=0.39, xanchor='left', showarrow=False, text='<b>RESULTADO</b>'))
        fig.add_annotation(dict(font=dict(color="indianred", size=10), x=0.235, y=0.30, showarrow=False, text=f'<b>{dfa.iat[19,0]}</b>'))

        st.plotly_chart(fig)

#############################################################################################################################################
#############################################################################################################################################
#############################################################################################################################################
#############################################################################################################################################

        #Plotar Gráfico Alternativo
        fontsize=28
        # Player Comparison Data
        markdown_1 = f"<div style='text-align:center;  color: blue; font-weight: bold; font-size:{fontsize}px'>{clube:}</div>"
        st.markdown("<h4 style='text-align: center;'>Comparativo com a Média da Liga</h4>", unsafe_allow_html=True)
        st.markdown(markdown_1, unsafe_allow_html=True)
        dfb = df1.iloc[np.r_[0:2, 58, 7, 9, 22, 26], np.r_[0:21]]
        dfb_transposed = dfb.T
        # Set the first row as the new header
        dfb_transposed.columns = dfb_transposed.iloc[0]
        # Drop the first row
        dfb_transposed = dfb_transposed.iloc[1:]
        # Rename the first column to 'clubs'
        dfb_transposed.index.name = 'Clubes'
        dfb = dfb_transposed
        # Renaming Columns
        dfb = dfb.rename(columns={"Receita c/ Publicidade e patrocínio": "Publicidade/patrocínio",
                                  "Receita c/ Match-Day": "Match-Day",
                                  "Receita c/ Sócio-torcedor": "Sócio-Torcedor",
                                  "Receita c/ Negociação de atletas": "Venda de jogadores",
                                  "Receita c/ Transmissão + Premiações": "Transmissão/Premiações",
                                  "RECEITA RECORRENTE": "Receita Recorrente" 
                                  })

        # Preparing the Graph
        params = list(dfb.columns)
        params = params[0:]

        #Preparing Data
        ranges = []
        a_values = []
        b_values = []

        for x in params:
            a = min(dfb[params][x])
            a = a
            b = max(dfb[params][x])
            b = b
            ranges.append((a, b))

        for x in range(len(dfb.index)):
            if dfb.index[x] == clube:
                a_values = dfb.iloc[x].values.tolist()
            if dfb.index[x] == 'Média da Liga':
                b_values = dfb.iloc[x].values.tolist()
                                    
        a_values = a_values[0:]
        b_values = b_values[0:]

        # Rounding values to no decimal places
        a_values = [round(value) for value in a_values]
        b_values = [round(value) for value in b_values]

        values = [a_values, b_values]

        #Plotting Data
        title = dict(
            title_name = clube,
            title_color = '#B6282F',
            subtitle_name = "(R$ milhões)",
            subtitle_color = '#B6282F',
            title_name_2 = 'Média da Liga',
            title_color_2 = '#344D94',
            subtitle_name_2 = "(R$ milhões)",
            subtitle_color_2 = '#344D94',
            title_fontsize = 18,
        ) 

        ## instantiate object
        radar = Radar()

        ## instantiate object -- changing fontsize
        radar=Radar(fontfamily='Cursive', range_fontsize=14)
        radar=Radar(fontfamily='Cursive', label_fontsize=14)

        fig,ax = radar.plot_radar(ranges=ranges,params=params,values=values,radar_color=['#B6282F', '#344D94'], dpi=600, alphas=[.6,.5], title=title, compare=True)
        #fig,ax = radar.plot_radar(ranges=ranges,params=params,values=values,radar_color=['#7eb6e0', '#f77b72'], dpi=600, alphas=[.8,.6], title=title, compare=True)
        st.pyplot(fig)


#############################################################################################################################################
#############################################################################################################################################
#############################################################################################################################################
#############################################################################################################################################


        #Plotar Gráfico Alternativo - 2024 x 2023
        fontsize=28
        # Player Comparison Data
        markdown_1 = f"<div style='text-align:center;  color: blue; font-weight: bold; font-size:{fontsize}px'>{clube:}</div>"
        st.markdown("<h4 style='text-align: center;'>Comparativo 2024 vs 2023</h4>", unsafe_allow_html=True)
        st.markdown(markdown_1, unsafe_allow_html=True)
        dfb = df1.iloc[np.r_[0:2, 58, 7, 9, 22, 26], np.r_[0, 8]]
        dfb = dfb.rename(columns={"Cruzeiro": "Cruzeiro - 2024"})
        dfb_2023 = df1_2023.iloc[np.r_[0:2, 58, 7, 9, 22, 26], np.r_[0, 8]]
        dfb_2023 = dfb_2023.rename(columns={"Cruzeiro": "Cruzeiro - 2023"})
        # Fazendo o merge com base na coluna "Clubes"
        dfb = pd.merge(dfb, dfb_2023, on="Clubes", how="inner")  # você pode trocar o "how" se quiser
        
        dfb_transposed = dfb.T
        # Set the first row as the new header
        dfb_transposed.columns = dfb_transposed.iloc[0]
        # Drop the first row
        dfb_transposed = dfb_transposed.iloc[1:]
        # Rename the first column to 'clubs'
        dfb_transposed.index.name = 'Clubes'
        dfb = dfb_transposed
        # Renaming Columns
        dfb = dfb.rename(columns={"Receita c/ Publicidade e patrocínio": "Publicidade/patrocínio",
                                  "Receita c/ Match-Day": "Match-Day",
                                  "Receita c/ Sócio-torcedor": "Sócio-Torcedor",
                                  "Receita c/ Negociação de atletas": "Venda de jogadores",
                                  "Receita c/ Direitos de transmissão": "Direitos de transmissão" 
                                  })

        teste_2024 = pd.read_csv("índices.csv")
        teste_2024 = teste_2024.iloc[np.r_[0:2, 58, 7, 9, 22, 26], np.r_[0: 20]]
        teste_2024_transposed = teste_2024.T
        # Set the first row as the new header
        teste_2024_transposed.columns = teste_2024_transposed.iloc[0]
        # Drop the first row
        teste_2024_transposed = teste_2024_transposed.iloc[1:]
        # Rename the first column to 'clubs'
        teste_2024_transposed.index.name = 'Clubes'
        teste_2024 = teste_2024_transposed
        # Renaming Columns
        teste_2024 = teste_2024.rename(columns={"Receita c/ Publicidade e patrocínio": "Publicidade/patrocínio",
                                  "Receita c/ Match-Day": "Match-Day",
                                  "Receita c/ Sócio-torcedor": "Sócio-Torcedor",
                                  "Receita c/ Negociação de atletas": "Venda de jogadores",
                                  "Receita c/ Direitos de transmissão": "Direitos de transmissão" 
                                  })

        teste_2023 = pd.read_csv("índices_2023.csv")
        teste_2023 = teste_2023.iloc[np.r_[0:2, 58, 7, 9, 22, 26], np.r_[0: 20]]
        teste_2023_transposed = teste_2023.T
        # Set the first row as the new header
        teste_2023_transposed.columns = teste_2023_transposed.iloc[0]
        # Drop the first row
        teste_2023_transposed = teste_2023_transposed.iloc[1:]
        # Rename the first column to 'clubs'
        teste_2023_transposed.index.name = 'Clubes'
        teste_2023 = teste_2023_transposed
        # Renaming Columns
        teste_2023 = teste_2023.rename(columns={"Receita c/ Publicidade e patrocínio": "Publicidade/patrocínio",
                                  "Receita c/ Match-Day": "Match-Day",
                                  "Receita c/ Sócio-torcedor": "Sócio-Torcedor",
                                  "Receita c/ Negociação de atletas": "Venda de jogadores",
                                  "Receita c/ Direitos de transmissão": "Direitos de transmissão" 
                                  })
    
        # Preparing the Graph
        params = list(dfb.columns)
        params = params[0:]
        #Preparing Data
        ranges = []
        a_values = []
        b_values = []

        for x in range(len(params)):
            # Combine as duas séries
            combined_values = pd.concat([teste_2023[params].iloc[:, x], teste_2024[params].iloc[:, x]])
            
            # Encontre o mínimo e o máximo
            a = combined_values.min()
            b = combined_values.max()
        
            ranges.append((a, b))

        for x in range(len(dfb.index)):
            if dfb.index[x] == "Cruzeiro - 2024":
                a_values = dfb.iloc[x].values.tolist()
            if dfb.index[x] == "Cruzeiro - 2023":
                b_values = dfb.iloc[x].values.tolist()
                                    
        a_values = a_values[0:]
        b_values = b_values[0:]

        # Rounding values to no decimal places
        a_values = [round(value) for value in a_values]
        b_values = [round(value) for value in b_values]

        values = [a_values, b_values]

        #Plotting Data
        title = dict(
            title_name = "Receitas e Despesas/2024",
            title_color = '#B6282F',
            subtitle_name = "(R$ milhões)",
            subtitle_color = '#B6282F',
            title_name_2 = 'Receitas e Despesas/2023',
            title_color_2 = '#344D94',
            subtitle_name_2 = "(R$ milhões)",
            subtitle_color_2 = '#344D94',
            title_fontsize = 18,
        ) 

        ## instantiate object
        radar = Radar()

        ## instantiate object -- changing fontsize
        radar=Radar(fontfamily='Cursive', range_fontsize=14)
        radar=Radar(fontfamily='Cursive', label_fontsize=14)

        fig,ax = radar.plot_radar(ranges=ranges,params=params,values=values,radar_color=['#B6282F', '#344D94'], dpi=600, alphas=[.6,.5], title=title, compare=True)
        st.pyplot(fig)


#############################################################################################################################################
#############################################################################################################################################
#############################################################################################################################################
#############################################################################################################################################


    elif clube == "Cuiabá":
        
        def display_club_image(clube):
            try:
                # Get the image URL for the selected club
                club_image_url = club_image_paths.get(clube)
                
                if club_image_url:
                    # Center-align and display the image
                    st.markdown(
                        f"""
                        <div style="display: flex; justify-content: center;">
                            <img src="{club_image_url}" width="150">
                        </div>
                        """,
                        unsafe_allow_html=True
                    )
                else:
                    st.warning(f"Imagem não encontrada para o clube: {clube}")
            except Exception as e:
                st.error(f"Erro ao exibir a imagem: {e}")

        display_club_image(clube)
        
        # Custom CSS for better formatting
        st.markdown("""
        <style>
            .main {
                padding: 2rem;
            }
            .stAlert {
                background-color: #f8f9fa;
                padding: 1rem;
                border-radius: 0.5rem;
                border-left: 5px solid #ff4b4b;
            }
            .info-box {
                background-color: #e6f3ff;
                padding: 1rem;
                border-radius: 0.5rem;
                border-left: 5px solid #4B8BF5;
                margin-bottom: 1rem;
            }
            h1, h2, h3 {
                color: #1E3A8A;
            }
            .katex {
                font-size: 1.1em;
            }
        </style>
        """, unsafe_allow_html=True)

        st.markdown("""
        <div class="info-box">
        <h4>Resumo:</h4>
        <p>O Cuiabá não disponibilizou as notas explicativas, prejudicando a análise. </p>
        </div>
        """, unsafe_allow_html=True)

###############################################################################################################################################
###############################################################################################################################################
###############################################################################################################################################
###############################################################################################################################################
        
        st.markdown("<h4 style='text-align: center;  color: black;'>Demonstração de Resultado</b></h4>", unsafe_allow_html=True)
        st.markdown("<h5 style='text-align: center;  color: black;'>(em R$ milhões)<br></b></h5>", unsafe_allow_html=True)
        st.markdown("---")

        # Define labels, sources and targets (same as original)
        label = ["Direitos de transmissão", "Publicidade e patrocínio", "Arrecadação de jogos",
                 "Sócio-Torcedor", "Premiações", "Licenciamento da marca", 
                 "RECEITA RECORRENTE", "Negociação de atletas", "Outras receitas", 
                 "RECEITA OPERACIONAL", "Pessoal e encargos", "Direitos de Imagem", 
                 "Despesas com jogos", "Despesas gerais e administrativas", "Depreciação amortização", 
                 "Outras despesas", "DESPESAS", "RESULTADO OPERACIONAL", 
                 "Resultado financeiro", "RESULTADO"]

        source =               [0, 1, 2, 3, 5, 6, 7, 9,  9, 16, 16, 16, 16, 16, 16,  9, 17, 18] #18 sources
        target =               [6, 6, 6, 6, 6, 9, 9, 8, 16, 10, 11, 12, 13, 14, 15, 17, 19, 19] #18 targets
        value = df.iloc[np.r_[  0, 1, 2, 3, 5, 6, 7, 8, 16, 10, 11, 12, 13, 14, 15, 17, 17, 18], np.r_[9]].astype(int) #18 values
        dfa = df.iloc[:, np.r_[9]].astype(int)
        link = dict(source=source, target=target, value=value, color=color_link)
        node = dict(label = label, pad=35, thickness=20)
        data = go.Sankey(link=link, node=node)

        # Using positioning more similar to your original layout
        # These coordinates preserve the general structure but with slight improvements
        x = [0.15, 0.15, 0.15, 0.15, 0.15,          # Revenue sources (left)
            0.30,                                   # Recurring Revenue (left-center)
            0.375, 0.375,                           # Additional revenues (left-center)
            0.45,                                   # Net Operating Revenue (center)
            0.75, 0.75, 0.75, 0.75, 0.75,           # Expense categories (right)
            0.60,                                   # Total Expenses (right-center)
            0.70,                                   # Resultado Operacional
            0.75,                                   # Resultado financeiro
            0.85]                                   # Results (far right)
            
        y = [-0.22, 0, 0.22, 0.44, 0.66,            # Revenue sources (left)
            -0.08,                                  # Recurring Revenue (left-center)
            0.22, 0.40,                             # Additional revenues (left-center)
            0.00,                                   # Net Operating Revenue (center)
            0.15, 0.35, 0.55, 0.75, 0.95,            # Expense categories (right)
            0.30,                                   # Total Expenses (right-center)
            -0.17,                                  # Resultado Operacional
            -0.05,                                   # Resultado financeiro
            -0.15]                                   # Results (far right)

        x = [.001 if v==0 else .999 if v==1 else v for v in x]
        y = [.001 if v==0 else .999 if v==1 else v for v in y]

        # Colors that match the original diagram more closely
        # Light blue for revenue flows, green for positive results, red for expenses
        color_for_nodes = [
            'steelblue', 'steelblue', 'steelblue', 'steelblue', 'steelblue',                           # Revenue sources
            'steelblue',                                                                  # Recurring Revenue
            'steelblue', 'steelblue',                                                     # Additional revenues
            'indianred',                                                                  # Net Operating Revenue
            'steelblue',                                                                  # Net Operating Revenue
            'indianred', 'indianred',
            'indianred', 'indianred', 'indianred', 'indianred', 'indianred',             # Expense categories
            'limegreen',                                                                  # Total Expenses
            'limegreen', 
            'limegreen', 
            # Results
        ]
        
        # Flow colors that match the original diagram more closely
        color_for_links = [
            'LightSkyBlue', 'LightSkyBlue', 'LightSkyBlue', 'LightSkyBlue', 'LightSkyBlue',                 # Revenue source flows
            'LightSkyBlue', 
            'LightSkyBlue', 'LightCoral',                                 # Additional revenue flows
            'LightCoral',                                                                         # Flow to operating result
            'LightCoral',                                                                   # Flow to expenses
            'LightCoral', 'LightCoral', 'LightCoral', 'LightCoral', 'LightCoral',           # Expense category flows
            'lime', 
            'lime',
            'lime'
            # Result flows
        ]

        fig = go.Figure(data=[go.Sankey(
                # The following line hides our labels. They still show
                # when you hover the mouse over an object
                textfont=dict(color="rgba(0,0,0,0)", size=1),
                node = dict(
                    pad = 35,
                    line = dict(color = "white", width = 1),
                    label = label,
                    x = x,
                    y = y
                ),
                link = dict(
                    source = source,
                    target = target,
                    value = value
                    ))])

        # Update our chart
        fig.update_layout(
            hovermode='x',
        )
        # Apply node and link colour choices
        fig.update_traces(node_color = color_for_nodes,
                        link_color = color_for_links)
            
        fig.add_annotation(dict(font=dict(color="black", size=11), x=0.02, y=1.32, xanchor='left', showarrow=False, text='<b>Direitos de<br>transmissão e<br>Premiações</b>'))
        fig.add_annotation(dict(font=dict(color="steelblue", size=11), x=0.06, y=1.17, showarrow=False, text=f'<b>{dfa.iat[0,0]}</b>'))

        fig.add_annotation(dict(font=dict(color="black", size=11), x=0.02, y=1.10, xanchor='left', showarrow=False, text='<b>Publicidade e<br>patrocínio</b>'))
        fig.add_annotation(dict(font=dict(color="steelblue", size=11), x=0.06, y=0.98, showarrow=False, text=f'<b>{dfa.iat[1,0]}</b>'))

        fig.add_annotation(dict(font=dict(color="black", size=11), x=0.02, y=0.88, xanchor='left', showarrow=False, text='<b>Arrecadação<br>de jogos</b>'))
        fig.add_annotation(dict(font=dict(color="steelblue", size=11), x=0.06, y=0.76, showarrow=False, text=f'<b>{dfa.iat[2,0]}</b>'))

        fig.add_annotation(dict(font=dict(color="black", size=11), x=0.04, y=0.60, xanchor='left', showarrow=False, text='<b>Sócio<br>Torcedor</b>'))
        fig.add_annotation(dict(font=dict(color="steelblue", size=11), x=0.06, y=0.51, showarrow=False, text=f'<b>{dfa.iat[2,0]}</b>'))

        fig.add_annotation(dict(font=dict(color="black", size=11), x=0.02, y=0.40, xanchor='left', showarrow=False, text='<b>Licenciamento<br>da Marca</b>'))
        fig.add_annotation(dict(font=dict(color="steelblue", size=11), x=0.06, y=0.28, showarrow=False, text=f'<b>{dfa.iat[2,0]}</b>'))

        fig.add_annotation(dict(font=dict(color="black", size=10), x=0.25, y=1.32, xanchor='left', showarrow=False, text='<b>RECEITA<br>RECORRENTE</b>'))
        fig.add_annotation(dict(font=dict(color="steelblue", size=10), x=0.285, y=1.22, showarrow=False, text=f'<b>{dfa.iat[6,0]}</b>'))

        fig.add_annotation(dict(font=dict(color="black", size=11), x=0.29, y=0.62, xanchor='left', showarrow=False, text='<b>Outras<br>receitas</b>'))
        fig.add_annotation(dict(font=dict(color="indianred", size=11), x=0.305, y=0.53, showarrow=False, text=f'<b>{dfa.iat[8,0]}</b>'))
            
        fig.add_annotation(dict(font=dict(color="black", size=11), x=0.26, y=0.88, xanchor='left', showarrow=False, text='<b>Negociação<br>de Atletas</b>'))
        fig.add_annotation(dict(font=dict(color="steelblue", size=11), x=0.29, y=0.78, showarrow=False, text=f'<b>{dfa.iat[7,0]}</b>'))

        fig.add_annotation(dict(font=dict(color="black", size=10), x=0.40, y=1.33, xanchor='left', showarrow=False, text='<b>RECEITA<br>OPERACIONAL</b>'))
        fig.add_annotation(dict(font=dict(color="steelblue", size=10), x=0.45, y=1.22, showarrow=False, text=f'<b>{dfa.iat[9,0]}</b>'))

        fig.add_annotation(dict(font=dict(color="black", size=10), x=0.56, y=0.91, xanchor='left', showarrow=False, text='<b>DESPESAS</b>'))
        fig.add_annotation(dict(font=dict(color="indianred", size=10), x=0.6, y=0.87, showarrow=False, text=f'<b>{dfa.iat[16,0]}</b>'))

        fig.add_annotation(dict(font=dict(color="black", size=10), x=0.78, y=0.94, xanchor='left', showarrow=False, text='<b>Pessoal e<br>encargos</b>'))
        fig.add_annotation(dict(font=dict(color="indianred", size=10), x=0.82, y=0.84, showarrow=False, text=f'<b>{dfa.iat[10,0]}</b>'))

        fig.add_annotation(dict(font=dict(color="black", size=10), x=0.78, y=0.74, xanchor='left', showarrow=False, text='<b>Despesa <br>com jogos</b>'))
        fig.add_annotation(dict(font=dict(color="indianred", size=10), x=0.82, y=0.61, showarrow=False, text=f'<b>{dfa.iat[12,0]}</b>'))

        fig.add_annotation(dict(font=dict(color="black", size=10), x=0.78, y=0.48, xanchor='left', showarrow=False, text='<b>Despesas gerais<br>e administrativas</b>'))
        fig.add_annotation(dict(font=dict(color="indianred", size=10), x=0.84, y=0.40, showarrow=False, text=f'<b>{dfa.iat[13,0]}</b>'))

        fig.add_annotation(dict(font=dict(color="black", size=10), x=0.78, y=0.22, xanchor='left', showarrow=False, text='<b>Depreciação e <br>amortização</b>'))
        fig.add_annotation(dict(font=dict(color="indianred", size=10), x=0.84, y=0.16, showarrow=False, text=f'<b>{dfa.iat[14,0]}</b>'))

        fig.add_annotation(dict(font=dict(color="black", size=10), x=0.78, y=0.00, xanchor='left', showarrow=False, text='<b>Despesas gerais<br>e administrativas</b>'))
        fig.add_annotation(dict(font=dict(color="indianred", size=10), x=0.84, y=-0.06, showarrow=False, text=f'<b>{dfa.iat[15,0]}</b>'))

        fig.add_annotation(dict(font=dict(color="black", size=10), x=0.645, y=1.38, xanchor='left', showarrow=False, text='<b>RESULTADO<br>OPERACIONAL</b>'))
        fig.add_annotation(dict(font=dict(color="Limegreen", size=10), x=0.71, y=1.28, showarrow=False, text=f'<b>{dfa.iat[17,0]}</b>'))

        fig.add_annotation(dict(font=dict(color="black", size=10), x=0.82, y=1.30, xanchor='left', showarrow=False, text='<b>RESULTADO</b>'))
        fig.add_annotation(dict(font=dict(color="Limegreen", size=10), x=0.86, y=1.25, showarrow=False, text=f'<b>{dfa.iat[19,0]}</b>'))

        fig.add_annotation(dict(font=dict(color="black", size=10), x=0.67, y=1.10, xanchor='left', showarrow=False, text='<b>Resultado<br>Financeiro</b>'))
        fig.add_annotation(dict(font=dict(color="Limegreen", size=10), x=0.71, y=1.00, showarrow=False, text=f'<b>{dfa.iat[18,0]}</b>'))

        st.plotly_chart(fig)

#############################################################################################################################################
#############################################################################################################################################
#############################################################################################################################################
#############################################################################################################################################

        #Plotar Gráfico Alternativo
        fontsize=28
        # Player Comparison Data
        markdown_1 = f"<div style='text-align:center;  color: gold; font-weight: bold; font-size:{fontsize}px'>{clube:}</div>"
        st.markdown("<h4 style='text-align: center;'>Comparativo com a Média da Liga</h4>", unsafe_allow_html=True)
        st.markdown(markdown_1, unsafe_allow_html=True)
        dfb = df1.iloc[np.r_[0:2, 58, 7, 9, 22, 26], np.r_[0:21]]
        dfb_transposed = dfb.T
        # Set the first row as the new header
        dfb_transposed.columns = dfb_transposed.iloc[0]
        # Drop the first row
        dfb_transposed = dfb_transposed.iloc[1:]
        # Rename the first column to 'clubs'
        dfb_transposed.index.name = 'Clubes'
        dfb = dfb_transposed
        # Renaming Columns
        dfb = dfb.rename(columns={"Receita c/ Publicidade e patrocínio": "Publicidade/patrocínio",
                                  "Receita c/ Match-Day": "Match-Day",
                                  "Receita c/ Sócio-torcedor": "Sócio-Torcedor",
                                  "Receita c/ Negociação de atletas": "Venda de jogadores",
                                  "Receita c/ Transmissão + Premiações": "Transmissão/Premiações",
                                  "RECEITA RECORRENTE": "Receita Recorrente" 
                                  })

        # Preparing the Graph
        params = list(dfb.columns)
        params = params[0:]

        #Preparing Data
        ranges = []
        a_values = []
        b_values = []

        for x in params:
            a = min(dfb[params][x])
            a = a
            b = max(dfb[params][x])
            b = b
            ranges.append((a, b))

        for x in range(len(dfb.index)):
            if dfb.index[x] == clube:
                a_values = dfb.iloc[x].values.tolist()
            if dfb.index[x] == 'Média da Liga':
                b_values = dfb.iloc[x].values.tolist()
                                    
        a_values = a_values[0:]
        b_values = b_values[0:]

        # Rounding values to no decimal places
        a_values = [round(value) for value in a_values]
        b_values = [round(value) for value in b_values]

        values = [a_values, b_values]

        #Plotting Data
        title = dict(
            title_name = clube,
            title_color = '#B6282F',
            subtitle_name = "(R$ milhões)",
            subtitle_color = '#B6282F',
            title_name_2 = 'Média da Liga',
            title_color_2 = '#344D94',
            subtitle_name_2 = "(R$ milhões)",
            subtitle_color_2 = '#344D94',
            title_fontsize = 18,
        ) 

        ## instantiate object
        radar = Radar()

        ## instantiate object -- changing fontsize
        radar=Radar(fontfamily='Cursive', range_fontsize=14)
        radar=Radar(fontfamily='Cursive', label_fontsize=14)

        fig,ax = radar.plot_radar(ranges=ranges,params=params,values=values,radar_color=['#B6282F', '#344D94'], dpi=600, alphas=[.6,.5], title=title, compare=True)
        #fig,ax = radar.plot_radar(ranges=ranges,params=params,values=values,radar_color=['#7eb6e0', '#f77b72'], dpi=600, alphas=[.8,.6], title=title, compare=True)
        st.pyplot(fig)

#############################################################################################################################################
#############################################################################################################################################
#############################################################################################################################################
#############################################################################################################################################

        #Plotar Gráfico Alternativo - 2024 x 2023
        fontsize=28
        # Player Comparison Data
        markdown_1 = f"<div style='text-align:center;  color: gold; font-weight: bold; font-size:{fontsize}px'>{clube:}</div>"
        st.markdown("<h4 style='text-align: center;'>Comparativo 2024 vs 2023</h4>", unsafe_allow_html=True)
        st.markdown(markdown_1, unsafe_allow_html=True)
        dfb = df1.iloc[np.r_[0:2, 58, 7, 9, 22, 26], np.r_[0, 9]]
        dfb = dfb.rename(columns={"Cuiabá": "Cuiabá - 2024"})
        dfb_2023 = df1_2023.iloc[np.r_[0:2, 58, 7, 9, 22, 26], np.r_[0, 9]]
        dfb_2023 = dfb_2023.rename(columns={"Cuiabá": "Cuiabá - 2023"})
        # Fazendo o merge com base na coluna "Clubes"
        dfb = pd.merge(dfb, dfb_2023, on="Clubes", how="inner")  # você pode trocar o "how" se quiser
        dfb_transposed = dfb.T
        # Set the first row as the new header
        dfb_transposed.columns = dfb_transposed.iloc[0]
        # Drop the first row
        dfb_transposed = dfb_transposed.iloc[1:]
        # Rename the first column to 'clubs'
        dfb_transposed.index.name = 'Clubes'
        dfb = dfb_transposed
        # Renaming Columns
        dfb = dfb.rename(columns={"Receita c/ Publicidade e patrocínio": "Publicidade/patrocínio",
                                  "Receita c/ Match-Day": "Match-Day",
                                  "Receita c/ Sócio-torcedor": "Sócio-Torcedor",
                                  "Receita c/ Negociação de atletas": "Venda de jogadores",
                                  "Receita c/ Direitos de transmissão": "Direitos de transmissão" 
                                  })

        teste_2024 = pd.read_csv("índices.csv")
        teste_2024 = teste_2024.iloc[np.r_[0:2, 58, 7, 9, 22, 26], np.r_[0: 20]]
        teste_2024_transposed = teste_2024.T
        # Set the first row as the new header
        teste_2024_transposed.columns = teste_2024_transposed.iloc[0]
        # Drop the first row
        teste_2024_transposed = teste_2024_transposed.iloc[1:]
        # Rename the first column to 'clubs'
        teste_2024_transposed.index.name = 'Clubes'
        teste_2024 = teste_2024_transposed
        # Renaming Columns
        teste_2024 = teste_2024.rename(columns={"Receita c/ Publicidade e patrocínio": "Publicidade/patrocínio",
                                  "Receita c/ Match-Day": "Match-Day",
                                  "Receita c/ Sócio-torcedor": "Sócio-Torcedor",
                                  "Receita c/ Negociação de atletas": "Venda de jogadores",
                                  "Receita c/ Direitos de transmissão": "Direitos de transmissão" 
                                  })

        teste_2023 = pd.read_csv("índices_2023.csv")
        teste_2023 = teste_2023.iloc[np.r_[0:2, 58, 7, 9, 22, 26], np.r_[0: 20]]
        teste_2023_transposed = teste_2023.T
        # Set the first row as the new header
        teste_2023_transposed.columns = teste_2023_transposed.iloc[0]
        # Drop the first row
        teste_2023_transposed = teste_2023_transposed.iloc[1:]
        # Rename the first column to 'clubs'
        teste_2023_transposed.index.name = 'Clubes'
        teste_2023 = teste_2023_transposed
        # Renaming Columns
        teste_2023 = teste_2023.rename(columns={"Receita c/ Publicidade e patrocínio": "Publicidade/patrocínio",
                                  "Receita c/ Match-Day": "Match-Day",
                                  "Receita c/ Sócio-torcedor": "Sócio-Torcedor",
                                  "Receita c/ Negociação de atletas": "Venda de jogadores",
                                  "Receita c/ Direitos de transmissão": "Direitos de transmissão" 
                                  })
    
        # Preparing the Graph
        params = list(dfb.columns)
        params = params[0:]
        #Preparing Data
        ranges = []
        a_values = []
        b_values = []

        for x in range(len(params)):
            # Combine as duas séries
            combined_values = pd.concat([teste_2023[params].iloc[:, x], teste_2024[params].iloc[:, x]])
            
            # Encontre o mínimo e o máximo
            a = combined_values.min()
            b = combined_values.max()
        
            ranges.append((a, b))

        for x in range(len(dfb.index)):
            if dfb.index[x] == "Cuiabá - 2024":
                a_values = dfb.iloc[x].values.tolist()
            if dfb.index[x] == "Cuiabá - 2023":
                b_values = dfb.iloc[x].values.tolist()
                                    
        a_values = a_values[0:]
        b_values = b_values[0:]

        # Rounding values to no decimal places
        a_values = [round(value) for value in a_values]
        b_values = [round(value) for value in b_values]

        values = [a_values, b_values]

        #Plotting Data
        title = dict(
            title_name = "Receitas e Despesas/2024",
            title_color = '#B6282F',
            subtitle_name = "(R$ milhões)",
            subtitle_color = '#B6282F',
            title_name_2 = 'Receitas e Despesas/2023',
            title_color_2 = '#344D94',
            subtitle_name_2 = "(R$ milhões)",
            subtitle_color_2 = '#344D94',
            title_fontsize = 18,
        ) 

        ## instantiate object
        radar = Radar()

        ## instantiate object -- changing fontsize
        radar=Radar(fontfamily='Cursive', range_fontsize=14)
        radar=Radar(fontfamily='Cursive', label_fontsize=14)

        fig,ax = radar.plot_radar(ranges=ranges,params=params,values=values,radar_color=['#B6282F', '#344D94'], dpi=600, alphas=[.6,.5], title=title, compare=True)
        st.pyplot(fig)

#############################################################################################################################################
#############################################################################################################################################
#############################################################################################################################################
#############################################################################################################################################

    elif clube == "São Paulo":
        
        def display_club_image(clube):
            try:
                # Get the image URL for the selected club
                club_image_url = club_image_paths.get(clube)
                
                if club_image_url:
                    # Center-align and display the image
                    st.markdown(
                        f"""
                        <div style="display: flex; justify-content: center;">
                            <img src="{club_image_url}" width="150">
                        </div>
                        """,
                        unsafe_allow_html=True
                    )
                else:
                    st.warning(f"Imagem não encontrada para o clube: {clube}")
            except Exception as e:
                st.error(f"Erro ao exibir a imagem: {e}")

        display_club_image(clube)

###############################################################################################################################################
###############################################################################################################################################
###############################################################################################################################################
###############################################################################################################################################

        # Custom CSS for better formatting
        st.markdown("""
        <style>
            .main {
                padding: 2rem;
            }
            .stAlert {
                background-color: #f8f9fa;
                padding: 1rem;
                border-radius: 0.5rem;
                border-left: 5px solid #ff4b4b;
            }
            .info-box {
                background-color: #e6f3ff;
                padding: 1rem;
                border-radius: 0.5rem;
                border-left: 5px solid #4B8BF5;
                margin-bottom: 1rem;
            }
            h1, h2, h3 {
                color: #1E3A8A;
            }
            .katex {
                font-size: 1.1em;
            }
        </style>
        """, unsafe_allow_html=True)

        st.markdown("""
        <div class="info-box">
        <h4>Resumo:</h4>
        <p>O São Paulo elevou sua receita líquida a R$ 722 milhões (+8% a/a), mas encerrou 2024 com déficit de R$ 288 milhões. 
        Expansão de receitas comerciais (naming rights, patrocínios) e matchday indicam potencial para crescer a margem bruta se 
        custos forem contidos. </p>
        <h4>Destaques:</h4>
        <p>1. O aumento da Receita é explicado pelo estádio (+69 %) e sócio-torcedor (+152 %), compensando queda em vendas de atletas (-23 %). </p>  
        <p>2. O Resultado Financeiro chama a atenção, -93 milhões, explicado por juros, endividamento e encargos bancários. </p>
        <p>3. O Déficit do exercício triplicou em relação a 2023, atingindo -R$288 milhões . </p>  
        <p><b>Nota:</b> Utiliza apenas dados das demonstrações financeiras auditadas.</p>
        </div>
        """, unsafe_allow_html=True)

###############################################################################################################################################
###############################################################################################################################################
###############################################################################################################################################
###############################################################################################################################################
        
        st.markdown("<h4 style='text-align: center;  color: black;'>Demonstração de Resultado</b></h4>", unsafe_allow_html=True)
        st.markdown("<h5 style='text-align: center;  color: black;'>(em R$ milhões)<br></b></h5>", unsafe_allow_html=True)
        st.markdown("---")

        # Define labels, sources and targets (same as original)
        label = ["Direitos de transmissão", "Publicidade e patrocínio", "Arrecadação de jogos", 
                "Sócio-torcedor", "Premiações", "Licenciamento da marca", 
                "RECEITA RECORRENTE", "Negociação de atletas", "Outras receitas", 
                "RECEITA OPERACIONAL", "Pessoal e encargos", "Direitos de imagem", 
                "Despesas com jogos", "Despesas gerais e administrativas", 
                "Depreciação amortização", "Outras despesas", 
                "DESPESAS", "RESULTADO OPERACIONAL", "Resultado financeiro", "RESULTADO"]


        source =              [0, 1, 2, 3, 5, 6, 7, 8,  9, 16, 16, 16, 16, 16, 16, 17, 17, 18] #18 sources
        target =              [6, 6, 6, 6, 6, 9, 9, 9, 16, 10, 11, 12, 13, 14, 15, 16, 19, 19] #18 targets
        value = df.iloc[np.r_[ 0, 1, 2, 3, 5, 6, 7, 8,  9, 10, 11, 12, 13, 14, 15, 17, 17, 18], np.r_[18]].astype(int) #18 values
        dfa = df.iloc[:, np.r_[18]].astype(int)

        # Using positioning more similar to your original layout
        # These coordinates preserve the general structure but with slight improvements
        x = [0.15, 0.15, 0.15, 0.15, 0.15,          # Revenue sources (left)
            0.30,                                   # Recurring Revenue (left-center)
            0.375, 0.375,                           # Additional revenues (left-center)
            0.45,                                   # Net Operating Revenue (center)
            0.75, 0.75, 0.75, 0.75, 0.75, 0.75,     # Expense categories (right)
            0.595,                                   # Total Expenses (right-center)
            0.45,                                   # Resultado Operacional
            0.35,                                   # Resultado financeiro
            0.25]                                   # Results (far right)
            
        y = [-0.22, 0.0, 0.22, 0.44, 0.66,    # Revenue sources (left)
            -0.13,                                  # Recurring Revenue (left-center)
            0.20, 0.40,                             # Additional revenues (left-center)
            -0.02,                                   # Net Operating Revenue (center)
            0.00, 0.20, 0.35, 0.50, 0.65, 0.80,    # Expense categories (right)
            0.26,                                   # Total Expenses (right-center)
            0.65,                                  # Resultado Operacional
            0.80,                                  # Resultado financeiro
            0.80]                                   # Results (far right)

        # Colors that match the original diagram more closely
        # Light blue for revenue flows, green for positive results, red for expenses
        color_for_nodes = [
            'steelblue', 'steelblue', 'steelblue', 'steelblue', 'steelblue', 'steelblue',  # Revenue sources
            'steelblue',                                                                  # Recurring Revenue
            'steelblue', 'steelblue',                                                     # Additional revenues
            'steelblue',                                                                  # Net Operating Revenue
            'indianred', 'indianred', 'indianred', 'indianred', 'indianred', 'indianred', # Expense categories
            'indianred',                                                                  # Total Expenses
            'indianred', 
            'indianred', 
            'indianred'                                         # Results
        ]
        
        # Flow colors that match the original diagram more closely
        color_for_links = [
            'LightSkyBlue', 'LightSkyBlue', 'LightSkyBlue', 'LightSkyBlue', 'LightSkyBlue',    # Revenue source flows
            'LightSkyBlue', 'LightSkyBlue', 'LightSkyBlue',                                          # Additional revenue flows
            'LightCoral',                                                                         # Flow to operating result
            'LightCoral',                                                                    # Flow to expenses
            'LightCoral', 'LightCoral', 'LightCoral', 'LightCoral', 'LightCoral', 'LightCoral',    # Expense category flows
            'LightCoral', 
            'LightCoral'                                                             # Result flows
        ]

        link = dict(source=source, target=target, value=value, color=color_link)
        node = dict(label = label, pad=35, thickness=20)
        data = go.Sankey(link=link, node=node)

        # Set our X and Y co-ords 
        x = [.001 if v==0 else .999 if v==1 else v for v in x]
        y = [.001 if v==0 else .999 if v==1 else v for v in y]

        fig = go.Figure(data=[go.Sankey(
                # The following line hides our labels. They still show
                # when you hover the mouse over an object
                textfont=dict(color="rgba(0,0,0,0)", size=1),
                node = dict(
                    pad = 35,
                    line = dict(color = "white", width = 1),
                    label = label,
                    x = x,
                    y = y
                ),
                link = dict(
                    source = source,
                    target = target,
                    value = value
                    ))])

        # Update our chart
        fig.update_layout(
            hovermode='x',
        )
        # Apply node and link colour choices
        fig.update_traces(node_color = color_for_nodes,
                        link_color = color_for_links)
            
        fig.add_annotation(dict(font=dict(color="black", size=11), x=0.02, y=1.36, xanchor='left', showarrow=False, text='<b>Direitos de<br>transmissão e<br>Premiações</b>'))
        fig.add_annotation(dict(font=dict(color="steelblue", size=11), x=0.05, y=1.20, showarrow=False, text=f'<b>{dfa.iat[0,0]}</b>'))

        fig.add_annotation(dict(font=dict(color="black", size=11), x=0.02, y=1.08, xanchor='left', showarrow=False, text='<b>Publicidade e<br>patrocínio</b>'))
        fig.add_annotation(dict(font=dict(color="steelblue", size=11), x=0.05, y=0.97, showarrow=False, text=f'<b>{dfa.iat[1,0]}</b>'))

        fig.add_annotation(dict(font=dict(color="black", size=11), x=0.02, y=0.87, xanchor='left', showarrow=False, text='<b>Arrecadação<br>de jogos</b>'))
        fig.add_annotation(dict(font=dict(color="steelblue", size=11), x=0.05, y=0.76, showarrow=False, text=f'<b>{dfa.iat[2,0]}</b>'))

        fig.add_annotation(dict(font=dict(color="black", size=11), x=0.02, y=0.62, xanchor='left', showarrow=False, text='<b>Sócio-torcedor</b>'))
        fig.add_annotation(dict(font=dict(color="steelblue", size=11), x=0.06, y=0.56, showarrow=False, text=f'<b>{dfa.iat[3,0]}</b>'))

        fig.add_annotation(dict(font=dict(color="black", size=11), x=0.02, y=0.42, xanchor='left', showarrow=False, text='<b>Licenciamento<br>da marca</b>'))
        fig.add_annotation(dict(font=dict(color="steelblue", size=11), x=0.06, y=0.31, showarrow=False, text=f'<b>{dfa.iat[5,0]}</b>'))
            
        fig.add_annotation(dict(font=dict(color="black", size=10), x=0.25, y=1.39, xanchor='left', showarrow=False, text='<b>RECEITA<br>RECORRENTE</b>'))
        fig.add_annotation(dict(font=dict(color="steelblue", size=10), x=0.28, y=1.30, showarrow=False, text=f'<b>{dfa.iat[6,0]}</b>'))
            
        fig.add_annotation(dict(font=dict(color="black", size=11), x=0.27, y=0.88, xanchor='left', showarrow=False, text='<b>Negociação<br>de atletas</b>'))
        fig.add_annotation(dict(font=dict(color="steelblue", size=11), x=0.295, y=0.78, showarrow=False, text=f'<b>{dfa.iat[7,0]}</b>'))

        fig.add_annotation(dict(font=dict(color="black", size=11), x=0.29, y=0.68, xanchor='left', showarrow=False, text='<b>Outras<br>receitas</b>'))
        fig.add_annotation(dict(font=dict(color="steelblue", size=11), x=0.30, y=0.55, showarrow=False, text=f'<b>{dfa.iat[8,0]}</b>'))

        fig.add_annotation(dict(font=dict(color="black", size=10), x=0.40, y=1.33, xanchor='left', showarrow=False, text='<b>RECEITA<br>OPERACIONAL</b>'))
        fig.add_annotation(dict(font=dict(color="steelblue", size=10), x=0.45, y=1.23, showarrow=False, text=f'<b>{dfa.iat[9,0]}</b>'))

        fig.add_annotation(dict(font=dict(color="black", size=10), x=0.56, y=1, xanchor='left', showarrow=False, text='<b>DESPESAS</b>'))
        fig.add_annotation(dict(font=dict(color="indianred", size=10), x=0.595, y=0.94, showarrow=False, text=f'<b>{dfa.iat[16,0]}</b>'))

        fig.add_annotation(dict(font=dict(color="black", size=10), x=0.78, y=1.08, xanchor='left', showarrow=False, text='<b>Pessoal e<br>encargos</b>'))
        fig.add_annotation(dict(font=dict(color="indianred", size=10), x=0.825, y=0.99, showarrow=False, text=f'<b>{dfa.iat[10,0]}</b>'))

        fig.add_annotation(dict(font=dict(color="black", size=10), x=0.78, y=0.88, xanchor='left', showarrow=False, text='<b>Direitos de<br>imagem</b>'))
        fig.add_annotation(dict(font=dict(color="indianred", size=10), x=0.825, y=0.78, showarrow=False, text=f'<b>{dfa.iat[11,0]}</b>'))

        fig.add_annotation(dict(font=dict(color="black", size=10), x=0.78, y=0.66, xanchor='left', showarrow=False, text='<b>Despesas com<br>jogos</b>'))
        fig.add_annotation(dict(font=dict(color="indianred", size=10), x=0.84, y=0.58, showarrow=False, text=f'<b>{dfa.iat[12,0]}</b>'))

        fig.add_annotation(dict(font=dict(color="black", size=10), x=0.78, y=0.505, xanchor='left', showarrow=False, text='<b>Despesas gerais<br>e administrativas</b>'))
        fig.add_annotation(dict(font=dict(color="indianred", size=10), x=0.85, y=0.425, showarrow=False, text=f'<b>{dfa.iat[13,0]}</b>'))

        fig.add_annotation(dict(font=dict(color="black", size=10), x=0.78, y=0.35, xanchor='left', showarrow=False, text='<b>Depreciação<br>amortização</b>'))
        fig.add_annotation(dict(font=dict(color="indianred", size=10), x=0.83, y=0.25, showarrow=False, text=f'<b>{dfa.iat[14,0]}</b>'))

        fig.add_annotation(dict(font=dict(color="black", size=10), x=0.78, y=0.17, xanchor='left', showarrow=False, text='<b>Outras despesas</b>'))
        fig.add_annotation(dict(font=dict(color="indianred", size=10), x=0.855, y=0.11, showarrow=False, text=f'<b>{dfa.iat[15,0]}</b>'))

        fig.add_annotation(dict(font=dict(color="black", size=10), x=0.40, y=0.505, xanchor='left', showarrow=False, text='<b>RESULTADO<br>OPERACIONAL</b>'))
        fig.add_annotation(dict(font=dict(color="indianred", size=10), x=0.45, y=0.43, showarrow=False, text=f'<b>{dfa.iat[17,0]}</b>'))

        fig.add_annotation(dict(font=dict(color="black", size=10), x=0.38, y=0.17, xanchor='left', showarrow=False, text='<b>RESULTADO<br>FINANCEIRO</b>'))
        fig.add_annotation(dict(font=dict(color="indianred", size=10), x=0.43, y=0.11, showarrow=False, text=f'<b>{dfa.iat[18,0]}</b>'))

        fig.add_annotation(dict(font=dict(color="black", size=10), x=0.15, y=0.19, xanchor='left', showarrow=False, text='<b>RESULTADO</b>'))
        fig.add_annotation(dict(font=dict(color="indianred", size=10), x=0.18, y=0.13, showarrow=False, text=f'<b>{dfa.iat[19,0]}</b>'))

        st.plotly_chart(fig)
#############################################################################################################################################
#############################################################################################################################################
#############################################################################################################################################
#############################################################################################################################################

        #Plotar Gráfico Alternativo
        fontsize=28
        # Player Comparison Data
        markdown_1 = f"<div style='text-align:center;  color: blue; font-weight: bold; font-size:{fontsize}px'>{clube:}</div>"
        st.markdown("<h4 style='text-align: center;'>Comparativo com a Média da Liga</h4>", unsafe_allow_html=True)
        st.markdown(markdown_1, unsafe_allow_html=True)
        dfb = df1.iloc[np.r_[0:2, 58, 7, 9, 22, 26], np.r_[0:21]]
        dfb_transposed = dfb.T
        # Set the first row as the new header
        dfb_transposed.columns = dfb_transposed.iloc[0]
        # Drop the first row
        dfb_transposed = dfb_transposed.iloc[1:]
        # Rename the first column to 'clubs'
        dfb_transposed.index.name = 'Clubes'
        dfb = dfb_transposed
        # Renaming Columns
        dfb = dfb.rename(columns={"Receita c/ Publicidade e patrocínio": "Publicidade/patrocínio",
                                  "Receita c/ Match-Day": "Match-Day",
                                  "Receita c/ Sócio-torcedor": "Sócio-Torcedor",
                                  "Receita c/ Negociação de atletas": "Venda de jogadores",
                                  "Receita c/ Transmissão + Premiações": "Transmissão/Premiações",
                                  "RECEITA RECORRENTE": "Receita Recorrente" 
                                  })

        # Preparing the Graph
        params = list(dfb.columns)
        params = params[0:]

        #Preparing Data
        ranges = []
        a_values = []
        b_values = []

        for x in params:
            a = min(dfb[params][x])
            a = a
            b = max(dfb[params][x])
            b = b
            ranges.append((a, b))

        for x in range(len(dfb.index)):
            if dfb.index[x] == clube:
                a_values = dfb.iloc[x].values.tolist()
            if dfb.index[x] == 'Média da Liga':
                b_values = dfb.iloc[x].values.tolist()
                                    
        a_values = a_values[0:]
        b_values = b_values[0:]

        # Rounding values to no decimal places
        a_values = [round(value) for value in a_values]
        b_values = [round(value) for value in b_values]

        values = [a_values, b_values]

        #Plotting Data
        title = dict(
            title_name = clube,
            title_color = '#B6282F',
            subtitle_name = "(R$ milhões)",
            subtitle_color = '#B6282F',
            title_name_2 = 'Média da Liga',
            title_color_2 = '#344D94',
            subtitle_name_2 = "(R$ milhões)",
            subtitle_color_2 = '#344D94',
            title_fontsize = 18,
        ) 

        ## instantiate object
        radar = Radar()

        ## instantiate object -- changing fontsize
        radar=Radar(fontfamily='Cursive', range_fontsize=14)
        radar=Radar(fontfamily='Cursive', label_fontsize=14)

        fig,ax = radar.plot_radar(ranges=ranges,params=params,values=values,radar_color=['#B6282F', '#344D94'], dpi=600, alphas=[.6,.5], title=title, compare=True)
        #fig,ax = radar.plot_radar(ranges=ranges,params=params,values=values,radar_color=['#7eb6e0', '#f77b72'], dpi=600, alphas=[.8,.6], title=title, compare=True)
        st.pyplot(fig)

###############################################################################################################################################
###############################################################################################################################################
###############################################################################################################################################
###############################################################################################################################################


        #Plotar Gráfico Alternativo - 2024 x 2023
        fontsize=28
        # Player Comparison Data
        markdown_1 = f"<div style='text-align:center;  color: blue; font-weight: bold; font-size:{fontsize}px'>{clube:}</div>"
        st.markdown("<h4 style='text-align: center;'>Comparativo 2024 vs 2023</h4>", unsafe_allow_html=True)
        st.markdown(markdown_1, unsafe_allow_html=True)
        dfb = df1.iloc[np.r_[0:2, 58, 7, 9, 22, 26], np.r_[0, 18]]
        dfb = dfb.rename(columns={"São Paulo": "São Paulo - 2024"})
        dfb_2023 = df1_2023.iloc[np.r_[0:2, 58, 7, 9, 22, 26], np.r_[0, 18]]
        dfb_2023 = dfb_2023.rename(columns={"São Paulo": "São Paulo - 2023"})
        # Fazendo o merge com base na coluna "Clubes"
        dfb = pd.merge(dfb, dfb_2023, on="Clubes", how="inner")  # você pode trocar o "how" se quiser
        
        dfb_transposed = dfb.T
        # Set the first row as the new header
        dfb_transposed.columns = dfb_transposed.iloc[0]
        # Drop the first row
        dfb_transposed = dfb_transposed.iloc[1:]
        # Rename the first column to 'clubs'
        dfb_transposed.index.name = 'Clubes'
        dfb = dfb_transposed
        # Renaming Columns
        dfb = dfb.rename(columns={"Receita c/ Publicidade e patrocínio": "Publicidade/patrocínio",
                                  "Receita c/ Match-Day": "Match-Day",
                                  "Receita c/ Sócio-torcedor": "Sócio-Torcedor",
                                  "Receita c/ Negociação de atletas": "Venda de jogadores",
                                  "Receita c/ Direitos de transmissão": "Direitos de transmissão" 
                                  })

        teste_2024 = pd.read_csv("índices.csv")
        teste_2024 = teste_2024.iloc[np.r_[0:2, 58, 7, 9, 22, 26], np.r_[0: 20]]
        teste_2024_transposed = teste_2024.T
        # Set the first row as the new header
        teste_2024_transposed.columns = teste_2024_transposed.iloc[0]
        # Drop the first row
        teste_2024_transposed = teste_2024_transposed.iloc[1:]
        # Rename the first column to 'clubs'
        teste_2024_transposed.index.name = 'Clubes'
        teste_2024 = teste_2024_transposed
        # Renaming Columns
        teste_2024 = teste_2024.rename(columns={"Receita c/ Publicidade e patrocínio": "Publicidade/patrocínio",
                                  "Receita c/ Match-Day": "Match-Day",
                                  "Receita c/ Sócio-torcedor": "Sócio-Torcedor",
                                  "Receita c/ Negociação de atletas": "Venda de jogadores",
                                  "Receita c/ Direitos de transmissão": "Direitos de transmissão" 
                                  })

        teste_2023 = pd.read_csv("índices_2023.csv")
        teste_2023 = teste_2023.iloc[np.r_[0:2, 58, 7, 9, 22, 26], np.r_[0: 20]]
        teste_2023_transposed = teste_2023.T
        # Set the first row as the new header
        teste_2023_transposed.columns = teste_2023_transposed.iloc[0]
        # Drop the first row
        teste_2023_transposed = teste_2023_transposed.iloc[1:]
        # Rename the first column to 'clubs'
        teste_2023_transposed.index.name = 'Clubes'
        teste_2023 = teste_2023_transposed
        # Renaming Columns
        teste_2023 = teste_2023.rename(columns={"Receita c/ Publicidade e patrocínio": "Publicidade/patrocínio",
                                  "Receita c/ Match-Day": "Match-Day",
                                  "Receita c/ Sócio-torcedor": "Sócio-Torcedor",
                                  "Receita c/ Negociação de atletas": "Venda de jogadores",
                                  "Receita c/ Direitos de transmissão": "Direitos de transmissão" 
                                  })
    
        # Preparing the Graph
        params = list(dfb.columns)
        params = params[0:]
        #Preparing Data
        ranges = []
        a_values = []
        b_values = []

        for x in range(len(params)):
            # Combine as duas séries
            combined_values = pd.concat([teste_2023[params].iloc[:, x], teste_2024[params].iloc[:, x]])
            
            # Encontre o mínimo e o máximo
            a = combined_values.min()
            b = combined_values.max()
        
            ranges.append((a, b))

        for x in range(len(dfb.index)):
            if dfb.index[x] == "São Paulo - 2024":
                a_values = dfb.iloc[x].values.tolist()
            if dfb.index[x] == "São Paulo - 2023":
                b_values = dfb.iloc[x].values.tolist()
                                    
        a_values = a_values[0:]
        b_values = b_values[0:]

        # Rounding values to no decimal places
        a_values = [round(value) for value in a_values]
        b_values = [round(value) for value in b_values]

        values = [a_values, b_values]

        #Plotting Data
        title = dict(
            title_name = "Receitas e Despesas/2024",
            title_color = '#B6282F',
            subtitle_name = "(R$ milhões)",
            subtitle_color = '#B6282F',
            title_name_2 = 'Receitas e Despesas/2023',
            title_color_2 = '#344D94',
            subtitle_name_2 = "(R$ milhões)",
            subtitle_color_2 = '#344D94',
            title_fontsize = 18,
        ) 

        ## instantiate object
        radar = Radar()

        ## instantiate object -- changing fontsize
        radar=Radar(fontfamily='Cursive', range_fontsize=14)
        radar=Radar(fontfamily='Cursive', label_fontsize=14)

        fig,ax = radar.plot_radar(ranges=ranges,params=params,values=values,radar_color=['#B6282F', '#344D94'], dpi=600, alphas=[.6,.5], title=title, compare=True)
        st.pyplot(fig)

#############################################################################################################################################
#############################################################################################################################################
#############################################################################################################################################
#############################################################################################################################################


elif st.session_state.selected_option == "Análise Comparativa Simples":
    
    # Custom CSS for better formatting
    st.markdown("""
    <style>
        .main {
            padding: 2rem;
        }
        .stAlert {
            background-color: #f8f9fa;
            padding: 1rem;
            border-radius: 0.5rem;
            border-left: 5px solid #ff4b4b;
        }
        .info-box {
            background-color: #e6f3ff;
            padding: 1rem;
            border-radius: 0.5rem;
            border-left: 5px solid #4B8BF5;
            margin-bottom: 1rem;
        }
        h1, h2, h3 {
            color: #1E3A8A;
        }
        .katex {
            font-size: 1.1em;
        }
    </style>
    """, unsafe_allow_html=True)

    # Custom styled title
    st.markdown("""
    <h5 style='font-size: 20px; font-weight: bold; font-family: Arial, sans-serif; color: #1E3A8A; margin-bottom: 10px;'>
    ℹ️ Sobre esta análise
    </h5>
    """, unsafe_allow_html=True)

    with st.expander("ℹ️ Clique para expandir", expanded=False):
        st.markdown("""
        <div class="info-box">
        <h4>Análise Comparativa Simples:</h4>
        <p>A Análise Comparativa Simples oferece duas visualizações complementares para a análise financeira dos clubes da Série A. 
        Na primeira, você pode comparar o desempenho de todos os clubes em um indicador específico (Contábil, Esportivo, Gerencial) 
        para o ano de 2024, visualizando de forma clara a posição relativa de cada clube.</p>
        <p>Na segunda visualização, é apresentada a evolução de um clube específico (em destaque) ao longo de cinco anos (2020-2024) 
        em comparação com todos os demais clubes (representados pelas linhas tracejadas em segundo plano). Esta visualização temporal 
        permite identificar tendências, oscilações e o posicionamento do clube selecionado em relação ao mercado, facilitando a 
        compreensão do desenvolvimento financeiro no contexto competitivo do futebol brasileiro.</p>
        </div>
        """, unsafe_allow_html=True)

    st.markdown("<h5 style='text-align: center; color: black;'>Escolha o Clube para destacar</b></h5>", unsafe_allow_html=True)
    highlight = st.selectbox("", options=clubes, index=None, placeholder="Escolha o Clube!")
    
    if highlight:
        
        def display_club_image(clube):
            try:
                # Get the image URL for the selected club
                club_image_url = club_image_paths.get(clube)
                
                if club_image_url:
                    # Center-align and display the image
                    st.markdown(
                        f"""
                        <div style="display: flex; justify-content: center;">
                            <img src="{club_image_url}" width="150">
                        </div>
                        """,
                        unsafe_allow_html=True
                    )
                else:
                    st.warning(f"Imagem não encontrada para o clube: {clube}")
            except Exception as e:
                st.error(f"Erro ao exibir a imagem: {e}")

        display_club_image(highlight)
    
    st.write("---")
    st.markdown("<h5 style='text-align: center; color: black;'>Escolha o Indicador Contábil</b></h5>", unsafe_allow_html=True)
    tema_cont = st.selectbox("", options=temas_cont, index=None, placeholder="Escolha o Indicador Contábil!")
    fontsize = 24

    if tema_cont == "Receita c/ Direitos de Transmissão":

        fontsize = 24
        if highlight:

            tópico = df1.iloc[47, 1:].values
            markdown_1 = f"<div style='text-align:center;  color: black; font-weight: bold; font-size:{fontsize}px'>{tema_cont:}</div>"
            st.markdown("<h4 style='text-align: center;  color: black;'>Análise Comparativa Simples (2024)</b></h4>", unsafe_allow_html=True)
            st.markdown(markdown_1, unsafe_allow_html=True)
            st.markdown("---")

            # Pairing clubs with their revenues and sorting them by revenue in descending order
            paired_clubs_revenues = sorted(zip(clubes, tópico), key=lambda x: x[1], reverse=True)
            sorted_clubes, sorted_revenues = zip(*paired_clubs_revenues)

            def create_club_revenue_chart(sorted_clubes, sorted_revenues, club_image_paths, tema_cont):
                import matplotlib.pyplot as plt
                import numpy as np
                from PIL import Image
                from io import BytesIO
                import requests
                from matplotlib.offsetbox import OffsetImage, AnnotationBbox
                
                # Create figure
                fig, ax = plt.subplots(figsize=(15, 10))
                
                # Plot bars
                bars = ax.bar(range(len(sorted_clubes)), sorted_revenues, color='skyblue')
                
                # Set chart limits and style
                max_revenue = max(sorted_revenues)
                ax.set_xlim(-0.5, len(sorted_clubes)-0.5)
                ax.set_ylim(0, max_revenue*1.1)  # Add 10% space at top
                
                # Remove spines and x-ticks
                ax.spines['right'].set_visible(False)
                ax.spines['top'].set_visible(False)
                ax.spines['bottom'].set_visible(False)
                ax.spines['left'].set_visible(False)
                ax.set_xticks([])
                
                # Add y-axis label
                ax.set_ylabel(f'{tema_cont} (R$ milhões)', fontsize=22, fontweight='bold')
                ax.tick_params(axis='y', labelsize=16)
                
                # Function to get club logo
                def getImage(url):
                    try:
                        response = requests.get(url)
                        img = Image.open(BytesIO(response.content))
                        
                        # Make sure image has transparency
                        if img.mode != 'RGBA':
                            img = img.convert('RGBA')
                            
                        return OffsetImage(img, zoom=0.18)  # Slightly increased from original 0.15
                    except Exception as e:
                        print(f"Error loading image from {url}: {e}")
                        return None
                
                # Add value labels above bars
                for bar in bars:
                    height = bar.get_height()
                    ax.annotate(f'{height:.0f}',
                            xy=(bar.get_x() + bar.get_width() / 2, height),
                            xytext=(0, 3),  # 3 points vertical offset
                            textcoords="offset points",
                            ha='center', va='bottom', fontsize=16)
                
                # Create a small margin at the bottom for the icons
                # Instead of using a separate subplot, we'll add the icons directly at the bottom of the chart
                # Add an invisible bar at the bottom to make space
                bottom_margin = max_revenue * 0.12  # Small margin for icons
                ax.set_ylim(-bottom_margin, max_revenue*1.1)  # Update y-limits to include margin
                
                # Add club logos - position them right at the bottom of the chart
                for i, club in enumerate(sorted_clubes):
                    img_url = club_image_paths.get(club)
                    if img_url:
                        img = getImage(img_url)
                        if img:
                            # Position just below the x-axis
                            ab = AnnotationBbox(
                                img, 
                                (i, -bottom_margin * 0.5),  # Position in the middle of the bottom margin
                                xycoords='data',
                                box_alignment=(0.5, 0.5),
                                frameon=False
                            )
                            ax.add_artist(ab)
                
                fig.tight_layout()
                return fig

            # Usage:
            fig = create_club_revenue_chart(sorted_clubes, sorted_revenues, club_image_paths, tema_cont)
            st.pyplot(fig)


#######################################################################################################################################

            st.markdown("<h4 style='text-align: center;  color: black;'>Análise Comparativa 2020-2024 (em moeda constante)</b></h4>", unsafe_allow_html=True)
            markdown_1 = f"<div style='text-align:center;  color: black; font-weight: bold; font-size:{fontsize}px'>{highlight:} (em destaque)</div>"
            st.markdown(markdown_1, unsafe_allow_html=True)
            st.markdown("---")

            years = ['2020', '2021', '2022', '2023', '2024']

            tópico2 = df3.iloc[28, 1:].values
            club_data = {
                'Atlético GO': tópico2[:5][::-1][:5],
                'Atlético': tópico2[5:10][::-1][:5],
                'Athletico': tópico2[10:15][::-1][:5],
                'Bahia': tópico2[15:20][::-1][:5],
                'Botafogo': tópico2[20:25][::-1][:5],
                'Corinthians': tópico2[25:30][::-1][:5],
                'Vitória': tópico2[30:35][::-1][:5],
                'Cruzeiro': tópico2[35:40][::-1][:5],
                'Cuiabá': tópico2[40:45][::-1][:5],
                'Flamengo': tópico2[45:50][::-1][:5],
                'Fluminense': tópico2[50:55][::-1][:5],
                'Fortaleza': tópico2[55:60][::-1][:5],
                'Grêmio': tópico2[60:65][::-1][:5],
                'Criciúma': tópico2[65:70][::-1][:5],
                'Internacional': tópico2[70:75][::-1][:5],
                'Palmeiras': tópico2[75:80][::-1][:5],
                'Juventude': tópico2[80:85][::-1][:5],
                'São Paulo': tópico2[85:90][::-1][:5],
                'Vasco': tópico2[90:95][::-1][:5],
            }

            def create_enhanced_time_series(years, club_data, highlight, tema_cont, club_image_paths=None):
                
                # Create figure with improved dimensions and DPI
                fig, ax = plt.subplots(figsize=(12, 8), dpi=100)
                
                # Add subtle grid for better readability
                ax.grid(axis='y', linestyle='--', alpha=0.2, zorder=0)
                
                # Track other clubs to create color gradient
                other_clubs = [club for club in club_data.keys() if club != highlight]
                
                # First, plot all non-highlighted clubs with faded color
                for i, club in enumerate(other_clubs):
                    data = club_data[club]
                    ax.plot(years, data, linewidth=1, linestyle='--', color=('gray'), 
                            alpha=0.6, zorder=1)
                
                # Then plot the highlighted club on top with a more vibrant appearance
                if highlight in club_data:
                    # Get highlight club data
                    highlight_data = club_data[highlight]
                    
                    # Plot the main highlighted line with a subtle shadow effect for depth
                    main_line = ax.plot(years, highlight_data, linewidth=4, linestyle='-', 
                                    color='#2b7bba', zorder=3)[0]
                    main_line.set_path_effects([path_effects.SimpleLineShadow(offset=(1, -1), alpha=0.3),
                                            path_effects.Normal()])
                    
                    # Add markers at each data point
                    ax.scatter(years, highlight_data, s=80, color='#2b7bba', edgecolor='white', linewidth=1.5, zorder=4)
                    
                    # Annotate each point on the highlighted club's line with improved text styling
                    for i, value in enumerate(highlight_data):
                        text = ax.annotate(f'{value:.0f}', 
                                        (years[i], value),
                                        textcoords="offset points",
                                        xytext=(0, 12),
                                        ha='center',
                                        va='bottom',
                                        fontsize=14,
                                        fontweight='bold',
                                        color='#2b7bba',
                                        zorder=5)
                        text.set_path_effects([path_effects.withStroke(linewidth=3, foreground='white')])
                        
                    # Add club logo at the end of the line if club_image_paths is provided
                    if club_image_paths and highlight in club_image_paths:
                        try:
                            # Function to get club logo
                            def get_club_image(url, zoom=0.15):
                                try:
                                    response = requests.get(url)
                                    img = Image.open(BytesIO(response.content))
                                    if img.mode != 'RGBA':
                                        img = img.convert('RGBA')
                                    return OffsetImage(img, zoom=zoom)
                                except Exception as e:
                                    print(f"Error loading image from {url}: {e}")
                                    return None
                            
                            # Get the logo and place it at the end of the line
                            img_url = club_image_paths.get(highlight)
                            if img_url:
                                img = get_club_image(img_url, zoom=0.18)
                                if img:
                                    last_year = years[-1]
                                    last_value = highlight_data[-1]
                                    logo_box = AnnotationBbox(img, 
                                                            (last_year + 0.15, last_value),  # Position slightly after the line
                                                            frameon=False,
                                                            box_alignment=(0, 0.5),
                                                            zorder=6)
                                    ax.add_artist(logo_box)
                        except Exception as e:
                            print(f"Error adding club logo: {e}")
                
                # Style adjustments
                ax.set_ylabel(f'{tema_cont} (R$ milhões)', fontsize=14, fontweight='bold')
                
                # Customize axis ticks and labels
                ax.tick_params(axis='both', which='major', labelsize=12)
                
                # Set integer x-ticks for years
                ax.set_xticks(years)
                ax.set_xticklabels([str(int(year)) for year in years])
                
                # Remove spines
                ax.spines['right'].set_visible(False)
                ax.spines['top'].set_visible(False)
                
                # Add subtle light gray background to the plot area
                ax.set_facecolor('#f9f9f9')
                
                # Adjust layout
                plt.tight_layout()
                
                return fig
                
            # Usage:
            fig = create_enhanced_time_series(years, club_data, highlight, tema_cont, club_image_paths)
            st.pyplot(fig)


#######################################################################################################################################
########################################################################################################################################

    elif tema_cont == "Receita c/ Transmissão + Premiações":
        markdown_1 = f"<div style='text-align:center;  color: black; font-weight: bold; font-size:{fontsize}px'>{tema_cont:}</div>"
        st.markdown("<h4 style='text-align: center;  color: black;'>Análise Comparativa Simples  (2024)</b></h4>", unsafe_allow_html=True)
        st.markdown(markdown_1, unsafe_allow_html=True)
        st.markdown("---")

        tópico = df1.iloc[0, 1:].values

        # Pairing clubs with their revenues and sorting them by revenue in descending order
        paired_clubs_revenues = sorted(zip(clubes, tópico), key=lambda x: x[1], reverse=True)
        sorted_clubes, sorted_revenues = zip(*paired_clubs_revenues)

        def create_club_revenue_chart(sorted_clubes, sorted_revenues, club_image_paths, tema_cont):
            import matplotlib.pyplot as plt
            import numpy as np
            from PIL import Image
            from io import BytesIO
            import requests
            from matplotlib.offsetbox import OffsetImage, AnnotationBbox
            
            # Create figure
            fig, ax = plt.subplots(figsize=(15, 10))
            
            # Plot bars
            bars = ax.bar(range(len(sorted_clubes)), sorted_revenues, color='skyblue')
            
            # Set chart limits and style
            max_revenue = max(sorted_revenues)
            ax.set_xlim(-0.5, len(sorted_clubes)-0.5)
            ax.set_ylim(0, max_revenue*1.1)  # Add 10% space at top
            
            # Remove spines and x-ticks
            ax.spines['right'].set_visible(False)
            ax.spines['top'].set_visible(False)
            ax.spines['bottom'].set_visible(False)
            ax.spines['left'].set_visible(False)
            ax.set_xticks([])
            
            # Add y-axis label
            ax.set_ylabel(f'{tema_cont} (R$ milhões)', fontsize=22, fontweight='bold')
            ax.tick_params(axis='y', labelsize=16)
            
            # Function to get club logo
            def getImage(url):
                try:
                    response = requests.get(url)
                    img = Image.open(BytesIO(response.content))
                    
                    # Make sure image has transparency
                    if img.mode != 'RGBA':
                        img = img.convert('RGBA')
                        
                    return OffsetImage(img, zoom=0.18)  # Slightly increased from original 0.15
                except Exception as e:
                    print(f"Error loading image from {url}: {e}")
                    return None
            
            # Add value labels above bars
            for bar in bars:
                height = bar.get_height()
                ax.annotate(f'{height:.0f}',
                        xy=(bar.get_x() + bar.get_width() / 2, height),
                        xytext=(0, 3),  # 3 points vertical offset
                        textcoords="offset points",
                        ha='center', va='bottom', fontsize=16)
            
            # Create a small margin at the bottom for the icons
            # Instead of using a separate subplot, we'll add the icons directly at the bottom of the chart
            # Add an invisible bar at the bottom to make space
            bottom_margin = max_revenue * 0.12  # Small margin for icons
            ax.set_ylim(-bottom_margin, max_revenue*1.1)  # Update y-limits to include margin
            
            # Add club logos - position them right at the bottom of the chart
            for i, club in enumerate(sorted_clubes):
                img_url = club_image_paths.get(club)
                if img_url:
                    img = getImage(img_url)
                    if img:
                        # Position just below the x-axis
                        ab = AnnotationBbox(
                            img, 
                            (i, -bottom_margin * 0.5),  # Position in the middle of the bottom margin
                            xycoords='data',
                            box_alignment=(0.5, 0.5),
                            frameon=False
                        )
                        ax.add_artist(ab)
            
            fig.tight_layout()
            return fig

        # Usage:
        fig = create_club_revenue_chart(sorted_clubes, sorted_revenues, club_image_paths, tema_cont)
        st.pyplot(fig)

#######################################################################################################################################

        st.markdown("<h4 style='text-align: center;  color: black;'>Análise Comparativa 2020-2024 (em moeda constante)</b></h4>", unsafe_allow_html=True)
        markdown_1 = f"<div style='text-align:center;  color: black; font-weight: bold; font-size:{fontsize}px'>{highlight:} (em destaque)</div>"
        st.markdown(markdown_1, unsafe_allow_html=True)
        st.markdown("---")

        years = ['2020', '2021', '2022', '2023', '2024']

        tópico2 = df3.iloc[1, 1:].values
        club_data = {
            'Atlético GO': tópico2[:5][::-1][:5],
            'Atlético': tópico2[5:10][::-1][:5],
            'Athletico': tópico2[10:15][::-1][:5],
            'Bahia': tópico2[15:20][::-1][:5],
            'Botafogo': tópico2[20:25][::-1][:5],
            'Corinthians': tópico2[25:30][::-1][:5],
            'Vitória': tópico2[30:35][::-1][:5],
            'Cruzeiro': tópico2[35:40][::-1][:5],
            'Cuiabá': tópico2[40:45][::-1][:5],
            'Flamengo': tópico2[45:50][::-1][:5],
            'Fluminense': tópico2[50:55][::-1][:5],
            'Fortaleza': tópico2[55:60][::-1][:5],
            'Grêmio': tópico2[60:65][::-1][:5],
            'Criciúma': tópico2[65:70][::-1][:5],
            'Internacional': tópico2[70:75][::-1][:5],
            'Palmeiras': tópico2[75:80][::-1][:5],
            'Juventude': tópico2[80:85][::-1][:5],
            'São Paulo': tópico2[85:90][::-1][:5],
            'Vasco': tópico2[90:95][::-1][:5],
        }

        def create_enhanced_time_series(years, club_data, highlight, tema_cont, club_image_paths=None):
            import matplotlib.pyplot as plt
            import matplotlib.patheffects as path_effects
            from matplotlib.offsetbox import OffsetImage, AnnotationBbox
            import numpy as np
            from PIL import Image
            import requests
            from io import BytesIO
            
            # Create figure with improved dimensions and DPI
            fig, ax = plt.subplots(figsize=(12, 8), dpi=100)
            
            # Add subtle grid for better readability
            ax.grid(axis='y', linestyle='--', alpha=0.2, zorder=0)
            
            # Track other clubs to create color gradient
            other_clubs = [club for club in club_data.keys() if club != highlight]
            
            # First, plot all non-highlighted clubs with faded color
            for i, club in enumerate(other_clubs):
                data = club_data[club]
                ax.plot(years, data, linewidth=1, linestyle='--', color=('gray'), 
                        alpha=0.6, zorder=1)
            
            # Then plot the highlighted club on top with a more vibrant appearance
            if highlight in club_data:
                # Get highlight club data
                highlight_data = club_data[highlight]
                
                # Plot the main highlighted line with a subtle shadow effect for depth
                main_line = ax.plot(years, highlight_data, linewidth=4, linestyle='-', 
                                color='#2b7bba', zorder=3)[0]
                main_line.set_path_effects([path_effects.SimpleLineShadow(offset=(1, -1), alpha=0.3),
                                        path_effects.Normal()])
                
                # Add markers at each data point
                ax.scatter(years, highlight_data, s=80, color='#2b7bba', edgecolor='white', linewidth=1.5, zorder=4)
                
                # Annotate each point on the highlighted club's line with improved text styling
                for i, value in enumerate(highlight_data):
                    text = ax.annotate(f'{value:.0f}', 
                                    (years[i], value),
                                    textcoords="offset points",
                                    xytext=(0, 12),
                                    ha='center',
                                    va='bottom',
                                    fontsize=14,
                                    fontweight='bold',
                                    color='#2b7bba',
                                    zorder=5)
                    text.set_path_effects([path_effects.withStroke(linewidth=3, foreground='white')])
                    
                # Add club logo at the end of the line if club_image_paths is provided
                if club_image_paths and highlight in club_image_paths:
                    try:
                        # Function to get club logo
                        def get_club_image(url, zoom=0.15):
                            try:
                                response = requests.get(url)
                                img = Image.open(BytesIO(response.content))
                                if img.mode != 'RGBA':
                                    img = img.convert('RGBA')
                                return OffsetImage(img, zoom=zoom)
                            except Exception as e:
                                print(f"Error loading image from {url}: {e}")
                                return None
                        
                        # Get the logo and place it at the end of the line
                        img_url = club_image_paths.get(highlight)
                        if img_url:
                            img = get_club_image(img_url, zoom=0.18)
                            if img:
                                last_year = years[-1]
                                last_value = highlight_data[-1]
                                logo_box = AnnotationBbox(img, 
                                                        (last_year + 0.15, last_value),  # Position slightly after the line
                                                        frameon=False,
                                                        box_alignment=(0, 0.5),
                                                        zorder=6)
                                ax.add_artist(logo_box)
                    except Exception as e:
                        print(f"Error adding club logo: {e}")
            
            # Style adjustments
            ax.set_ylabel(f'{tema_cont} (R$ milhões)', fontsize=14, fontweight='bold')
            
            # Customize axis ticks and labels
            ax.tick_params(axis='both', which='major', labelsize=12)
            
            # Set integer x-ticks for years
            ax.set_xticks(years)
            ax.set_xticklabels([str(int(year)) for year in years])
            
            # Remove spines
            ax.spines['right'].set_visible(False)
            ax.spines['top'].set_visible(False)
            
            # Add subtle light gray background to the plot area
            ax.set_facecolor('#f9f9f9')
            
            # Adjust layout
            plt.tight_layout()
            
            return fig
            
        # Usage:
        fig = create_enhanced_time_series(years, club_data, highlight, tema_cont, club_image_paths)
        st.pyplot(fig)

#######################################################################################################################################
########################################################################################################################################

    elif tema_cont == "Receita c/ Publicidade e patrocínio":
        markdown_1 = f"<div style='text-align:center;  color: black; font-weight: bold; font-size:{fontsize}px'>{tema_cont:}</div>"
        st.markdown("<h4 style='text-align: center;  color: black;'>Análise Comparativa Simples  (2024)</b></h4>", unsafe_allow_html=True)
        st.markdown(markdown_1, unsafe_allow_html=True)
        st.markdown("---")

        tópico = df1.iloc[1, 1:].values

        # Pairing clubs with their revenues and sorting them by revenue in descending order
        paired_clubs_revenues = sorted(zip(clubes, tópico), key=lambda x: x[1], reverse=True)
        sorted_clubes, sorted_revenues = zip(*paired_clubs_revenues)

        def create_club_revenue_chart(sorted_clubes, sorted_revenues, club_image_paths, tema_cont):
            import matplotlib.pyplot as plt
            import numpy as np
            from PIL import Image
            from io import BytesIO
            import requests
            from matplotlib.offsetbox import OffsetImage, AnnotationBbox
            
            # Create figure
            fig, ax = plt.subplots(figsize=(15, 10))
            
            # Plot bars
            bars = ax.bar(range(len(sorted_clubes)), sorted_revenues, color='skyblue')
            
            # Set chart limits and style
            max_revenue = max(sorted_revenues)
            ax.set_xlim(-0.5, len(sorted_clubes)-0.5)
            ax.set_ylim(0, max_revenue*1.1)  # Add 10% space at top
            
            # Remove spines and x-ticks
            ax.spines['right'].set_visible(False)
            ax.spines['top'].set_visible(False)
            ax.spines['bottom'].set_visible(False)
            ax.spines['left'].set_visible(False)
            ax.set_xticks([])
            
            # Add y-axis label
            ax.set_ylabel(f'{tema_cont} (R$ milhões)', fontsize=22, fontweight='bold')
            ax.tick_params(axis='y', labelsize=16)
            
            # Function to get club logo
            def getImage(url):
                try:
                    response = requests.get(url)
                    img = Image.open(BytesIO(response.content))
                    
                    # Make sure image has transparency
                    if img.mode != 'RGBA':
                        img = img.convert('RGBA')
                        
                    return OffsetImage(img, zoom=0.18)  # Slightly increased from original 0.15
                except Exception as e:
                    print(f"Error loading image from {url}: {e}")
                    return None
            
            # Add value labels above bars
            for bar in bars:
                height = bar.get_height()
                ax.annotate(f'{height:.0f}',
                        xy=(bar.get_x() + bar.get_width() / 2, height),
                        xytext=(0, 3),  # 3 points vertical offset
                        textcoords="offset points",
                        ha='center', va='bottom', fontsize=16)
            
            # Create a small margin at the bottom for the icons
            # Instead of using a separate subplot, we'll add the icons directly at the bottom of the chart
            # Add an invisible bar at the bottom to make space
            bottom_margin = max_revenue * 0.12  # Small margin for icons
            ax.set_ylim(-bottom_margin, max_revenue*1.1)  # Update y-limits to include margin
            
            # Add club logos - position them right at the bottom of the chart
            for i, club in enumerate(sorted_clubes):
                img_url = club_image_paths.get(club)
                if img_url:
                    img = getImage(img_url)
                    if img:
                        # Position just below the x-axis
                        ab = AnnotationBbox(
                            img, 
                            (i, -bottom_margin * 0.5),  # Position in the middle of the bottom margin
                            xycoords='data',
                            box_alignment=(0.5, 0.5),
                            frameon=False
                        )
                        ax.add_artist(ab)
            
            fig.tight_layout()
            return fig

        # Usage:
        fig = create_club_revenue_chart(sorted_clubes, sorted_revenues, club_image_paths, tema_cont)
        st.pyplot(fig)

#######################################################################################################################################

        st.markdown("<h4 style='text-align: center;  color: black;'>Análise Comparativa 2020-2024 (em moeda constante)</b></h4>", unsafe_allow_html=True)
        markdown_1 = f"<div style='text-align:center;  color: black; font-weight: bold; font-size:{fontsize}px'>{highlight:} (em destaque)</div>"
        st.markdown(markdown_1, unsafe_allow_html=True)
        st.markdown("---")

        years = ['2020', '2021', '2022', '2023', '2024']

        tópico2 = df3.iloc[2, 1:].values
        club_data = {
            'Atlético GO': tópico2[:5][::-1][:5],
            'Atlético': tópico2[5:10][::-1][:5],
            'Athletico': tópico2[10:15][::-1][:5],
            'Bahia': tópico2[15:20][::-1][:5],
            'Botafogo': tópico2[20:25][::-1][:5],
            'Corinthians': tópico2[25:30][::-1][:5],
            'Vitória': tópico2[30:35][::-1][:5],
            'Cruzeiro': tópico2[35:40][::-1][:5],
            'Cuiabá': tópico2[40:45][::-1][:5],
            'Flamengo': tópico2[45:50][::-1][:5],
            'Fluminense': tópico2[50:55][::-1][:5],
            'Fortaleza': tópico2[55:60][::-1][:5],
            'Grêmio': tópico2[60:65][::-1][:5],
            'Criciúma': tópico2[65:70][::-1][:5],
            'Internacional': tópico2[70:75][::-1][:5],
            'Palmeiras': tópico2[75:80][::-1][:5],
            'Juventude': tópico2[80:85][::-1][:5],
            'São Paulo': tópico2[85:90][::-1][:5],
            'Vasco': tópico2[90:95][::-1][:5],
        }

        def create_enhanced_time_series(years, club_data, highlight, tema_cont, club_image_paths=None):
            import matplotlib.pyplot as plt
            import matplotlib.patheffects as path_effects
            from matplotlib.offsetbox import OffsetImage, AnnotationBbox
            import numpy as np
            from PIL import Image
            import requests
            from io import BytesIO
            
            # Create figure with improved dimensions and DPI
            fig, ax = plt.subplots(figsize=(12, 8), dpi=100)
            
            # Add subtle grid for better readability
            ax.grid(axis='y', linestyle='--', alpha=0.2, zorder=0)
            
            # Track other clubs to create color gradient
            other_clubs = [club for club in club_data.keys() if club != highlight]
            
            # First, plot all non-highlighted clubs with faded color
            for i, club in enumerate(other_clubs):
                data = club_data[club]
                ax.plot(years, data, linewidth=1, linestyle='--', color=('gray'), 
                        alpha=0.6, zorder=1)
            
            # Then plot the highlighted club on top with a more vibrant appearance
            if highlight in club_data:
                # Get highlight club data
                highlight_data = club_data[highlight]
                
                # Plot the main highlighted line with a subtle shadow effect for depth
                main_line = ax.plot(years, highlight_data, linewidth=4, linestyle='-', 
                                color='#2b7bba', zorder=3)[0]
                main_line.set_path_effects([path_effects.SimpleLineShadow(offset=(1, -1), alpha=0.3),
                                        path_effects.Normal()])
                
                # Add markers at each data point
                ax.scatter(years, highlight_data, s=80, color='#2b7bba', edgecolor='white', linewidth=1.5, zorder=4)
                
                # Annotate each point on the highlighted club's line with improved text styling
                for i, value in enumerate(highlight_data):
                    text = ax.annotate(f'{value:.0f}', 
                                    (years[i], value),
                                    textcoords="offset points",
                                    xytext=(0, 12),
                                    ha='center',
                                    va='bottom',
                                    fontsize=14,
                                    fontweight='bold',
                                    color='#2b7bba',
                                    zorder=5)
                    text.set_path_effects([path_effects.withStroke(linewidth=3, foreground='white')])
                    
                # Add club logo at the end of the line if club_image_paths is provided
                if club_image_paths and highlight in club_image_paths:
                    try:
                        # Function to get club logo
                        def get_club_image(url, zoom=0.15):
                            try:
                                response = requests.get(url)
                                img = Image.open(BytesIO(response.content))
                                if img.mode != 'RGBA':
                                    img = img.convert('RGBA')
                                return OffsetImage(img, zoom=zoom)
                            except Exception as e:
                                print(f"Error loading image from {url}: {e}")
                                return None
                        
                        # Get the logo and place it at the end of the line
                        img_url = club_image_paths.get(highlight)
                        if img_url:
                            img = get_club_image(img_url, zoom=0.18)
                            if img:
                                last_year = years[-1]
                                last_value = highlight_data[-1]
                                logo_box = AnnotationBbox(img, 
                                                        (last_year + 0.15, last_value),  # Position slightly after the line
                                                        frameon=False,
                                                        box_alignment=(0, 0.5),
                                                        zorder=6)
                                ax.add_artist(logo_box)
                    except Exception as e:
                        print(f"Error adding club logo: {e}")
            
            # Style adjustments
            ax.set_ylabel(f'{tema_cont} (R$ milhões)', fontsize=14, fontweight='bold')
            
            # Customize axis ticks and labels
            ax.tick_params(axis='both', which='major', labelsize=12)
            
            # Set integer x-ticks for years
            ax.set_xticks(years)
            ax.set_xticklabels([str(int(year)) for year in years])
            
            # Remove spines
            ax.spines['right'].set_visible(False)
            ax.spines['top'].set_visible(False)
            
            # Add subtle light gray background to the plot area
            ax.set_facecolor('#f9f9f9')
            
            # Adjust layout
            plt.tight_layout()
            
            return fig
            
        # Usage:
        fig = create_enhanced_time_series(years, club_data, highlight, tema_cont, club_image_paths)
        st.pyplot(fig)

#######################################################################################################################################
########################################################################################################################################

    elif tema_cont == "Receita de Match-Day":
        markdown_1 = f"<div style='text-align:center;  color: black; font-weight: bold; font-size:{fontsize}px'>{tema_cont:}</div>"
        st.markdown("<h4 style='text-align: center;  color: black;'>Análise Comparativa Simples  (2024)</b></h4>", unsafe_allow_html=True)
        st.markdown(markdown_1, unsafe_allow_html=True)
        st.markdown("---")

        tópico = df1.iloc[2, 1:].values

        # Pairing clubs with their revenues and sorting them by revenue in descending order
        paired_clubs_revenues = sorted(zip(clubes, tópico), key=lambda x: x[1], reverse=True)
        sorted_clubes, sorted_revenues = zip(*paired_clubs_revenues)

        def create_club_revenue_chart(sorted_clubes, sorted_revenues, club_image_paths, tema_cont):
            import matplotlib.pyplot as plt
            import numpy as np
            from PIL import Image
            from io import BytesIO
            import requests
            from matplotlib.offsetbox import OffsetImage, AnnotationBbox
            
            # Create figure
            fig, ax = plt.subplots(figsize=(15, 10))
            
            # Plot bars
            bars = ax.bar(range(len(sorted_clubes)), sorted_revenues, color='skyblue')
            
            # Set chart limits and style
            max_revenue = max(sorted_revenues)
            ax.set_xlim(-0.5, len(sorted_clubes)-0.5)
            ax.set_ylim(0, max_revenue*1.1)  # Add 10% space at top
            
            # Remove spines and x-ticks
            ax.spines['right'].set_visible(False)
            ax.spines['top'].set_visible(False)
            ax.spines['bottom'].set_visible(False)
            ax.spines['left'].set_visible(False)
            ax.set_xticks([])
            
            # Add y-axis label
            ax.set_ylabel(f'{tema_cont} (R$ milhões)', fontsize=22, fontweight='bold')
            ax.tick_params(axis='y', labelsize=16)
            
            # Function to get club logo
            def getImage(url):
                try:
                    response = requests.get(url)
                    img = Image.open(BytesIO(response.content))
                    
                    # Make sure image has transparency
                    if img.mode != 'RGBA':
                        img = img.convert('RGBA')
                        
                    return OffsetImage(img, zoom=0.18)  # Slightly increased from original 0.15
                except Exception as e:
                    print(f"Error loading image from {url}: {e}")
                    return None
            
            # Add value labels above bars
            for bar in bars:
                height = bar.get_height()
                ax.annotate(f'{height:.0f}',
                        xy=(bar.get_x() + bar.get_width() / 2, height),
                        xytext=(0, 3),  # 3 points vertical offset
                        textcoords="offset points",
                        ha='center', va='bottom', fontsize=16)
            
            # Create a small margin at the bottom for the icons
            # Instead of using a separate subplot, we'll add the icons directly at the bottom of the chart
            # Add an invisible bar at the bottom to make space
            bottom_margin = max_revenue * 0.12  # Small margin for icons
            ax.set_ylim(-bottom_margin, max_revenue*1.1)  # Update y-limits to include margin
            
            # Add club logos - position them right at the bottom of the chart
            for i, club in enumerate(sorted_clubes):
                img_url = club_image_paths.get(club)
                if img_url:
                    img = getImage(img_url)
                    if img:
                        # Position just below the x-axis
                        ab = AnnotationBbox(
                            img, 
                            (i, -bottom_margin * 0.5),  # Position in the middle of the bottom margin
                            xycoords='data',
                            box_alignment=(0.5, 0.5),
                            frameon=False
                        )
                        ax.add_artist(ab)
            
            fig.tight_layout()
            return fig

        # Usage:
        fig = create_club_revenue_chart(sorted_clubes, sorted_revenues, club_image_paths, tema_cont)
        st.pyplot(fig)

#######################################################################################################################################

        st.markdown("<h4 style='text-align: center;  color: black;'>Análise Comparativa 2020-2024 (em moeda constante)</b></h4>", unsafe_allow_html=True)
        markdown_1 = f"<div style='text-align:center;  color: black; font-weight: bold; font-size:{fontsize}px'>{highlight:} (em destaque)</div>"
        st.markdown(markdown_1, unsafe_allow_html=True)
        st.markdown("---")

        years = ['2020', '2021', '2022', '2023', '2024']

        tópico2 = df3.iloc[3, 1:].values
        club_data = {
            'Atlético GO': tópico2[:5][::-1][:5],
            'Atlético': tópico2[5:10][::-1][:5],
            'Athletico': tópico2[10:15][::-1][:5],
            'Bahia': tópico2[15:20][::-1][:5],
            'Botafogo': tópico2[20:25][::-1][:5],
            'Corinthians': tópico2[25:30][::-1][:5],
            'Vitória': tópico2[30:35][::-1][:5],
            'Cruzeiro': tópico2[35:40][::-1][:5],
            'Cuiabá': tópico2[40:45][::-1][:5],
            'Flamengo': tópico2[45:50][::-1][:5],
            'Fluminense': tópico2[50:55][::-1][:5],
            'Fortaleza': tópico2[55:60][::-1][:5],
            'Grêmio': tópico2[60:65][::-1][:5],
            'Criciúma': tópico2[65:70][::-1][:5],
            'Internacional': tópico2[70:75][::-1][:5],
            'Palmeiras': tópico2[75:80][::-1][:5],
            'Juventude': tópico2[80:85][::-1][:5],
            'São Paulo': tópico2[85:90][::-1][:5],
            'Vasco': tópico2[90:95][::-1][:5],
        }

        def create_enhanced_time_series(years, club_data, highlight, tema_cont, club_image_paths=None):
            import matplotlib.pyplot as plt
            import matplotlib.patheffects as path_effects
            from matplotlib.offsetbox import OffsetImage, AnnotationBbox
            import numpy as np
            from PIL import Image
            import requests
            from io import BytesIO
            
            # Create figure with improved dimensions and DPI
            fig, ax = plt.subplots(figsize=(12, 8), dpi=100)
            
            # Add subtle grid for better readability
            ax.grid(axis='y', linestyle='--', alpha=0.2, zorder=0)
            
            # Track other clubs to create color gradient
            other_clubs = [club for club in club_data.keys() if club != highlight]
            
            # First, plot all non-highlighted clubs with faded color
            for i, club in enumerate(other_clubs):
                data = club_data[club]
                ax.plot(years, data, linewidth=1, linestyle='--', color=('gray'), 
                        alpha=0.6, zorder=1)
            
            # Then plot the highlighted club on top with a more vibrant appearance
            if highlight in club_data:
                # Get highlight club data
                highlight_data = club_data[highlight]
                
                # Plot the main highlighted line with a subtle shadow effect for depth
                main_line = ax.plot(years, highlight_data, linewidth=4, linestyle='-', 
                                color='#2b7bba', zorder=3)[0]
                main_line.set_path_effects([path_effects.SimpleLineShadow(offset=(1, -1), alpha=0.3),
                                        path_effects.Normal()])
                
                # Add markers at each data point
                ax.scatter(years, highlight_data, s=80, color='#2b7bba', edgecolor='white', linewidth=1.5, zorder=4)
                
                # Annotate each point on the highlighted club's line with improved text styling
                for i, value in enumerate(highlight_data):
                    text = ax.annotate(f'{value:.0f}', 
                                    (years[i], value),
                                    textcoords="offset points",
                                    xytext=(0, 12),
                                    ha='center',
                                    va='bottom',
                                    fontsize=14,
                                    fontweight='bold',
                                    color='#2b7bba',
                                    zorder=5)
                    text.set_path_effects([path_effects.withStroke(linewidth=3, foreground='white')])
                    
                # Add club logo at the end of the line if club_image_paths is provided
                if club_image_paths and highlight in club_image_paths:
                    try:
                        # Function to get club logo
                        def get_club_image(url, zoom=0.15):
                            try:
                                response = requests.get(url)
                                img = Image.open(BytesIO(response.content))
                                if img.mode != 'RGBA':
                                    img = img.convert('RGBA')
                                return OffsetImage(img, zoom=zoom)
                            except Exception as e:
                                print(f"Error loading image from {url}: {e}")
                                return None
                        
                        # Get the logo and place it at the end of the line
                        img_url = club_image_paths.get(highlight)
                        if img_url:
                            img = get_club_image(img_url, zoom=0.18)
                            if img:
                                last_year = years[-1]
                                last_value = highlight_data[-1]
                                logo_box = AnnotationBbox(img, 
                                                        (last_year + 0.15, last_value),  # Position slightly after the line
                                                        frameon=False,
                                                        box_alignment=(0, 0.5),
                                                        zorder=6)
                                ax.add_artist(logo_box)
                    except Exception as e:
                        print(f"Error adding club logo: {e}")
            
            # Style adjustments
            ax.set_ylabel(f'{tema_cont} (R$ milhões)', fontsize=14, fontweight='bold')
            
            # Customize axis ticks and labels
            ax.tick_params(axis='both', which='major', labelsize=12)
            
            # Set integer x-ticks for years
            ax.set_xticks(years)
            ax.set_xticklabels([str(int(year)) for year in years])
            
            # Remove spines
            ax.spines['right'].set_visible(False)
            ax.spines['top'].set_visible(False)
            
            # Add subtle light gray background to the plot area
            ax.set_facecolor('#f9f9f9')
            
            # Adjust layout
            plt.tight_layout()
            
            return fig
            
        # Usage:
        fig = create_enhanced_time_series(years, club_data, highlight, tema_cont, club_image_paths)
        st.pyplot(fig)

#######################################################################################################################################
########################################################################################################################################

    elif tema_cont == "Receita c/ Sócio-torcedor":
        markdown_1 = f"<div style='text-align:center;  color: black; font-weight: bold; font-size:{fontsize}px'>{tema_cont:}</div>"
        st.markdown("<h4 style='text-align: center;  color: black;'>Análise Comparativa Simples  (2024)</b></h4>", unsafe_allow_html=True)
        st.markdown(markdown_1, unsafe_allow_html=True)
        st.markdown("---")

        tópico = df1.iloc[3, 1:].values

        # Pairing clubs with their revenues and sorting them by revenue in descending order
        paired_clubs_revenues = sorted(zip(clubes, tópico), key=lambda x: x[1], reverse=True)
        sorted_clubes, sorted_revenues = zip(*paired_clubs_revenues)

        def create_club_revenue_chart(sorted_clubes, sorted_revenues, club_image_paths, tema_cont):
            import matplotlib.pyplot as plt
            import numpy as np
            from PIL import Image
            from io import BytesIO
            import requests
            from matplotlib.offsetbox import OffsetImage, AnnotationBbox
            
            # Create figure
            fig, ax = plt.subplots(figsize=(15, 10))
            
            # Plot bars
            bars = ax.bar(range(len(sorted_clubes)), sorted_revenues, color='skyblue')
            
            # Set chart limits and style
            max_revenue = max(sorted_revenues)
            ax.set_xlim(-0.5, len(sorted_clubes)-0.5)
            ax.set_ylim(0, max_revenue*1.1)  # Add 10% space at top
            
            # Remove spines and x-ticks
            ax.spines['right'].set_visible(False)
            ax.spines['top'].set_visible(False)
            ax.spines['bottom'].set_visible(False)
            ax.spines['left'].set_visible(False)
            ax.set_xticks([])
            
            # Add y-axis label
            ax.set_ylabel(f'{tema_cont} (R$ milhões)', fontsize=22, fontweight='bold')
            ax.tick_params(axis='y', labelsize=16)
            
            # Function to get club logo
            def getImage(url):
                try:
                    response = requests.get(url)
                    img = Image.open(BytesIO(response.content))
                    
                    # Make sure image has transparency
                    if img.mode != 'RGBA':
                        img = img.convert('RGBA')
                        
                    return OffsetImage(img, zoom=0.18)  # Slightly increased from original 0.15
                except Exception as e:
                    print(f"Error loading image from {url}: {e}")
                    return None
            
            # Add value labels above bars
            for bar in bars:
                height = bar.get_height()
                ax.annotate(f'{height:.0f}',
                        xy=(bar.get_x() + bar.get_width() / 2, height),
                        xytext=(0, 3),  # 3 points vertical offset
                        textcoords="offset points",
                        ha='center', va='bottom', fontsize=16)
            
            # Create a small margin at the bottom for the icons
            # Instead of using a separate subplot, we'll add the icons directly at the bottom of the chart
            # Add an invisible bar at the bottom to make space
            bottom_margin = max_revenue * 0.12  # Small margin for icons
            ax.set_ylim(-bottom_margin, max_revenue*1.1)  # Update y-limits to include margin
            
            # Add club logos - position them right at the bottom of the chart
            for i, club in enumerate(sorted_clubes):
                img_url = club_image_paths.get(club)
                if img_url:
                    img = getImage(img_url)
                    if img:
                        # Position just below the x-axis
                        ab = AnnotationBbox(
                            img, 
                            (i, -bottom_margin * 0.5),  # Position in the middle of the bottom margin
                            xycoords='data',
                            box_alignment=(0.5, 0.5),
                            frameon=False
                        )
                        ax.add_artist(ab)
            
            fig.tight_layout()
            return fig

        # Usage:
        fig = create_club_revenue_chart(sorted_clubes, sorted_revenues, club_image_paths, tema_cont)
        st.pyplot(fig)

#######################################################################################################################################

        st.markdown("<h4 style='text-align: center;  color: black;'>Análise Comparativa 2020-2024 (em moeda constante)</b></h4>", unsafe_allow_html=True)
        markdown_1 = f"<div style='text-align:center;  color: black; font-weight: bold; font-size:{fontsize}px'>{highlight:} (em destaque)</div>"
        st.markdown(markdown_1, unsafe_allow_html=True)
        st.markdown("---")

        years = ['2020', '2021', '2022', '2023', '2024']

        tópico2 = df3.iloc[4, 1:].values
        club_data = {
            'Atlético GO': tópico2[:5][::-1][:5],
            'Atlético': tópico2[5:10][::-1][:5],
            'Athletico': tópico2[10:15][::-1][:5],
            'Bahia': tópico2[15:20][::-1][:5],
            'Botafogo': tópico2[20:25][::-1][:5],
            'Corinthians': tópico2[25:30][::-1][:5],
            'Vitória': tópico2[30:35][::-1][:5],
            'Cruzeiro': tópico2[35:40][::-1][:5],
            'Cuiabá': tópico2[40:45][::-1][:5],
            'Flamengo': tópico2[45:50][::-1][:5],
            'Fluminense': tópico2[50:55][::-1][:5],
            'Fortaleza': tópico2[55:60][::-1][:5],
            'Grêmio': tópico2[60:65][::-1][:5],
            'Criciúma': tópico2[65:70][::-1][:5],
            'Internacional': tópico2[70:75][::-1][:5],
            'Palmeiras': tópico2[75:80][::-1][:5],
            'Juventude': tópico2[80:85][::-1][:5],
            'São Paulo': tópico2[85:90][::-1][:5],
            'Vasco': tópico2[90:95][::-1][:5],
        }

        def create_enhanced_time_series(years, club_data, highlight, tema_cont, club_image_paths=None):
            import matplotlib.pyplot as plt
            import matplotlib.patheffects as path_effects
            from matplotlib.offsetbox import OffsetImage, AnnotationBbox
            import numpy as np
            from PIL import Image
            import requests
            from io import BytesIO
            
            # Create figure with improved dimensions and DPI
            fig, ax = plt.subplots(figsize=(12, 8), dpi=100)
            
            # Add subtle grid for better readability
            ax.grid(axis='y', linestyle='--', alpha=0.2, zorder=0)
            
            # Track other clubs to create color gradient
            other_clubs = [club for club in club_data.keys() if club != highlight]
            
            # First, plot all non-highlighted clubs with faded color
            for i, club in enumerate(other_clubs):
                data = club_data[club]
                ax.plot(years, data, linewidth=1, linestyle='--', color=('gray'), 
                        alpha=0.6, zorder=1)
            
            # Then plot the highlighted club on top with a more vibrant appearance
            if highlight in club_data:
                # Get highlight club data
                highlight_data = club_data[highlight]
                
                # Plot the main highlighted line with a subtle shadow effect for depth
                main_line = ax.plot(years, highlight_data, linewidth=4, linestyle='-', 
                                color='#2b7bba', zorder=3)[0]
                main_line.set_path_effects([path_effects.SimpleLineShadow(offset=(1, -1), alpha=0.3),
                                        path_effects.Normal()])
                
                # Add markers at each data point
                ax.scatter(years, highlight_data, s=80, color='#2b7bba', edgecolor='white', linewidth=1.5, zorder=4)
                
                # Annotate each point on the highlighted club's line with improved text styling
                for i, value in enumerate(highlight_data):
                    text = ax.annotate(f'{value:.0f}', 
                                    (years[i], value),
                                    textcoords="offset points",
                                    xytext=(0, 12),
                                    ha='center',
                                    va='bottom',
                                    fontsize=14,
                                    fontweight='bold',
                                    color='#2b7bba',
                                    zorder=5)
                    text.set_path_effects([path_effects.withStroke(linewidth=3, foreground='white')])
                    
                # Add club logo at the end of the line if club_image_paths is provided
                if club_image_paths and highlight in club_image_paths:
                    try:
                        # Function to get club logo
                        def get_club_image(url, zoom=0.15):
                            try:
                                response = requests.get(url)
                                img = Image.open(BytesIO(response.content))
                                if img.mode != 'RGBA':
                                    img = img.convert('RGBA')
                                return OffsetImage(img, zoom=zoom)
                            except Exception as e:
                                print(f"Error loading image from {url}: {e}")
                                return None
                        
                        # Get the logo and place it at the end of the line
                        img_url = club_image_paths.get(highlight)
                        if img_url:
                            img = get_club_image(img_url, zoom=0.18)
                            if img:
                                last_year = years[-1]
                                last_value = highlight_data[-1]
                                logo_box = AnnotationBbox(img, 
                                                        (last_year + 0.15, last_value),  # Position slightly after the line
                                                        frameon=False,
                                                        box_alignment=(0, 0.5),
                                                        zorder=6)
                                ax.add_artist(logo_box)
                    except Exception as e:
                        print(f"Error adding club logo: {e}")
            
            # Style adjustments
            ax.set_ylabel(f'{tema_cont} (R$ milhões)', fontsize=14, fontweight='bold')
            
            # Customize axis ticks and labels
            ax.tick_params(axis='both', which='major', labelsize=12)
            
            # Set integer x-ticks for years
            ax.set_xticks(years)
            ax.set_xticklabels([str(int(year)) for year in years])
            
            # Remove spines
            ax.spines['right'].set_visible(False)
            ax.spines['top'].set_visible(False)
            
            # Add subtle light gray background to the plot area
            ax.set_facecolor('#f9f9f9')
            
            # Adjust layout
            plt.tight_layout()
            
            return fig
            
        # Usage:
        fig = create_enhanced_time_series(years, club_data, highlight, tema_cont, club_image_paths)
        st.pyplot(fig)

#######################################################################################################################################
########################################################################################################################################

    elif tema_cont == "Receita c/ Match-Day + ST":
        markdown_1 = f"<div style='text-align:center;  color: black; font-weight: bold; font-size:{fontsize}px'>{tema_cont:}</div>"
        st.markdown("<h4 style='text-align: center;  color: black;'>Análise Comparativa Simples  (2024)</b></h4>", unsafe_allow_html=True)
        st.markdown(markdown_1, unsafe_allow_html=True)
        st.markdown("---")

        tópico = df1.iloc[58, 1:].values

        # Pairing clubs with their revenues and sorting them by revenue in descending order
        paired_clubs_revenues = sorted(zip(clubes, tópico), key=lambda x: x[1], reverse=True)
        sorted_clubes, sorted_revenues = zip(*paired_clubs_revenues)

        def create_club_revenue_chart(sorted_clubes, sorted_revenues, club_image_paths, tema_cont):
            import matplotlib.pyplot as plt
            import numpy as np
            from PIL import Image
            from io import BytesIO
            import requests
            from matplotlib.offsetbox import OffsetImage, AnnotationBbox
            
            # Create figure
            fig, ax = plt.subplots(figsize=(15, 10))
            
            # Plot bars
            bars = ax.bar(range(len(sorted_clubes)), sorted_revenues, color='skyblue')
            
            # Set chart limits and style
            max_revenue = max(sorted_revenues)
            ax.set_xlim(-0.5, len(sorted_clubes)-0.5)
            ax.set_ylim(0, max_revenue*1.1)  # Add 10% space at top
            
            # Remove spines and x-ticks
            ax.spines['right'].set_visible(False)
            ax.spines['top'].set_visible(False)
            ax.spines['bottom'].set_visible(False)
            ax.spines['left'].set_visible(False)
            ax.set_xticks([])
            
            # Add y-axis label
            ax.set_ylabel(f'{tema_cont} (R$ milhões)', fontsize=22, fontweight='bold')
            ax.tick_params(axis='y', labelsize=16)
            
            # Function to get club logo
            def getImage(url):
                try:
                    response = requests.get(url)
                    img = Image.open(BytesIO(response.content))
                    
                    # Make sure image has transparency
                    if img.mode != 'RGBA':
                        img = img.convert('RGBA')
                        
                    return OffsetImage(img, zoom=0.18)  # Slightly increased from original 0.15
                except Exception as e:
                    print(f"Error loading image from {url}: {e}")
                    return None
            
            # Add value labels above bars
            for bar in bars:
                height = bar.get_height()
                ax.annotate(f'{height:.0f}',
                        xy=(bar.get_x() + bar.get_width() / 2, height),
                        xytext=(0, 3),  # 3 points vertical offset
                        textcoords="offset points",
                        ha='center', va='bottom', fontsize=16)
            
            # Create a small margin at the bottom for the icons
            # Instead of using a separate subplot, we'll add the icons directly at the bottom of the chart
            # Add an invisible bar at the bottom to make space
            bottom_margin = max_revenue * 0.12  # Small margin for icons
            ax.set_ylim(-bottom_margin, max_revenue*1.1)  # Update y-limits to include margin
            
            # Add club logos - position them right at the bottom of the chart
            for i, club in enumerate(sorted_clubes):
                img_url = club_image_paths.get(club)
                if img_url:
                    img = getImage(img_url)
                    if img:
                        # Position just below the x-axis
                        ab = AnnotationBbox(
                            img, 
                            (i, -bottom_margin * 0.5),  # Position in the middle of the bottom margin
                            xycoords='data',
                            box_alignment=(0.5, 0.5),
                            frameon=False
                        )
                        ax.add_artist(ab)
            
            fig.tight_layout()
            return fig

        # Usage:
        fig = create_club_revenue_chart(sorted_clubes, sorted_revenues, club_image_paths, tema_cont)
        st.pyplot(fig)

#######################################################################################################################################

        st.markdown("<h4 style='text-align: center;  color: black;'>Análise Comparativa 2020-2024 (em moeda constante)</b></h4>", unsafe_allow_html=True)
        markdown_1 = f"<div style='text-align:center;  color: black; font-weight: bold; font-size:{fontsize}px'>{highlight:} (em destaque)</div>"
        st.markdown(markdown_1, unsafe_allow_html=True)
        st.markdown("---")

        years = ['2020', '2021', '2022', '2023', '2024']

        tópico2 = df3.iloc[4, 1:].values
        club_data = {
            'Atlético GO': tópico2[:5][::-1][:5],
            'Atlético': tópico2[5:10][::-1][:5],
            'Athletico': tópico2[10:15][::-1][:5],
            'Bahia': tópico2[15:20][::-1][:5],
            'Botafogo': tópico2[20:25][::-1][:5],
            'Corinthians': tópico2[25:30][::-1][:5],
            'Vitória': tópico2[30:35][::-1][:5],
            'Cruzeiro': tópico2[35:40][::-1][:5],
            'Cuiabá': tópico2[40:45][::-1][:5],
            'Flamengo': tópico2[45:50][::-1][:5],
            'Fluminense': tópico2[50:55][::-1][:5],
            'Fortaleza': tópico2[55:60][::-1][:5],
            'Grêmio': tópico2[60:65][::-1][:5],
            'Criciúma': tópico2[65:70][::-1][:5],
            'Internacional': tópico2[70:75][::-1][:5],
            'Palmeiras': tópico2[75:80][::-1][:5],
            'Juventude': tópico2[80:85][::-1][:5],
            'São Paulo': tópico2[85:90][::-1][:5],
            'Vasco': tópico2[90:95][::-1][:5],
        }

        def create_enhanced_time_series(years, club_data, highlight, tema_cont, club_image_paths=None):
            import matplotlib.pyplot as plt
            import matplotlib.patheffects as path_effects
            from matplotlib.offsetbox import OffsetImage, AnnotationBbox
            import numpy as np
            from PIL import Image
            import requests
            from io import BytesIO
            
            # Create figure with improved dimensions and DPI
            fig, ax = plt.subplots(figsize=(12, 8), dpi=100)
            
            # Add subtle grid for better readability
            ax.grid(axis='y', linestyle='--', alpha=0.2, zorder=0)
            
            # Track other clubs to create color gradient
            other_clubs = [club for club in club_data.keys() if club != highlight]
            
            # First, plot all non-highlighted clubs with faded color
            for i, club in enumerate(other_clubs):
                data = club_data[club]
                ax.plot(years, data, linewidth=1, linestyle='--', color=('gray'), 
                        alpha=0.6, zorder=1)
            
            # Then plot the highlighted club on top with a more vibrant appearance
            if highlight in club_data:
                # Get highlight club data
                highlight_data = club_data[highlight]
                
                # Plot the main highlighted line with a subtle shadow effect for depth
                main_line = ax.plot(years, highlight_data, linewidth=4, linestyle='-', 
                                color='#2b7bba', zorder=3)[0]
                main_line.set_path_effects([path_effects.SimpleLineShadow(offset=(1, -1), alpha=0.3),
                                        path_effects.Normal()])
                
                # Add markers at each data point
                ax.scatter(years, highlight_data, s=80, color='#2b7bba', edgecolor='white', linewidth=1.5, zorder=4)
                
                # Annotate each point on the highlighted club's line with improved text styling
                for i, value in enumerate(highlight_data):
                    text = ax.annotate(f'{value:.0f}', 
                                    (years[i], value),
                                    textcoords="offset points",
                                    xytext=(0, 12),
                                    ha='center',
                                    va='bottom',
                                    fontsize=14,
                                    fontweight='bold',
                                    color='#2b7bba',
                                    zorder=5)
                    text.set_path_effects([path_effects.withStroke(linewidth=3, foreground='white')])
                    
                # Add club logo at the end of the line if club_image_paths is provided
                if club_image_paths and highlight in club_image_paths:
                    try:
                        # Function to get club logo
                        def get_club_image(url, zoom=0.15):
                            try:
                                response = requests.get(url)
                                img = Image.open(BytesIO(response.content))
                                if img.mode != 'RGBA':
                                    img = img.convert('RGBA')
                                return OffsetImage(img, zoom=zoom)
                            except Exception as e:
                                print(f"Error loading image from {url}: {e}")
                                return None
                        
                        # Get the logo and place it at the end of the line
                        img_url = club_image_paths.get(highlight)
                        if img_url:
                            img = get_club_image(img_url, zoom=0.18)
                            if img:
                                last_year = years[-1]
                                last_value = highlight_data[-1]
                                logo_box = AnnotationBbox(img, 
                                                        (last_year + 0.15, last_value),  # Position slightly after the line
                                                        frameon=False,
                                                        box_alignment=(0, 0.5),
                                                        zorder=6)
                                ax.add_artist(logo_box)
                    except Exception as e:
                        print(f"Error adding club logo: {e}")
            
            # Style adjustments
            ax.set_ylabel(f'{tema_cont} (R$ milhões)', fontsize=14, fontweight='bold')
            
            # Customize axis ticks and labels
            ax.tick_params(axis='both', which='major', labelsize=12)
            
            # Set integer x-ticks for years
            ax.set_xticks(years)
            ax.set_xticklabels([str(int(year)) for year in years])
            
            # Remove spines
            ax.spines['right'].set_visible(False)
            ax.spines['top'].set_visible(False)
            
            # Add subtle light gray background to the plot area
            ax.set_facecolor('#f9f9f9')
            
            # Adjust layout
            plt.tight_layout()
            
            return fig
            
        # Usage:
        fig = create_enhanced_time_series(years, club_data, highlight, tema_cont, club_image_paths)
        st.pyplot(fig)

#######################################################################################################################################
########################################################################################################################################

    elif tema_cont == "Premiações":
        markdown_1 = f"<div style='text-align:center;  color: black; font-weight: bold; font-size:{fontsize}px'>{tema_cont:}</div>"
        st.markdown("<h4 style='text-align: center;  color: black;'>Análise Comparativa Simples  (2024)</b></h4>", unsafe_allow_html=True)
        st.markdown(markdown_1, unsafe_allow_html=True)
        st.markdown("---")

        tópico = df1.iloc[4, 1:].values

        # Pairing clubs with their revenues and sorting them by revenue in descending order
        paired_clubs_revenues = sorted(zip(clubes, tópico), key=lambda x: x[1], reverse=True)
        sorted_clubes, sorted_revenues = zip(*paired_clubs_revenues)

        def create_club_revenue_chart(sorted_clubes, sorted_revenues, club_image_paths, tema_cont):
            import matplotlib.pyplot as plt
            import numpy as np
            from PIL import Image
            from io import BytesIO
            import requests
            from matplotlib.offsetbox import OffsetImage, AnnotationBbox
            
            # Create figure
            fig, ax = plt.subplots(figsize=(15, 10))
            
            # Plot bars
            bars = ax.bar(range(len(sorted_clubes)), sorted_revenues, color='skyblue')
            
            # Set chart limits and style
            max_revenue = max(sorted_revenues)
            ax.set_xlim(-0.5, len(sorted_clubes)-0.5)
            ax.set_ylim(0, max_revenue*1.1)  # Add 10% space at top
            
            # Remove spines and x-ticks
            ax.spines['right'].set_visible(False)
            ax.spines['top'].set_visible(False)
            ax.spines['bottom'].set_visible(False)
            ax.spines['left'].set_visible(False)
            ax.set_xticks([])
            
            # Add y-axis label
            ax.set_ylabel(f'{tema_cont} (R$ milhões)', fontsize=22, fontweight='bold')
            ax.tick_params(axis='y', labelsize=16)
            
            # Function to get club logo
            def getImage(url):
                try:
                    response = requests.get(url)
                    img = Image.open(BytesIO(response.content))
                    
                    # Make sure image has transparency
                    if img.mode != 'RGBA':
                        img = img.convert('RGBA')
                        
                    return OffsetImage(img, zoom=0.18)  # Slightly increased from original 0.15
                except Exception as e:
                    print(f"Error loading image from {url}: {e}")
                    return None
            
            # Add value labels above bars
            for bar in bars:
                height = bar.get_height()
                ax.annotate(f'{height:.0f}',
                        xy=(bar.get_x() + bar.get_width() / 2, height),
                        xytext=(0, 3),  # 3 points vertical offset
                        textcoords="offset points",
                        ha='center', va='bottom', fontsize=16)
            
            # Create a small margin at the bottom for the icons
            # Instead of using a separate subplot, we'll add the icons directly at the bottom of the chart
            # Add an invisible bar at the bottom to make space
            bottom_margin = max_revenue * 0.12  # Small margin for icons
            ax.set_ylim(-bottom_margin, max_revenue*1.1)  # Update y-limits to include margin
            
            # Add club logos - position them right at the bottom of the chart
            for i, club in enumerate(sorted_clubes):
                img_url = club_image_paths.get(club)
                if img_url:
                    img = getImage(img_url)
                    if img:
                        # Position just below the x-axis
                        ab = AnnotationBbox(
                            img, 
                            (i, -bottom_margin * 0.5),  # Position in the middle of the bottom margin
                            xycoords='data',
                            box_alignment=(0.5, 0.5),
                            frameon=False
                        )
                        ax.add_artist(ab)
            
            fig.tight_layout()
            return fig

        # Usage:
        fig = create_club_revenue_chart(sorted_clubes, sorted_revenues, club_image_paths, tema_cont)
        st.pyplot(fig)

#######################################################################################################################################

        st.markdown("<h4 style='text-align: center;  color: black;'>Análise Comparativa 2020-2024 (em moeda constante)</b></h4>", unsafe_allow_html=True)
        markdown_1 = f"<div style='text-align:center;  color: black; font-weight: bold; font-size:{fontsize}px'>{highlight:} (em destaque)</div>"
        st.markdown(markdown_1, unsafe_allow_html=True)
        st.markdown("---")

        years = ['2020', '2021', '2022', '2023', '2024']

        tópico2 = df3.iloc[5, 1:].values
        club_data = {
            'Atlético GO': tópico2[:5][::-1][:5],
            'Atlético': tópico2[5:10][::-1][:5],
            'Athletico': tópico2[10:15][::-1][:5],
            'Bahia': tópico2[15:20][::-1][:5],
            'Botafogo': tópico2[20:25][::-1][:5],
            'Corinthians': tópico2[25:30][::-1][:5],
            'Vitória': tópico2[30:35][::-1][:5],
            'Cruzeiro': tópico2[35:40][::-1][:5],
            'Cuiabá': tópico2[40:45][::-1][:5],
            'Flamengo': tópico2[45:50][::-1][:5],
            'Fluminense': tópico2[50:55][::-1][:5],
            'Fortaleza': tópico2[55:60][::-1][:5],
            'Grêmio': tópico2[60:65][::-1][:5],
            'Criciúma': tópico2[65:70][::-1][:5],
            'Internacional': tópico2[70:75][::-1][:5],
            'Palmeiras': tópico2[75:80][::-1][:5],
            'Juventude': tópico2[80:85][::-1][:5],
            'São Paulo': tópico2[85:90][::-1][:5],
            'Vasco': tópico2[90:95][::-1][:5],
}

        def create_enhanced_time_series(years, club_data, highlight, tema_cont, club_image_paths=None):
            import matplotlib.pyplot as plt
            import matplotlib.patheffects as path_effects
            from matplotlib.offsetbox import OffsetImage, AnnotationBbox
            import numpy as np
            from PIL import Image
            import requests
            from io import BytesIO
            
            # Create figure with improved dimensions and DPI
            fig, ax = plt.subplots(figsize=(12, 8), dpi=100)
            
            # Add subtle grid for better readability
            ax.grid(axis='y', linestyle='--', alpha=0.2, zorder=0)
            
            # Track other clubs to create color gradient
            other_clubs = [club for club in club_data.keys() if club != highlight]
            
            # First, plot all non-highlighted clubs with faded color
            for i, club in enumerate(other_clubs):
                data = club_data[club]
                ax.plot(years, data, linewidth=1, linestyle='--', color=('gray'), 
                        alpha=0.6, zorder=1)
            
            # Then plot the highlighted club on top with a more vibrant appearance
            if highlight in club_data:
                # Get highlight club data
                highlight_data = club_data[highlight]
                
                # Plot the main highlighted line with a subtle shadow effect for depth
                main_line = ax.plot(years, highlight_data, linewidth=4, linestyle='-', 
                                color='#2b7bba', zorder=3)[0]
                main_line.set_path_effects([path_effects.SimpleLineShadow(offset=(1, -1), alpha=0.3),
                                        path_effects.Normal()])
                
                # Add markers at each data point
                ax.scatter(years, highlight_data, s=80, color='#2b7bba', edgecolor='white', linewidth=1.5, zorder=4)
                
                # Annotate each point on the highlighted club's line with improved text styling
                for i, value in enumerate(highlight_data):
                    text = ax.annotate(f'{value:.0f}', 
                                    (years[i], value),
                                    textcoords="offset points",
                                    xytext=(0, 12),
                                    ha='center',
                                    va='bottom',
                                    fontsize=14,
                                    fontweight='bold',
                                    color='#2b7bba',
                                    zorder=5)
                    text.set_path_effects([path_effects.withStroke(linewidth=3, foreground='white')])
                    
                # Add club logo at the end of the line if club_image_paths is provided
                if club_image_paths and highlight in club_image_paths:
                    try:
                        # Function to get club logo
                        def get_club_image(url, zoom=0.15):
                            try:
                                response = requests.get(url)
                                img = Image.open(BytesIO(response.content))
                                if img.mode != 'RGBA':
                                    img = img.convert('RGBA')
                                return OffsetImage(img, zoom=zoom)
                            except Exception as e:
                                print(f"Error loading image from {url}: {e}")
                                return None
                        
                        # Get the logo and place it at the end of the line
                        img_url = club_image_paths.get(highlight)
                        if img_url:
                            img = get_club_image(img_url, zoom=0.18)
                            if img:
                                last_year = years[-1]
                                last_value = highlight_data[-1]
                                logo_box = AnnotationBbox(img, 
                                                        (last_year + 0.15, last_value),  # Position slightly after the line
                                                        frameon=False,
                                                        box_alignment=(0, 0.5),
                                                        zorder=6)
                                ax.add_artist(logo_box)
                    except Exception as e:
                        print(f"Error adding club logo: {e}")
            
            # Style adjustments
            ax.set_ylabel(f'{tema_cont} (R$ milhões)', fontsize=14, fontweight='bold')
            
            # Customize axis ticks and labels
            ax.tick_params(axis='both', which='major', labelsize=12)
            
            # Set integer x-ticks for years
            ax.set_xticks(years)
            ax.set_xticklabels([str(int(year)) for year in years])
            
            # Remove spines
            ax.spines['right'].set_visible(False)
            ax.spines['top'].set_visible(False)
            
            # Add subtle light gray background to the plot area
            ax.set_facecolor('#f9f9f9')
            
            # Adjust layout
            plt.tight_layout()
            
            return fig
            
        # Usage:
        fig = create_enhanced_time_series(years, club_data, highlight, tema_cont, club_image_paths)
        st.pyplot(fig)

#######################################################################################################################################
########################################################################################################################################

    elif tema_cont == "Receita c/ Licenciamento da marca":
        markdown_1 = f"<div style='text-align:center;  color: black; font-weight: bold; font-size:{fontsize}px'>{tema_cont:}</div>"
        st.markdown("<h4 style='text-align: center;  color: black;'>Análise Comparativa Simples  (2024)</b></h4>", unsafe_allow_html=True)
        st.markdown(markdown_1, unsafe_allow_html=True)
        st.markdown("---")

        tópico = df1.iloc[5, 1:].values

        # Pairing clubs with their revenues and sorting them by revenue in descending order
        paired_clubs_revenues = sorted(zip(clubes, tópico), key=lambda x: x[1], reverse=True)
        sorted_clubes, sorted_revenues = zip(*paired_clubs_revenues)

        def create_club_revenue_chart(sorted_clubes, sorted_revenues, club_image_paths, tema_cont):
            import matplotlib.pyplot as plt
            import numpy as np
            from PIL import Image
            from io import BytesIO
            import requests
            from matplotlib.offsetbox import OffsetImage, AnnotationBbox
            
            # Create figure
            fig, ax = plt.subplots(figsize=(15, 10))
            
            # Plot bars
            bars = ax.bar(range(len(sorted_clubes)), sorted_revenues, color='skyblue')
            
            # Set chart limits and style
            max_revenue = max(sorted_revenues)
            ax.set_xlim(-0.5, len(sorted_clubes)-0.5)
            ax.set_ylim(0, max_revenue*1.1)  # Add 10% space at top
            
            # Remove spines and x-ticks
            ax.spines['right'].set_visible(False)
            ax.spines['top'].set_visible(False)
            ax.spines['bottom'].set_visible(False)
            ax.spines['left'].set_visible(False)
            ax.set_xticks([])
            
            # Add y-axis label
            ax.set_ylabel(f'{tema_cont} (R$ milhões)', fontsize=22, fontweight='bold')
            ax.tick_params(axis='y', labelsize=16)
            
            # Function to get club logo
            def getImage(url):
                try:
                    response = requests.get(url)
                    img = Image.open(BytesIO(response.content))
                    
                    # Make sure image has transparency
                    if img.mode != 'RGBA':
                        img = img.convert('RGBA')
                        
                    return OffsetImage(img, zoom=0.18)  # Slightly increased from original 0.15
                except Exception as e:
                    print(f"Error loading image from {url}: {e}")
                    return None
            
            # Add value labels above bars
            for bar in bars:
                height = bar.get_height()
                ax.annotate(f'{height:.0f}',
                        xy=(bar.get_x() + bar.get_width() / 2, height),
                        xytext=(0, 3),  # 3 points vertical offset
                        textcoords="offset points",
                        ha='center', va='bottom', fontsize=16)
            
            # Create a small margin at the bottom for the icons
            # Instead of using a separate subplot, we'll add the icons directly at the bottom of the chart
            # Add an invisible bar at the bottom to make space
            bottom_margin = max_revenue * 0.12  # Small margin for icons
            ax.set_ylim(-bottom_margin, max_revenue*1.1)  # Update y-limits to include margin
            
            # Add club logos - position them right at the bottom of the chart
            for i, club in enumerate(sorted_clubes):
                img_url = club_image_paths.get(club)
                if img_url:
                    img = getImage(img_url)
                    if img:
                        # Position just below the x-axis
                        ab = AnnotationBbox(
                            img, 
                            (i, -bottom_margin * 0.5),  # Position in the middle of the bottom margin
                            xycoords='data',
                            box_alignment=(0.5, 0.5),
                            frameon=False
                        )
                        ax.add_artist(ab)
            
            fig.tight_layout()
            return fig

        # Usage:
        fig = create_club_revenue_chart(sorted_clubes, sorted_revenues, club_image_paths, tema_cont)
        st.pyplot(fig)

#######################################################################################################################################

        st.markdown("<h4 style='text-align: center;  color: black;'>Análise Comparativa 2020-2024 (em moeda constante)</b></h4>", unsafe_allow_html=True)
        markdown_1 = f"<div style='text-align:center;  color: black; font-weight: bold; font-size:{fontsize}px'>{highlight:} (em destaque)</div>"
        st.markdown(markdown_1, unsafe_allow_html=True)
        st.markdown("---")

        years = ['2020', '2021', '2022', '2023', '2024']

        tópico2 = df3.iloc[6, 1:].values
        club_data = {
            'Atlético GO': tópico2[:5][::-1][:5],
            'Atlético': tópico2[5:10][::-1][:5],
            'Athletico': tópico2[10:15][::-1][:5],
            'Bahia': tópico2[15:20][::-1][:5],
            'Botafogo': tópico2[20:25][::-1][:5],
            'Corinthians': tópico2[25:30][::-1][:5],
            'Vitória': tópico2[30:35][::-1][:5],
            'Cruzeiro': tópico2[35:40][::-1][:5],
            'Cuiabá': tópico2[40:45][::-1][:5],
            'Flamengo': tópico2[45:50][::-1][:5],
            'Fluminense': tópico2[50:55][::-1][:5],
            'Fortaleza': tópico2[55:60][::-1][:5],
            'Grêmio': tópico2[60:65][::-1][:5],
            'Criciúma': tópico2[65:70][::-1][:5],
            'Internacional': tópico2[70:75][::-1][:5],
            'Palmeiras': tópico2[75:80][::-1][:5],
            'Juventude': tópico2[80:85][::-1][:5],
            'São Paulo': tópico2[85:90][::-1][:5],
            'Vasco': tópico2[90:95][::-1][:5],
        }

        def create_enhanced_time_series(years, club_data, highlight, tema_cont, club_image_paths=None):
            import matplotlib.pyplot as plt
            import matplotlib.patheffects as path_effects
            from matplotlib.offsetbox import OffsetImage, AnnotationBbox
            import numpy as np
            from PIL import Image
            import requests
            from io import BytesIO
            
            # Create figure with improved dimensions and DPI
            fig, ax = plt.subplots(figsize=(12, 8), dpi=100)
            
            # Add subtle grid for better readability
            ax.grid(axis='y', linestyle='--', alpha=0.2, zorder=0)
            
            # Track other clubs to create color gradient
            other_clubs = [club for club in club_data.keys() if club != highlight]
            
            # First, plot all non-highlighted clubs with faded color
            for i, club in enumerate(other_clubs):
                data = club_data[club]
                ax.plot(years, data, linewidth=1, linestyle='--', color=('gray'), 
                        alpha=0.6, zorder=1)
            
            # Then plot the highlighted club on top with a more vibrant appearance
            if highlight in club_data:
                # Get highlight club data
                highlight_data = club_data[highlight]
                
                # Plot the main highlighted line with a subtle shadow effect for depth
                main_line = ax.plot(years, highlight_data, linewidth=4, linestyle='-', 
                                color='#2b7bba', zorder=3)[0]
                main_line.set_path_effects([path_effects.SimpleLineShadow(offset=(1, -1), alpha=0.3),
                                        path_effects.Normal()])
                
                # Add markers at each data point
                ax.scatter(years, highlight_data, s=80, color='#2b7bba', edgecolor='white', linewidth=1.5, zorder=4)
                
                # Annotate each point on the highlighted club's line with improved text styling
                for i, value in enumerate(highlight_data):
                    text = ax.annotate(f'{value:.0f}', 
                                    (years[i], value),
                                    textcoords="offset points",
                                    xytext=(0, 12),
                                    ha='center',
                                    va='bottom',
                                    fontsize=14,
                                    fontweight='bold',
                                    color='#2b7bba',
                                    zorder=5)
                    text.set_path_effects([path_effects.withStroke(linewidth=3, foreground='white')])
                    
                # Add club logo at the end of the line if club_image_paths is provided
                if club_image_paths and highlight in club_image_paths:
                    try:
                        # Function to get club logo
                        def get_club_image(url, zoom=0.15):
                            try:
                                response = requests.get(url)
                                img = Image.open(BytesIO(response.content))
                                if img.mode != 'RGBA':
                                    img = img.convert('RGBA')
                                return OffsetImage(img, zoom=zoom)
                            except Exception as e:
                                print(f"Error loading image from {url}: {e}")
                                return None
                        
                        # Get the logo and place it at the end of the line
                        img_url = club_image_paths.get(highlight)
                        if img_url:
                            img = get_club_image(img_url, zoom=0.18)
                            if img:
                                last_year = years[-1]
                                last_value = highlight_data[-1]
                                logo_box = AnnotationBbox(img, 
                                                        (last_year + 0.15, last_value),  # Position slightly after the line
                                                        frameon=False,
                                                        box_alignment=(0, 0.5),
                                                        zorder=6)
                                ax.add_artist(logo_box)
                    except Exception as e:
                        print(f"Error adding club logo: {e}")
            
            # Style adjustments
            ax.set_ylabel(f'{tema_cont} (R$ milhões)', fontsize=14, fontweight='bold')
            
            # Customize axis ticks and labels
            ax.tick_params(axis='both', which='major', labelsize=12)
            
            # Set integer x-ticks for years
            ax.set_xticks(years)
            ax.set_xticklabels([str(int(year)) for year in years])
            
            # Remove spines
            ax.spines['right'].set_visible(False)
            ax.spines['top'].set_visible(False)
            
            # Add subtle light gray background to the plot area
            ax.set_facecolor('#f9f9f9')
            
            # Adjust layout
            plt.tight_layout()
            
            return fig
            
        # Usage:
        fig = create_enhanced_time_series(years, club_data, highlight, tema_cont, club_image_paths)
        st.pyplot(fig)

#######################################################################################################################################
########################################################################################################################################

    elif tema_cont == "Receita Recorrente":
        markdown_1 = f"<div style='text-align:center;  color: black; font-weight: bold; font-size:{fontsize}px'>{tema_cont:}</div>"
        st.markdown("<h4 style='text-align: center;  color: black;'>Análise Comparativa Simples  (2024)</b></h4>", unsafe_allow_html=True)
        st.markdown(markdown_1, unsafe_allow_html=True)
        st.markdown("---")

        tópico = df1.iloc[6, 1:].values

        # Pairing clubs with their revenues and sorting them by revenue in descending order
        paired_clubs_revenues = sorted(zip(clubes, tópico), key=lambda x: x[1], reverse=True)
        sorted_clubes, sorted_revenues = zip(*paired_clubs_revenues)

        def create_club_revenue_chart(sorted_clubes, sorted_revenues, club_image_paths, tema_cont):
            import matplotlib.pyplot as plt
            import numpy as np
            from PIL import Image
            from io import BytesIO
            import requests
            from matplotlib.offsetbox import OffsetImage, AnnotationBbox
            
            # Create figure
            fig, ax = plt.subplots(figsize=(15, 10))
            
            # Plot bars
            bars = ax.bar(range(len(sorted_clubes)), sorted_revenues, color='skyblue')
            
            # Set chart limits and style
            max_revenue = max(sorted_revenues)
            ax.set_xlim(-0.5, len(sorted_clubes)-0.5)
            ax.set_ylim(0, max_revenue*1.1)  # Add 10% space at top
            
            # Remove spines and x-ticks
            ax.spines['right'].set_visible(False)
            ax.spines['top'].set_visible(False)
            ax.spines['bottom'].set_visible(False)
            ax.spines['left'].set_visible(False)
            ax.set_xticks([])
            
            # Add y-axis label
            ax.set_ylabel(f'{tema_cont} (R$ milhões)', fontsize=22, fontweight='bold')
            ax.tick_params(axis='y', labelsize=16)
            
            # Function to get club logo
            def getImage(url):
                try:
                    response = requests.get(url)
                    img = Image.open(BytesIO(response.content))
                    
                    # Make sure image has transparency
                    if img.mode != 'RGBA':
                        img = img.convert('RGBA')
                        
                    return OffsetImage(img, zoom=0.18)  # Slightly increased from original 0.15
                except Exception as e:
                    print(f"Error loading image from {url}: {e}")
                    return None
            
            # Add value labels above bars
            for bar in bars:
                height = bar.get_height()
                ax.annotate(f'{height:.0f}',
                        xy=(bar.get_x() + bar.get_width() / 2, height),
                        xytext=(0, 3),  # 3 points vertical offset
                        textcoords="offset points",
                        ha='center', va='bottom', fontsize=16)
            
            # Create a small margin at the bottom for the icons
            # Instead of using a separate subplot, we'll add the icons directly at the bottom of the chart
            # Add an invisible bar at the bottom to make space
            bottom_margin = max_revenue * 0.12  # Small margin for icons
            ax.set_ylim(-bottom_margin, max_revenue*1.1)  # Update y-limits to include margin
            
            # Add club logos - position them right at the bottom of the chart
            for i, club in enumerate(sorted_clubes):
                img_url = club_image_paths.get(club)
                if img_url:
                    img = getImage(img_url)
                    if img:
                        # Position just below the x-axis
                        ab = AnnotationBbox(
                            img, 
                            (i, -bottom_margin * 0.5),  # Position in the middle of the bottom margin
                            xycoords='data',
                            box_alignment=(0.5, 0.5),
                            frameon=False
                        )
                        ax.add_artist(ab)
            
            fig.tight_layout()
            return fig

        # Usage:
        fig = create_club_revenue_chart(sorted_clubes, sorted_revenues, club_image_paths, tema_cont)
        st.pyplot(fig)

#######################################################################################################################################

        st.markdown("<h4 style='text-align: center;  color: black;'>Análise Comparativa 2020-2024 (em moeda constante)</b></h4>", unsafe_allow_html=True)
        markdown_1 = f"<div style='text-align:center;  color: black; font-weight: bold; font-size:{fontsize}px'>{highlight:} (em destaque)</div>"
        st.markdown(markdown_1, unsafe_allow_html=True)
        st.markdown("---")

        years = ['2020', '2021', '2022', '2023', '2024']

        tópico2 = df3.iloc[7, 1:].values
        club_data = {
            'Atlético GO': tópico2[:5][::-1][:5],
            'Atlético': tópico2[5:10][::-1][:5],
            'Athletico': tópico2[10:15][::-1][:5],
            'Bahia': tópico2[15:20][::-1][:5],
            'Botafogo': tópico2[20:25][::-1][:5],
            'Corinthians': tópico2[25:30][::-1][:5],
            'Vitória': tópico2[30:35][::-1][:5],
            'Cruzeiro': tópico2[35:40][::-1][:5],
            'Cuiabá': tópico2[40:45][::-1][:5],
            'Flamengo': tópico2[45:50][::-1][:5],
            'Fluminense': tópico2[50:55][::-1][:5],
            'Fortaleza': tópico2[55:60][::-1][:5],
            'Grêmio': tópico2[60:65][::-1][:5],
            'Criciúma': tópico2[65:70][::-1][:5],
            'Internacional': tópico2[70:75][::-1][:5],
            'Palmeiras': tópico2[75:80][::-1][:5],
            'Juventude': tópico2[80:85][::-1][:5],
            'São Paulo': tópico2[85:90][::-1][:5],
            'Vasco': tópico2[90:95][::-1][:5],
        }

        def create_enhanced_time_series(years, club_data, highlight, tema_cont, club_image_paths=None):
            import matplotlib.pyplot as plt
            import matplotlib.patheffects as path_effects
            from matplotlib.offsetbox import OffsetImage, AnnotationBbox
            import numpy as np
            from PIL import Image
            import requests
            from io import BytesIO
            
            # Create figure with improved dimensions and DPI
            fig, ax = plt.subplots(figsize=(12, 8), dpi=100)
            
            # Add subtle grid for better readability
            ax.grid(axis='y', linestyle='--', alpha=0.2, zorder=0)
            
            # Track other clubs to create color gradient
            other_clubs = [club for club in club_data.keys() if club != highlight]
            
            # First, plot all non-highlighted clubs with faded color
            for i, club in enumerate(other_clubs):
                data = club_data[club]
                ax.plot(years, data, linewidth=1, linestyle='--', color=('gray'), 
                        alpha=0.6, zorder=1)
            
            # Then plot the highlighted club on top with a more vibrant appearance
            if highlight in club_data:
                # Get highlight club data
                highlight_data = club_data[highlight]
                
                # Plot the main highlighted line with a subtle shadow effect for depth
                main_line = ax.plot(years, highlight_data, linewidth=4, linestyle='-', 
                                color='#2b7bba', zorder=3)[0]
                main_line.set_path_effects([path_effects.SimpleLineShadow(offset=(1, -1), alpha=0.3),
                                        path_effects.Normal()])
                
                # Add markers at each data point
                ax.scatter(years, highlight_data, s=80, color='#2b7bba', edgecolor='white', linewidth=1.5, zorder=4)
                
                # Annotate each point on the highlighted club's line with improved text styling
                for i, value in enumerate(highlight_data):
                    text = ax.annotate(f'{value:.0f}', 
                                    (years[i], value),
                                    textcoords="offset points",
                                    xytext=(0, 12),
                                    ha='center',
                                    va='bottom',
                                    fontsize=14,
                                    fontweight='bold',
                                    color='#2b7bba',
                                    zorder=5)
                    text.set_path_effects([path_effects.withStroke(linewidth=3, foreground='white')])
                    
                # Add club logo at the end of the line if club_image_paths is provided
                if club_image_paths and highlight in club_image_paths:
                    try:
                        # Function to get club logo
                        def get_club_image(url, zoom=0.15):
                            try:
                                response = requests.get(url)
                                img = Image.open(BytesIO(response.content))
                                if img.mode != 'RGBA':
                                    img = img.convert('RGBA')
                                return OffsetImage(img, zoom=zoom)
                            except Exception as e:
                                print(f"Error loading image from {url}: {e}")
                                return None
                        
                        # Get the logo and place it at the end of the line
                        img_url = club_image_paths.get(highlight)
                        if img_url:
                            img = get_club_image(img_url, zoom=0.18)
                            if img:
                                last_year = years[-1]
                                last_value = highlight_data[-1]
                                logo_box = AnnotationBbox(img, 
                                                        (last_year + 0.15, last_value),  # Position slightly after the line
                                                        frameon=False,
                                                        box_alignment=(0, 0.5),
                                                        zorder=6)
                                ax.add_artist(logo_box)
                    except Exception as e:
                        print(f"Error adding club logo: {e}")
            
            # Style adjustments
            ax.set_ylabel(f'{tema_cont} (R$ milhões)', fontsize=14, fontweight='bold')
            
            # Customize axis ticks and labels
            ax.tick_params(axis='both', which='major', labelsize=12)
            
            # Set integer x-ticks for years
            ax.set_xticks(years)
            ax.set_xticklabels([str(int(year)) for year in years])
            
            # Remove spines
            ax.spines['right'].set_visible(False)
            ax.spines['top'].set_visible(False)
            
            # Add subtle light gray background to the plot area
            ax.set_facecolor('#f9f9f9')
            
            # Adjust layout
            plt.tight_layout()
            
            return fig
            
        # Usage:
        fig = create_enhanced_time_series(years, club_data, highlight, tema_cont, club_image_paths)
        st.pyplot(fig)

#######################################################################################################################################
########################################################################################################################################

    elif tema_cont == "Receita c/ Negociação de Atletas":
        markdown_1 = f"<div style='text-align:center;  color: black; font-weight: bold; font-size:{fontsize}px'>{tema_cont:}</div>"
        st.markdown("<h4 style='text-align: center;  color: black;'>Análise Comparativa Simples  (2024)</b></h4>", unsafe_allow_html=True)
        st.markdown(markdown_1, unsafe_allow_html=True)
        st.markdown("---")

        tópico = df1.iloc[7, 1:].values

        # Pairing clubs with their revenues and sorting them by revenue in descending order
        paired_clubs_revenues = sorted(zip(clubes, tópico), key=lambda x: x[1], reverse=True)
        sorted_clubes, sorted_revenues = zip(*paired_clubs_revenues)

        def create_club_revenue_chart(sorted_clubes, sorted_revenues, club_image_paths, tema_cont):
            import matplotlib.pyplot as plt
            import numpy as np
            from PIL import Image
            from io import BytesIO
            import requests
            from matplotlib.offsetbox import OffsetImage, AnnotationBbox
            
            # Create figure
            fig, ax = plt.subplots(figsize=(15, 10))
            
            # Plot bars
            bars = ax.bar(range(len(sorted_clubes)), sorted_revenues, color='skyblue')
            
            # Set chart limits and style
            max_revenue = max(sorted_revenues)
            ax.set_xlim(-0.5, len(sorted_clubes)-0.5)
            ax.set_ylim(0, max_revenue*1.1)  # Add 10% space at top
            
            # Remove spines and x-ticks
            ax.spines['right'].set_visible(False)
            ax.spines['top'].set_visible(False)
            ax.spines['bottom'].set_visible(False)
            ax.spines['left'].set_visible(False)
            ax.set_xticks([])
            
            # Add y-axis label
            ax.set_ylabel(f'{tema_cont} (R$ milhões)', fontsize=22, fontweight='bold')
            ax.tick_params(axis='y', labelsize=16)
            
            # Function to get club logo
            def getImage(url):
                try:
                    response = requests.get(url)
                    img = Image.open(BytesIO(response.content))
                    
                    # Make sure image has transparency
                    if img.mode != 'RGBA':
                        img = img.convert('RGBA')
                        
                    return OffsetImage(img, zoom=0.18)  # Slightly increased from original 0.15
                except Exception as e:
                    print(f"Error loading image from {url}: {e}")
                    return None
            
            # Add value labels above bars
            for bar in bars:
                height = bar.get_height()
                ax.annotate(f'{height:.0f}',
                        xy=(bar.get_x() + bar.get_width() / 2, height),
                        xytext=(0, 3),  # 3 points vertical offset
                        textcoords="offset points",
                        ha='center', va='bottom', fontsize=16)
            
            # Create a small margin at the bottom for the icons
            # Instead of using a separate subplot, we'll add the icons directly at the bottom of the chart
            # Add an invisible bar at the bottom to make space
            bottom_margin = max_revenue * 0.12  # Small margin for icons
            ax.set_ylim(-bottom_margin, max_revenue*1.1)  # Update y-limits to include margin
            
            # Add club logos - position them right at the bottom of the chart
            for i, club in enumerate(sorted_clubes):
                img_url = club_image_paths.get(club)
                if img_url:
                    img = getImage(img_url)
                    if img:
                        # Position just below the x-axis
                        ab = AnnotationBbox(
                            img, 
                            (i, -bottom_margin * 0.5),  # Position in the middle of the bottom margin
                            xycoords='data',
                            box_alignment=(0.5, 0.5),
                            frameon=False
                        )
                        ax.add_artist(ab)
            
            fig.tight_layout()
            return fig

        # Usage:
        fig = create_club_revenue_chart(sorted_clubes, sorted_revenues, club_image_paths, tema_cont)
        st.pyplot(fig)

#######################################################################################################################################

        st.markdown("<h4 style='text-align: center;  color: black;'>Análise Comparativa 2020-2024 (em moeda constante)</b></h4>", unsafe_allow_html=True)
        markdown_1 = f"<div style='text-align:center;  color: black; font-weight: bold; font-size:{fontsize}px'>{highlight:} (em destaque)</div>"
        st.markdown(markdown_1, unsafe_allow_html=True)
        st.markdown("---")

        years = ['2020', '2021', '2022', '2023', '2024']

        tópico2 = df3.iloc[8, 1:].values
        club_data = {
            'Atlético GO': tópico2[:5][::-1][:5],
            'Atlético': tópico2[5:10][::-1][:5],
            'Athletico': tópico2[10:15][::-1][:5],
            'Bahia': tópico2[15:20][::-1][:5],
            'Botafogo': tópico2[20:25][::-1][:5],
            'Corinthians': tópico2[25:30][::-1][:5],
            'Vitória': tópico2[30:35][::-1][:5],
            'Cruzeiro': tópico2[35:40][::-1][:5],
            'Cuiabá': tópico2[40:45][::-1][:5],
            'Flamengo': tópico2[45:50][::-1][:5],
            'Fluminense': tópico2[50:55][::-1][:5],
            'Fortaleza': tópico2[55:60][::-1][:5],
            'Grêmio': tópico2[60:65][::-1][:5],
            'Criciúma': tópico2[65:70][::-1][:5],
            'Internacional': tópico2[70:75][::-1][:5],
            'Palmeiras': tópico2[75:80][::-1][:5],
            'Juventude': tópico2[80:85][::-1][:5],
            'São Paulo': tópico2[85:90][::-1][:5],
            'Vasco': tópico2[90:95][::-1][:5],
        }

        def create_enhanced_time_series(years, club_data, highlight, tema_cont, club_image_paths=None):
            import matplotlib.pyplot as plt
            import matplotlib.patheffects as path_effects
            from matplotlib.offsetbox import OffsetImage, AnnotationBbox
            import numpy as np
            from PIL import Image
            import requests
            from io import BytesIO
            
            # Create figure with improved dimensions and DPI
            fig, ax = plt.subplots(figsize=(12, 8), dpi=100)
            
            # Add subtle grid for better readability
            ax.grid(axis='y', linestyle='--', alpha=0.2, zorder=0)
            
            # Track other clubs to create color gradient
            other_clubs = [club for club in club_data.keys() if club != highlight]
            
            # First, plot all non-highlighted clubs with faded color
            for i, club in enumerate(other_clubs):
                data = club_data[club]
                ax.plot(years, data, linewidth=1, linestyle='--', color=('gray'), 
                        alpha=0.6, zorder=1)
            
            # Then plot the highlighted club on top with a more vibrant appearance
            if highlight in club_data:
                # Get highlight club data
                highlight_data = club_data[highlight]
                
                # Plot the main highlighted line with a subtle shadow effect for depth
                main_line = ax.plot(years, highlight_data, linewidth=4, linestyle='-', 
                                color='#2b7bba', zorder=3)[0]
                main_line.set_path_effects([path_effects.SimpleLineShadow(offset=(1, -1), alpha=0.3),
                                        path_effects.Normal()])
                
                # Add markers at each data point
                ax.scatter(years, highlight_data, s=80, color='#2b7bba', edgecolor='white', linewidth=1.5, zorder=4)
                
                # Annotate each point on the highlighted club's line with improved text styling
                for i, value in enumerate(highlight_data):
                    text = ax.annotate(f'{value:.0f}', 
                                    (years[i], value),
                                    textcoords="offset points",
                                    xytext=(0, 12),
                                    ha='center',
                                    va='bottom',
                                    fontsize=14,
                                    fontweight='bold',
                                    color='#2b7bba',
                                    zorder=5)
                    text.set_path_effects([path_effects.withStroke(linewidth=3, foreground='white')])
                    
                # Add club logo at the end of the line if club_image_paths is provided
                if club_image_paths and highlight in club_image_paths:
                    try:
                        # Function to get club logo
                        def get_club_image(url, zoom=0.15):
                            try:
                                response = requests.get(url)
                                img = Image.open(BytesIO(response.content))
                                if img.mode != 'RGBA':
                                    img = img.convert('RGBA')
                                return OffsetImage(img, zoom=zoom)
                            except Exception as e:
                                print(f"Error loading image from {url}: {e}")
                                return None
                        
                        # Get the logo and place it at the end of the line
                        img_url = club_image_paths.get(highlight)
                        if img_url:
                            img = get_club_image(img_url, zoom=0.18)
                            if img:
                                last_year = years[-1]
                                last_value = highlight_data[-1]
                                logo_box = AnnotationBbox(img, 
                                                        (last_year + 0.15, last_value),  # Position slightly after the line
                                                        frameon=False,
                                                        box_alignment=(0, 0.5),
                                                        zorder=6)
                                ax.add_artist(logo_box)
                    except Exception as e:
                        print(f"Error adding club logo: {e}")
            
            # Style adjustments
            ax.set_ylabel(f'{tema_cont} (R$ milhões)', fontsize=14, fontweight='bold')
            
            # Customize axis ticks and labels
            ax.tick_params(axis='both', which='major', labelsize=12)
            
            # Set integer x-ticks for years
            ax.set_xticks(years)
            ax.set_xticklabels([str(int(year)) for year in years])
            
            # Remove spines
            ax.spines['right'].set_visible(False)
            ax.spines['top'].set_visible(False)
            
            # Add subtle light gray background to the plot area
            ax.set_facecolor('#f9f9f9')
            
            # Adjust layout
            plt.tight_layout()
            
            return fig
            
        # Usage:
        fig = create_enhanced_time_series(years, club_data, highlight, tema_cont, club_image_paths)
        st.pyplot(fig)

#######################################################################################################################################
########################################################################################################################################

    elif tema_cont == "Receita Operacional":
        markdown_1 = f"<div style='text-align:center;  color: black; font-weight: bold; font-size:{fontsize}px'>{tema_cont:}</div>"
        st.markdown("<h4 style='text-align: center;  color: black;'>Análise Comparativa Simples  (2024)</b></h4>", unsafe_allow_html=True)
        st.markdown(markdown_1, unsafe_allow_html=True)
        st.markdown("---")

        tópico = df1.iloc[9, 1:].values

        # Pairing clubs with their revenues and sorting them by revenue in descending order
        paired_clubs_revenues = sorted(zip(clubes, tópico), key=lambda x: x[1], reverse=True)
        sorted_clubes, sorted_revenues = zip(*paired_clubs_revenues)

        def create_club_revenue_chart(sorted_clubes, sorted_revenues, club_image_paths, tema_cont):
            import matplotlib.pyplot as plt
            import numpy as np
            from PIL import Image
            from io import BytesIO
            import requests
            from matplotlib.offsetbox import OffsetImage, AnnotationBbox
            
            # Create figure
            fig, ax = plt.subplots(figsize=(15, 10))
            
            # Plot bars
            bars = ax.bar(range(len(sorted_clubes)), sorted_revenues, color='skyblue')
            
            # Set chart limits and style
            max_revenue = max(sorted_revenues)
            ax.set_xlim(-0.5, len(sorted_clubes)-0.5)
            ax.set_ylim(0, max_revenue*1.1)  # Add 10% space at top
            
            # Remove spines and x-ticks
            ax.spines['right'].set_visible(False)
            ax.spines['top'].set_visible(False)
            ax.spines['bottom'].set_visible(False)
            ax.spines['left'].set_visible(False)
            ax.set_xticks([])
            
            # Add y-axis label
            ax.set_ylabel(f'{tema_cont} (R$ milhões)', fontsize=22, fontweight='bold')
            ax.tick_params(axis='y', labelsize=16)
            
            # Function to get club logo
            def getImage(url):
                try:
                    response = requests.get(url)
                    img = Image.open(BytesIO(response.content))
                    
                    # Make sure image has transparency
                    if img.mode != 'RGBA':
                        img = img.convert('RGBA')
                        
                    return OffsetImage(img, zoom=0.18)  # Slightly increased from original 0.15
                except Exception as e:
                    print(f"Error loading image from {url}: {e}")
                    return None
            
            # Add value labels above bars
            for bar in bars:
                height = bar.get_height()
                ax.annotate(f'{height:.0f}',
                        xy=(bar.get_x() + bar.get_width() / 2, height),
                        xytext=(0, 3),  # 3 points vertical offset
                        textcoords="offset points",
                        ha='center', va='bottom', fontsize=16)
            
            # Create a small margin at the bottom for the icons
            # Instead of using a separate subplot, we'll add the icons directly at the bottom of the chart
            # Add an invisible bar at the bottom to make space
            bottom_margin = max_revenue * 0.12  # Small margin for icons
            ax.set_ylim(-bottom_margin, max_revenue*1.1)  # Update y-limits to include margin
            
            # Add club logos - position them right at the bottom of the chart
            for i, club in enumerate(sorted_clubes):
                img_url = club_image_paths.get(club)
                if img_url:
                    img = getImage(img_url)
                    if img:
                        # Position just below the x-axis
                        ab = AnnotationBbox(
                            img, 
                            (i, -bottom_margin * 0.5),  # Position in the middle of the bottom margin
                            xycoords='data',
                            box_alignment=(0.5, 0.5),
                            frameon=False
                        )
                        ax.add_artist(ab)
            
            fig.tight_layout()
            return fig

        # Usage:
        fig = create_club_revenue_chart(sorted_clubes, sorted_revenues, club_image_paths, tema_cont)
        st.pyplot(fig)

#######################################################################################################################################

        st.markdown("<h4 style='text-align: center;  color: black;'>Análise Comparativa 2020-2024 (em moeda constante)</b></h4>", unsafe_allow_html=True)
        markdown_1 = f"<div style='text-align:center;  color: black; font-weight: bold; font-size:{fontsize}px'>{highlight:} (em destaque)</div>"
        st.markdown(markdown_1, unsafe_allow_html=True)
        st.markdown("---")

        years = ['2020', '2021', '2022', '2023', '2024']

        tópico2 = df3.iloc[9, 1:].values
        club_data = {
            'Atlético GO': tópico2[:5][::-1][:5],
            'Atlético': tópico2[5:10][::-1][:5],
            'Athletico': tópico2[10:15][::-1][:5],
            'Bahia': tópico2[15:20][::-1][:5],
            'Botafogo': tópico2[20:25][::-1][:5],
            'Corinthians': tópico2[25:30][::-1][:5],
            'Vitória': tópico2[30:35][::-1][:5],
            'Cruzeiro': tópico2[35:40][::-1][:5],
            'Cuiabá': tópico2[40:45][::-1][:5],
            'Flamengo': tópico2[45:50][::-1][:5],
            'Fluminense': tópico2[50:55][::-1][:5],
            'Fortaleza': tópico2[55:60][::-1][:5],
            'Grêmio': tópico2[60:65][::-1][:5],
            'Criciúma': tópico2[65:70][::-1][:5],
            'Internacional': tópico2[70:75][::-1][:5],
            'Palmeiras': tópico2[75:80][::-1][:5],
            'Juventude': tópico2[80:85][::-1][:5],
            'São Paulo': tópico2[85:90][::-1][:5],
            'Vasco': tópico2[90:95][::-1][:5],
        }

        def create_enhanced_time_series(years, club_data, highlight, tema_cont, club_image_paths=None):
            import matplotlib.pyplot as plt
            import matplotlib.patheffects as path_effects
            from matplotlib.offsetbox import OffsetImage, AnnotationBbox
            import numpy as np
            from PIL import Image
            import requests
            from io import BytesIO
            
            # Create figure with improved dimensions and DPI
            fig, ax = plt.subplots(figsize=(12, 8), dpi=100)
            
            # Add subtle grid for better readability
            ax.grid(axis='y', linestyle='--', alpha=0.2, zorder=0)
            
            # Track other clubs to create color gradient
            other_clubs = [club for club in club_data.keys() if club != highlight]
            
            # First, plot all non-highlighted clubs with faded color
            for i, club in enumerate(other_clubs):
                data = club_data[club]
                ax.plot(years, data, linewidth=1, linestyle='--', color=('gray'), 
                        alpha=0.6, zorder=1)
            
            # Then plot the highlighted club on top with a more vibrant appearance
            if highlight in club_data:
                # Get highlight club data
                highlight_data = club_data[highlight]
                
                # Plot the main highlighted line with a subtle shadow effect for depth
                main_line = ax.plot(years, highlight_data, linewidth=4, linestyle='-', 
                                color='#2b7bba', zorder=3)[0]
                main_line.set_path_effects([path_effects.SimpleLineShadow(offset=(1, -1), alpha=0.3),
                                        path_effects.Normal()])
                
                # Add markers at each data point
                ax.scatter(years, highlight_data, s=80, color='#2b7bba', edgecolor='white', linewidth=1.5, zorder=4)
                
                # Annotate each point on the highlighted club's line with improved text styling
                for i, value in enumerate(highlight_data):
                    text = ax.annotate(f'{value:.0f}', 
                                    (years[i], value),
                                    textcoords="offset points",
                                    xytext=(0, 12),
                                    ha='center',
                                    va='bottom',
                                    fontsize=14,
                                    fontweight='bold',
                                    color='#2b7bba',
                                    zorder=5)
                    text.set_path_effects([path_effects.withStroke(linewidth=3, foreground='white')])
                    
                # Add club logo at the end of the line if club_image_paths is provided
                if club_image_paths and highlight in club_image_paths:
                    try:
                        # Function to get club logo
                        def get_club_image(url, zoom=0.15):
                            try:
                                response = requests.get(url)
                                img = Image.open(BytesIO(response.content))
                                if img.mode != 'RGBA':
                                    img = img.convert('RGBA')
                                return OffsetImage(img, zoom=zoom)
                            except Exception as e:
                                print(f"Error loading image from {url}: {e}")
                                return None
                        
                        # Get the logo and place it at the end of the line
                        img_url = club_image_paths.get(highlight)
                        if img_url:
                            img = get_club_image(img_url, zoom=0.18)
                            if img:
                                last_year = years[-1]
                                last_value = highlight_data[-1]
                                logo_box = AnnotationBbox(img, 
                                                        (last_year + 0.15, last_value),  # Position slightly after the line
                                                        frameon=False,
                                                        box_alignment=(0, 0.5),
                                                        zorder=6)
                                ax.add_artist(logo_box)
                    except Exception as e:
                        print(f"Error adding club logo: {e}")
            
            # Style adjustments
            ax.set_ylabel(f'{tema_cont} (R$ milhões)', fontsize=14, fontweight='bold')
            
            # Customize axis ticks and labels
            ax.tick_params(axis='both', which='major', labelsize=12)
            
            # Set integer x-ticks for years
            ax.set_xticks(years)
            ax.set_xticklabels([str(int(year)) for year in years])
            
            # Remove spines
            ax.spines['right'].set_visible(False)
            ax.spines['top'].set_visible(False)
            
            # Add subtle light gray background to the plot area
            ax.set_facecolor('#f9f9f9')
            
            # Adjust layout
            plt.tight_layout()
            
            return fig
            
        # Usage:
        fig = create_enhanced_time_series(years, club_data, highlight, tema_cont, club_image_paths)
        st.pyplot(fig)

########################################################################################################################################
########################################################################################################################################

    elif tema_cont == "Resultado":
        markdown_1 = f"<div style='text-align:center;  color: black; font-weight: bold; font-size:{fontsize}px'>{tema_cont:}</div>"
        st.markdown("<h4 style='text-align: center;  color: black;'>Análise Comparativa Simples  (2024)</b></h4>", unsafe_allow_html=True)
        st.markdown(markdown_1, unsafe_allow_html=True)
        st.markdown("---")

        tópico = df1.iloc[17, 1:].values

        # Pairing clubs with their revenues and sorting them by revenue in descending order
        paired_clubs_revenues = sorted(zip(clubes, tópico), key=lambda x: x[1], reverse=True)
        sorted_clubes, sorted_revenues = zip(*paired_clubs_revenues)

        def create_club_revenue_chart(sorted_clubes, sorted_revenues, club_image_paths, tema_cont):
            import matplotlib.pyplot as plt
            import numpy as np
            from PIL import Image
            from io import BytesIO
            import requests
            from matplotlib.offsetbox import OffsetImage, AnnotationBbox
            
            # Create figure
            fig, ax = plt.subplots(figsize=(15, 10))
            
            # Plot bars
            bars = ax.bar(range(len(sorted_clubes)), sorted_revenues, color='skyblue')
            
            # Set chart limits and style
            max_revenue = max(sorted_revenues)
            min_revenue = min(sorted_revenues)
            
            # Ensure we have enough space for negative values if they exist
            bottom_limit = min(0, min_revenue * 1.1)  # 10% extra space below if negative values exist
            top_limit = max(0, max_revenue * 1.1)  # 10% extra space above
            
            ax.set_xlim(-0.5, len(sorted_clubes)-0.5)
            
            # Set a margin for the logos, regardless of whether values are positive or negative
            logo_margin = max(abs(max_revenue), abs(min_revenue)) * 0.12
            
            # Set y limits to accommodate both positive and negative values plus logo margins
            ax.set_ylim(bottom_limit - logo_margin, top_limit + logo_margin)
            
            # Remove spines and x-ticks
            ax.spines['right'].set_visible(False)
            ax.spines['top'].set_visible(False)
            ax.spines['bottom'].set_visible(False)
            ax.spines['left'].set_visible(False)
            ax.set_xticks([])
            
            # Add y-axis label
            ax.set_ylabel(f'{tema_cont} (R$ milhões)', fontsize=22, fontweight='bold')
            ax.tick_params(axis='y', labelsize=16)
            
            # Add x-axis at y=0
            ax.axhline(y=0, color='black', linestyle='-', linewidth=0.8, alpha=0.5)
            
            # Function to get club logo
            def getImage(url):
                try:
                    response = requests.get(url)
                    img = Image.open(BytesIO(response.content))
                    
                    # Make sure image has transparency
                    if img.mode != 'RGBA':
                        img = img.convert('RGBA')
                        
                    return OffsetImage(img, zoom=0.18)
                except Exception as e:
                    print(f"Error loading image from {url}: {e}")
                    return None
            
            # Add value labels above or below bars
            for bar in bars:
                height = bar.get_height()
                y_pos = height + 3 if height >= 0 else height - 12  # Adjust text position based on bar direction
                va_pos = 'bottom' if height >= 0 else 'top'
                
                ax.annotate(f'{height:.0f}',
                        xy=(bar.get_x() + bar.get_width() / 2, height),
                        xytext=(0, 3 if height >= 0 else -3),  # Offset direction based on bar
                        textcoords="offset points",
                        ha='center', va=va_pos, fontsize=16)
            
            # Add club logos - position them depending on whether the value is positive or negative
            for i, (club, value) in enumerate(zip(sorted_clubes, sorted_revenues)):
                img_url = club_image_paths.get(club)
                if img_url:
                    img = getImage(img_url)
                    if img:
                        # Position the logo either below or above the x-axis based on the value
                        y_pos = -logo_margin * 0.5 if value >= 0 else logo_margin * 0.5
                        
                        ab = AnnotationBbox(
                            img, 
                            (i, y_pos),  # Position based on value
                            xycoords='data',
                            box_alignment=(0.5, 0.5),
                            frameon=False
                        )
                        ax.add_artist(ab)
            
            fig.tight_layout()
            return fig


        # Usage:
        fig = create_club_revenue_chart(sorted_clubes, sorted_revenues, club_image_paths, tema_cont)
        st.pyplot(fig)




#######################################################################################################################################

        st.markdown("<h4 style='text-align: center;  color: black;'>Análise Comparativa 2020-2024 (em moeda constante)</b></h4>", unsafe_allow_html=True)
        markdown_1 = f"<div style='text-align:center;  color: black; font-weight: bold; font-size:{fontsize}px'>{highlight:} (em destaque)</div>"
        st.markdown(markdown_1, unsafe_allow_html=True)
        st.markdown("---")

        years = ['2020', '2021', '2022', '2023', '2024']

        tópico2 = df3.iloc[11, 1:].values
        club_data = {
            'Atlético GO': tópico2[:5][::-1][:5],
            'Atlético': tópico2[5:10][::-1][:5],
            'Athletico': tópico2[10:15][::-1][:5],
            'Bahia': tópico2[15:20][::-1][:5],
            'Botafogo': tópico2[20:25][::-1][:5],
            'Corinthians': tópico2[25:30][::-1][:5],
            'Vitória': tópico2[30:35][::-1][:5],
            'Cruzeiro': tópico2[35:40][::-1][:5],
            'Cuiabá': tópico2[40:45][::-1][:5],
            'Flamengo': tópico2[45:50][::-1][:5],
            'Fluminense': tópico2[50:55][::-1][:5],
            'Fortaleza': tópico2[55:60][::-1][:5],
            'Grêmio': tópico2[60:65][::-1][:5],
            'Criciúma': tópico2[65:70][::-1][:5],
            'Internacional': tópico2[70:75][::-1][:5],
            'Palmeiras': tópico2[75:80][::-1][:5],
            'Juventude': tópico2[80:85][::-1][:5],
            'São Paulo': tópico2[85:90][::-1][:5],
            'Vasco': tópico2[90:95][::-1][:5],
        }

        def create_enhanced_time_series(years, club_data, highlight, tema_cont, club_image_paths=None):
            import matplotlib.pyplot as plt
            import matplotlib.patheffects as path_effects
            from matplotlib.offsetbox import OffsetImage, AnnotationBbox
            import numpy as np
            from PIL import Image
            import requests
            from io import BytesIO
            
            # Create figure with improved dimensions and DPI
            fig, ax = plt.subplots(figsize=(12, 8), dpi=100)
            
            # Add subtle grid for better readability
            ax.grid(axis='y', linestyle='--', alpha=0.2, zorder=0)
            
            # Track other clubs to create color gradient
            other_clubs = [club for club in club_data.keys() if club != highlight]
            
            # First, plot all non-highlighted clubs with faded color
            for i, club in enumerate(other_clubs):
                data = club_data[club]
                ax.plot(years, data, linewidth=1, linestyle='--', color=('gray'), 
                        alpha=0.6, zorder=1)
            
            # Then plot the highlighted club on top with a more vibrant appearance
            if highlight in club_data:
                # Get highlight club data
                highlight_data = club_data[highlight]
                
                # Plot the main highlighted line with a subtle shadow effect for depth
                main_line = ax.plot(years, highlight_data, linewidth=4, linestyle='-', 
                                color='#2b7bba', zorder=3)[0]
                main_line.set_path_effects([path_effects.SimpleLineShadow(offset=(1, -1), alpha=0.3),
                                        path_effects.Normal()])
                
                # Add markers at each data point
                ax.scatter(years, highlight_data, s=80, color='#2b7bba', edgecolor='white', linewidth=1.5, zorder=4)
                
                # Annotate each point on the highlighted club's line with improved text styling
                for i, value in enumerate(highlight_data):
                    text = ax.annotate(f'{value:.0f}', 
                                    (years[i], value),
                                    textcoords="offset points",
                                    xytext=(0, 12),
                                    ha='center',
                                    va='bottom',
                                    fontsize=14,
                                    fontweight='bold',
                                    color='#2b7bba',
                                    zorder=5)
                    text.set_path_effects([path_effects.withStroke(linewidth=3, foreground='white')])
                    
                # Add club logo at the end of the line if club_image_paths is provided
                if club_image_paths and highlight in club_image_paths:
                    try:
                        # Function to get club logo
                        def get_club_image(url, zoom=0.15):
                            try:
                                response = requests.get(url)
                                img = Image.open(BytesIO(response.content))
                                if img.mode != 'RGBA':
                                    img = img.convert('RGBA')
                                return OffsetImage(img, zoom=zoom)
                            except Exception as e:
                                print(f"Error loading image from {url}: {e}")
                                return None
                        
                        # Get the logo and place it at the end of the line
                        img_url = club_image_paths.get(highlight)
                        if img_url:
                            img = get_club_image(img_url, zoom=0.18)
                            if img:
                                last_year = years[-1]
                                last_value = highlight_data[-1]
                                logo_box = AnnotationBbox(img, 
                                                        (last_year + 0.15, last_value),  # Position slightly after the line
                                                        frameon=False,
                                                        box_alignment=(0, 0.5),
                                                        zorder=6)
                                ax.add_artist(logo_box)
                    except Exception as e:
                        print(f"Error adding club logo: {e}")
            
            # Style adjustments
            ax.set_ylabel(f'{tema_cont} (R$ milhões)', fontsize=14, fontweight='bold')
            
            # Customize axis ticks and labels
            ax.tick_params(axis='both', which='major', labelsize=12)
            
            # Set integer x-ticks for years
            ax.set_xticks(years)
            ax.set_xticklabels([str(int(year)) for year in years])
            
            # Remove spines
            ax.spines['right'].set_visible(False)
            ax.spines['top'].set_visible(False)
            
            # Add subtle light gray background to the plot area
            ax.set_facecolor('#f9f9f9')
            
            # Adjust layout
            plt.tight_layout()
            
            return fig
            
        # Usage:
        fig = create_enhanced_time_series(years, club_data, highlight, tema_cont, club_image_paths)
        st.pyplot(fig)

#######################################################################################################################################
########################################################################################################################################


    elif tema_cont == "Dívida":
        markdown_1 = f"<div style='text-align:center;  color: black; font-weight: bold; font-size:{fontsize}px'>{tema_cont:}</div>"
        st.markdown("<h4 style='text-align: center;  color: black;'>Análise Comparativa Simples  (2024)</b></h4>", unsafe_allow_html=True)
        st.markdown(markdown_1, unsafe_allow_html=True)
        

        # Custom CSS for better formatting
        st.markdown("""
        <style>
            .main {
                padding: 2rem;
            }
            .stAlert {
                background-color: #f8f9fa;
                padding: 1rem;
                border-radius: 0.5rem;
                border-left: 5px solid #ff4b4b;
            }
            .info-box {
                background-color: #e6f3ff;
                padding: 1rem;
                border-radius: 0.5rem;
                border-left: 5px solid #4B8BF5;
                margin-bottom: 1rem;
            }
            h1, h2, h3 {
                color: #1E3A8A;
            }
            .katex {
                font-size: 1.1em;
            }
        </style>
        """, unsafe_allow_html=True)

        st.markdown("""
        <div class="info-box">
        <p>Adotei um conceito amplo de dívida, que observa a seguinte expressão: </p>
        <p>PC + PNC - (Caixa + Equivalentes de caixa) - Depósitos judiciais - Receitas diferidas - Contas a receber por vendas de atletas. </p>
        <p>Essa perspectiva é mais ampla do que o conceito de dívida histórica ou consolidada que reúne: </p>  
        <p>Dívidas bancárias + Parcelamentos + Profut + Acordos + Contingências + Partes Relacionadas</p>
        </div>
        """, unsafe_allow_html=True)
        
        st.markdown("---")

        tópico = df1.iloc[48, 1:].values

        # Pairing clubs with their revenues and sorting them by revenue in descending order
        paired_clubs_revenues = sorted(zip(clubes, tópico), key=lambda x: x[1], reverse=False)
        sorted_clubes, sorted_revenues = zip(*paired_clubs_revenues)

        def create_club_revenue_chart(sorted_clubes, sorted_revenues, club_image_paths, tema_cont):
            import matplotlib.pyplot as plt
            import numpy as np
            from PIL import Image
            from io import BytesIO
            import requests
            from matplotlib.offsetbox import OffsetImage, AnnotationBbox
            
            # Create figure
            fig, ax = plt.subplots(figsize=(15, 10))
            
            # Plot bars
            bars = ax.bar(range(len(sorted_clubes)), sorted_revenues, color='skyblue')
            
            # Set chart limits and style
            max_revenue = max(sorted_revenues)
            ax.set_xlim(-0.5, len(sorted_clubes)-0.5)
            ax.set_ylim(0, max_revenue*1.1)  # Add 10% space at top
            
            # Remove spines and x-ticks
            ax.spines['right'].set_visible(False)
            ax.spines['top'].set_visible(False)
            ax.spines['bottom'].set_visible(False)
            ax.spines['left'].set_visible(False)
            ax.set_xticks([])
            
            # Add y-axis label
            ax.set_ylabel(f'{tema_cont} (R$ milhões)', fontsize=22, fontweight='bold')
            ax.tick_params(axis='y', labelsize=16)
            
            # Function to get club logo
            def getImage(url):
                try:
                    response = requests.get(url)
                    img = Image.open(BytesIO(response.content))
                    
                    # Make sure image has transparency
                    if img.mode != 'RGBA':
                        img = img.convert('RGBA')
                        
                    return OffsetImage(img, zoom=0.18)  # Slightly increased from original 0.15
                except Exception as e:
                    print(f"Error loading image from {url}: {e}")
                    return None
            
            # Add value labels above bars
            for bar in bars:
                height = bar.get_height()
                ax.annotate(f'{height:.0f}',
                        xy=(bar.get_x() + bar.get_width() / 2, height),
                        xytext=(0, 3),  # 3 points vertical offset
                        textcoords="offset points",
                        ha='center', va='bottom', fontsize=16)
            
            # Create a small margin at the bottom for the icons
            # Instead of using a separate subplot, we'll add the icons directly at the bottom of the chart
            # Add an invisible bar at the bottom to make space
            bottom_margin = max_revenue * 0.12  # Small margin for icons
            ax.set_ylim(-bottom_margin, max_revenue*1.1)  # Update y-limits to include margin
            
            # Add club logos - position them right at the bottom of the chart
            for i, club in enumerate(sorted_clubes):
                img_url = club_image_paths.get(club)
                if img_url:
                    img = getImage(img_url)
                    if img:
                        # Position just below the x-axis
                        ab = AnnotationBbox(
                            img, 
                            (i, -bottom_margin * 0.5),  # Position in the middle of the bottom margin
                            xycoords='data',
                            box_alignment=(0.5, 0.5),
                            frameon=False
                        )
                        ax.add_artist(ab)
            
            fig.tight_layout()
            return fig

        # Usage:
        fig = create_club_revenue_chart(sorted_clubes, sorted_revenues, club_image_paths, tema_cont)
        st.pyplot(fig)

#######################################################################################################################################

        st.markdown("<h4 style='text-align: center;  color: black;'>Análise Comparativa 2020-2024 (em moeda constante)</b></h4>", unsafe_allow_html=True)
        markdown_1 = f"<div style='text-align:center;  color: black; font-weight: bold; font-size:{fontsize}px'>{highlight:} (em destaque)</div>"
        st.markdown(markdown_1, unsafe_allow_html=True)
        st.markdown("---")

        years = ['2020', '2021', '2022', '2023', '2024']

        tópico2 = df3.iloc[29, 1:].values
        club_data = {
            'Atlético GO': tópico2[:5][::-1][:5],
            'Atlético': tópico2[5:10][::-1][:5],
            'Athletico': tópico2[10:15][::-1][:5],
            'Bahia': tópico2[15:20][::-1][:5],
            'Botafogo': tópico2[20:25][::-1][:5],
            'Corinthians': tópico2[25:30][::-1][:5],
            'Vitória': tópico2[30:35][::-1][:5],
            'Cruzeiro': tópico2[35:40][::-1][:5],
            'Cuiabá': tópico2[40:45][::-1][:5],
            'Flamengo': tópico2[45:50][::-1][:5],
            'Fluminense': tópico2[50:55][::-1][:5],
            'Fortaleza': tópico2[55:60][::-1][:5],
            'Grêmio': tópico2[60:65][::-1][:5],
            'Criciúma': tópico2[65:70][::-1][:5],
            'Internacional': tópico2[70:75][::-1][:5],
            'Palmeiras': tópico2[75:80][::-1][:5],
            'Juventude': tópico2[80:85][::-1][:5],
            'São Paulo': tópico2[85:90][::-1][:5],
            'Vasco': tópico2[90:95][::-1][:5],
        }

        def create_enhanced_time_series(years, club_data, highlight, tema_cont, club_image_paths=None):
            import matplotlib.pyplot as plt
            import matplotlib.patheffects as path_effects
            from matplotlib.offsetbox import OffsetImage, AnnotationBbox
            import numpy as np
            from PIL import Image
            import requests
            from io import BytesIO
            
            # Create figure with improved dimensions and DPI
            fig, ax = plt.subplots(figsize=(12, 8), dpi=100)
            
            # Add subtle grid for better readability
            ax.grid(axis='y', linestyle='--', alpha=0.2, zorder=0)
            
            # Track other clubs to create color gradient
            other_clubs = [club for club in club_data.keys() if club != highlight]
            
            # First, plot all non-highlighted clubs with faded color
            for i, club in enumerate(other_clubs):
                data = club_data[club]
                ax.plot(years, data, linewidth=1, linestyle='--', color=('gray'), 
                        alpha=0.6, zorder=1)
            
            # Then plot the highlighted club on top with a more vibrant appearance
            if highlight in club_data:
                # Get highlight club data
                highlight_data = club_data[highlight]
                
                # Plot the main highlighted line with a subtle shadow effect for depth
                main_line = ax.plot(years, highlight_data, linewidth=4, linestyle='-', 
                                color='#2b7bba', zorder=3)[0]
                main_line.set_path_effects([path_effects.SimpleLineShadow(offset=(1, -1), alpha=0.3),
                                        path_effects.Normal()])
                
                # Add markers at each data point
                ax.scatter(years, highlight_data, s=80, color='#2b7bba', edgecolor='white', linewidth=1.5, zorder=4)
                
                # Annotate each point on the highlighted club's line with improved text styling
                for i, value in enumerate(highlight_data):
                    text = ax.annotate(f'{value:.0f}', 
                                    (years[i], value),
                                    textcoords="offset points",
                                    xytext=(0, 12),
                                    ha='center',
                                    va='bottom',
                                    fontsize=14,
                                    fontweight='bold',
                                    color='#2b7bba',
                                    zorder=5)
                    text.set_path_effects([path_effects.withStroke(linewidth=3, foreground='white')])
                    
                # Add club logo at the end of the line if club_image_paths is provided
                if club_image_paths and highlight in club_image_paths:
                    try:
                        # Function to get club logo
                        def get_club_image(url, zoom=0.15):
                            try:
                                response = requests.get(url)
                                img = Image.open(BytesIO(response.content))
                                if img.mode != 'RGBA':
                                    img = img.convert('RGBA')
                                return OffsetImage(img, zoom=zoom)
                            except Exception as e:
                                print(f"Error loading image from {url}: {e}")
                                return None
                        
                        # Get the logo and place it at the end of the line
                        img_url = club_image_paths.get(highlight)
                        if img_url:
                            img = get_club_image(img_url, zoom=0.18)
                            if img:
                                last_year = years[-1]
                                last_value = highlight_data[-1]
                                logo_box = AnnotationBbox(img, 
                                                        (last_year + 0.15, last_value),  # Position slightly after the line
                                                        frameon=False,
                                                        box_alignment=(0, 0.5),
                                                        zorder=6)
                                ax.add_artist(logo_box)
                    except Exception as e:
                        print(f"Error adding club logo: {e}")
            
            # Style adjustments
            ax.set_ylabel(f'{tema_cont} (R$ milhões)', fontsize=14, fontweight='bold')
            
            # Customize axis ticks and labels
            ax.tick_params(axis='both', which='major', labelsize=12)
            
            # Set integer x-ticks for years
            ax.set_xticks(years)
            ax.set_xticklabels([str(int(year)) for year in years])
            
            # Remove spines
            ax.spines['right'].set_visible(False)
            ax.spines['top'].set_visible(False)
            
            # Add subtle light gray background to the plot area
            ax.set_facecolor('#f9f9f9')
            
            # Adjust layout
            plt.tight_layout()
            
            return fig
            
        # Usage:
        fig = create_enhanced_time_series(years, club_data, highlight, tema_cont, club_image_paths)
        st.pyplot(fig)

#######################################################################################################################################
########################################################################################################################################

    elif tema_cont == "Despesas gerais e administrativas":
        markdown_1 = f"<div style='text-align:center;  color: black; font-weight: bold; font-size:{fontsize}px'>{tema_cont:}</div>"
        st.markdown("<h4 style='text-align: center;  color: black;'>Análise Comparativa Simples  (2024)</b></h4>", unsafe_allow_html=True)
        st.markdown(markdown_1, unsafe_allow_html=True)
        st.markdown("---")

        tópico = df1.iloc[13, 1:].values

        # Pairing clubs with their revenues and sorting them by revenue in descending order
        paired_clubs_revenues = sorted(zip(clubes, tópico), key=lambda x: x[1], reverse=False)
        sorted_clubes, sorted_revenues = zip(*paired_clubs_revenues)

        def create_club_revenue_chart(sorted_clubes, sorted_revenues, club_image_paths, tema_cont):
            import matplotlib.pyplot as plt
            import numpy as np
            from PIL import Image
            from io import BytesIO
            import requests
            from matplotlib.offsetbox import OffsetImage, AnnotationBbox
            
            # Create figure
            fig, ax = plt.subplots(figsize=(15, 10))
            
            # Plot bars
            bars = ax.bar(range(len(sorted_clubes)), sorted_revenues, color='skyblue')
            
            # Set chart limits and style
            max_revenue = max(sorted_revenues)
            ax.set_xlim(-0.5, len(sorted_clubes)-0.5)
            ax.set_ylim(0, max_revenue*1.1)  # Add 10% space at top
            
            # Remove spines and x-ticks
            ax.spines['right'].set_visible(False)
            ax.spines['top'].set_visible(False)
            ax.spines['bottom'].set_visible(False)
            ax.spines['left'].set_visible(False)
            ax.set_xticks([])
            
            # Add y-axis label
            ax.set_ylabel(f'{tema_cont} (R$ milhões)', fontsize=22, fontweight='bold')
            ax.tick_params(axis='y', labelsize=16)
            
            # Function to get club logo
            def getImage(url):
                try:
                    response = requests.get(url)
                    img = Image.open(BytesIO(response.content))
                    
                    # Make sure image has transparency
                    if img.mode != 'RGBA':
                        img = img.convert('RGBA')
                        
                    return OffsetImage(img, zoom=0.18)  # Slightly increased from original 0.15
                except Exception as e:
                    print(f"Error loading image from {url}: {e}")
                    return None
            
            # Add value labels above bars
            for bar in bars:
                height = bar.get_height()
                ax.annotate(f'{height:.0f}',
                        xy=(bar.get_x() + bar.get_width() / 2, height),
                        xytext=(0, 3),  # 3 points vertical offset
                        textcoords="offset points",
                        ha='center', va='bottom', fontsize=16)
            
            # Create a small margin at the bottom for the icons
            # Instead of using a separate subplot, we'll add the icons directly at the bottom of the chart
            # Add an invisible bar at the bottom to make space
            bottom_margin = max_revenue * 0.12  # Small margin for icons
            ax.set_ylim(-bottom_margin, max_revenue*1.1)  # Update y-limits to include margin
            
            # Add club logos - position them right at the bottom of the chart
            for i, club in enumerate(sorted_clubes):
                img_url = club_image_paths.get(club)
                if img_url:
                    img = getImage(img_url)
                    if img:
                        # Position just below the x-axis
                        ab = AnnotationBbox(
                            img, 
                            (i, -bottom_margin * 0.5),  # Position in the middle of the bottom margin
                            xycoords='data',
                            box_alignment=(0.5, 0.5),
                            frameon=False
                        )
                        ax.add_artist(ab)
            
            fig.tight_layout()
            return fig

        # Usage:
        fig = create_club_revenue_chart(sorted_clubes, sorted_revenues, club_image_paths, tema_cont)
        st.pyplot(fig)

#######################################################################################################################################
######################################################################################################################################
########################################################################################################################################

    elif tema_cont == "Despesas totais":
        markdown_1 = f"<div style='text-align:center;  color: black; font-weight: bold; font-size:{fontsize}px'>{tema_cont:}</div>"
        st.markdown("<h4 style='text-align: center;  color: black;'>Análise Comparativa Simples  (2024)</b></h4>", unsafe_allow_html=True)
        st.markdown(markdown_1, unsafe_allow_html=True)
        st.markdown("---")

        tópico = df1.iloc[16, 1:].values

        # Pairing clubs with their revenues and sorting them by revenue in descending order
        paired_clubs_revenues = sorted(zip(clubes, tópico), key=lambda x: x[1], reverse=False)
        sorted_clubes, sorted_revenues = zip(*paired_clubs_revenues)

        def create_club_revenue_chart(sorted_clubes, sorted_revenues, club_image_paths, tema_cont):
            import matplotlib.pyplot as plt
            import numpy as np
            from PIL import Image
            from io import BytesIO
            import requests
            from matplotlib.offsetbox import OffsetImage, AnnotationBbox
            
            # Create figure
            fig, ax = plt.subplots(figsize=(15, 10))
            
            # Plot bars
            bars = ax.bar(range(len(sorted_clubes)), sorted_revenues, color='skyblue')
            
            # Set chart limits and style
            max_revenue = max(sorted_revenues)
            ax.set_xlim(-0.5, len(sorted_clubes)-0.5)
            ax.set_ylim(0, max_revenue*1.1)  # Add 10% space at top
            
            # Remove spines and x-ticks
            ax.spines['right'].set_visible(False)
            ax.spines['top'].set_visible(False)
            ax.spines['bottom'].set_visible(False)
            ax.spines['left'].set_visible(False)
            ax.set_xticks([])
            
            # Add y-axis label
            ax.set_ylabel(f'{tema_cont} (R$ milhões)', fontsize=22, fontweight='bold')
            ax.tick_params(axis='y', labelsize=16)
            
            # Function to get club logo
            def getImage(url):
                try:
                    response = requests.get(url)
                    img = Image.open(BytesIO(response.content))
                    
                    # Make sure image has transparency
                    if img.mode != 'RGBA':
                        img = img.convert('RGBA')
                        
                    return OffsetImage(img, zoom=0.18)  # Slightly increased from original 0.15
                except Exception as e:
                    print(f"Error loading image from {url}: {e}")
                    return None
            
            # Add value labels above bars
            for bar in bars:
                height = bar.get_height()
                ax.annotate(f'{height:.0f}',
                        xy=(bar.get_x() + bar.get_width() / 2, height),
                        xytext=(0, 3),  # 3 points vertical offset
                        textcoords="offset points",
                        ha='center', va='bottom', fontsize=16)
            
            # Create a small margin at the bottom for the icons
            # Instead of using a separate subplot, we'll add the icons directly at the bottom of the chart
            # Add an invisible bar at the bottom to make space
            bottom_margin = max_revenue * 0.12  # Small margin for icons
            ax.set_ylim(-bottom_margin, max_revenue*1.1)  # Update y-limits to include margin
            
            # Add club logos - position them right at the bottom of the chart
            for i, club in enumerate(sorted_clubes):
                img_url = club_image_paths.get(club)
                if img_url:
                    img = getImage(img_url)
                    if img:
                        # Position just below the x-axis
                        ab = AnnotationBbox(
                            img, 
                            (i, -bottom_margin * 0.5),  # Position in the middle of the bottom margin
                            xycoords='data',
                            box_alignment=(0.5, 0.5),
                            frameon=False
                        )
                        ax.add_artist(ab)
            
            fig.tight_layout()
            return fig

        # Usage:
        fig = create_club_revenue_chart(sorted_clubes, sorted_revenues, club_image_paths, tema_cont)
        st.pyplot(fig)


#######################################################################################################################################
########################################################################################################################################
########################################################################################################################################
########################################################################################################################################
    st.write("---")
    st.markdown("<h5 style='text-align: center; color: black;'>Escolha o Indicador Esportivo</b></h5>", unsafe_allow_html=True)
    tema_esport = st.selectbox("", options=temas_esport, index=None, placeholder="Escolha o Indicador Esportivo!")
    fontsize = 24
    if tema_esport == "Folha do futebol":
        markdown_1 = f"<div style='text-align:center;  color: black; font-weight: bold; font-size:{fontsize}px'>{tema_esport:}</div>"
        st.markdown("<h4 style='text-align: center;  color: black;'>Análise Comparativa Simples  (2024)</b></h4>", unsafe_allow_html=True)
        st.markdown(markdown_1, unsafe_allow_html=True)

        # Custom CSS for better formatting
        st.markdown("""
        <style>
            .main {
                padding: 2rem;
            }
            .stAlert {
                background-color: #f8f9fa;
                padding: 1rem;
                border-radius: 0.5rem;
                border-left: 5px solid #ff4b4b;
            }
            .info-box {
                background-color: #e6f3ff;
                padding: 1rem;
                border-radius: 0.5rem;
                border-left: 5px solid #4B8BF5;
                margin-bottom: 1rem;
            }
            h1, h2, h3 {
                color: #1E3A8A;
            }
            .katex {
                font-size: 1.1em;
            }
        </style>
        """, unsafe_allow_html=True)

        st.markdown("""
        <div class="info-box">
        <p>A maioria dos clubes não detalha com clareza os valores de salários, encargos e despesas de imagem do elenco. 
        Dessa forma, para permitir a comparação entre os clubes, os valores utilizados como "Folha do futebol" envolvem 
        a totalidade dessas despesas na atividade esportiva (futebol), incluindo profissional, base e feminino. </p>
        </div>
        """, unsafe_allow_html=True)
        
        st.markdown("---")

        tópico = df1.iloc[26, 1:].values

        # Pairing clubs with their revenues and sorting them by revenue in descending order
        paired_clubs_revenues = sorted(zip(clubes, tópico), key=lambda x: x[1], reverse=True)
        sorted_clubes, sorted_revenues = zip(*paired_clubs_revenues)

        def create_club_revenue_chart(sorted_clubes, sorted_revenues, club_image_paths, tema_esport):
            import matplotlib.pyplot as plt
            import numpy as np
            from PIL import Image
            from io import BytesIO
            import requests
            from matplotlib.offsetbox import OffsetImage, AnnotationBbox
            
            # Create figure
            fig, ax = plt.subplots(figsize=(15, 10))
            
            # Plot bars
            bars = ax.bar(range(len(sorted_clubes)), sorted_revenues, color='skyblue')
            
            # Set chart limits and style
            max_revenue = max(sorted_revenues)
            ax.set_xlim(-0.5, len(sorted_clubes)-0.5)
            ax.set_ylim(0, max_revenue*1.1)  # Add 10% space at top
            
            # Remove spines and x-ticks
            ax.spines['right'].set_visible(False)
            ax.spines['top'].set_visible(False)
            ax.spines['bottom'].set_visible(False)
            ax.spines['left'].set_visible(False)
            ax.set_xticks([])
            
            # Add y-axis label
            ax.set_ylabel(f'{tema_esport} (R$ milhões)', fontsize=22, fontweight='bold')
            ax.tick_params(axis='y', labelsize=16)
            
            # Function to get club logo
            def getImage(url):
                try:
                    response = requests.get(url)
                    img = Image.open(BytesIO(response.content))
                    
                    # Make sure image has transparency
                    if img.mode != 'RGBA':
                        img = img.convert('RGBA')
                        
                    return OffsetImage(img, zoom=0.18)  # Slightly increased from original 0.15
                except Exception as e:
                    print(f"Error loading image from {url}: {e}")
                    return None
            
            # Add value labels above bars
            for bar in bars:
                height = bar.get_height()
                ax.annotate(f'{height:.0f}',
                        xy=(bar.get_x() + bar.get_width() / 2, height),
                        xytext=(0, 3),  # 3 points vertical offset
                        textcoords="offset points",
                        ha='center', va='bottom', fontsize=16)
            
            # Create a small margin at the bottom for the icons
            # Instead of using a separate subplot, we'll add the icons directly at the bottom of the chart
            # Add an invisible bar at the bottom to make space
            bottom_margin = max_revenue * 0.12  # Small margin for icons
            ax.set_ylim(-bottom_margin, max_revenue*1.1)  # Update y-limits to include margin
            
            # Add club logos - position them right at the bottom of the chart
            for i, club in enumerate(sorted_clubes):
                img_url = club_image_paths.get(club)
                if img_url:
                    img = getImage(img_url)
                    if img:
                        # Position just below the x-axis
                        ab = AnnotationBbox(
                            img, 
                            (i, -bottom_margin * 0.5),  # Position in the middle of the bottom margin
                            xycoords='data',
                            box_alignment=(0.5, 0.5),
                            frameon=False
                        )
                        ax.add_artist(ab)
            
            fig.tight_layout()
            return fig

        # Usage:
        fig = create_club_revenue_chart(sorted_clubes, sorted_revenues, club_image_paths, tema_esport)
        st.pyplot(fig)

#######################################################################################################################################

        st.markdown("<h4 style='text-align: center;  color: black;'>Análise Comparativa 2020-2024 (em moeda constante)</b></h4>", unsafe_allow_html=True)
        markdown_1 = f"<div style='text-align:center;  color: black; font-weight: bold; font-size:{fontsize}px'>{highlight:} (em destaque)</div>"
        st.markdown(markdown_1, unsafe_allow_html=True)
        st.markdown("---")

        years = ['2020', '2021', '2022', '2023', '2024']

        tópico2 = df3.iloc[10, 1:].values
        club_data = {
            'Atlético GO': tópico2[:5][::-1][:5],
            'Atlético': tópico2[5:10][::-1][:5],
            'Athletico': tópico2[10:15][::-1][:5],
            'Bahia': tópico2[15:20][::-1][:5],
            'Botafogo': tópico2[20:25][::-1][:5],
            'Corinthians': tópico2[25:30][::-1][:5],
            'Vitória': tópico2[30:35][::-1][:5],
            'Cruzeiro': tópico2[35:40][::-1][:5],
            'Cuiabá': tópico2[40:45][::-1][:5],
            'Flamengo': tópico2[45:50][::-1][:5],
            'Fluminense': tópico2[50:55][::-1][:5],
            'Fortaleza': tópico2[55:60][::-1][:5],
            'Grêmio': tópico2[60:65][::-1][:5],
            'Criciúma': tópico2[65:70][::-1][:5],
            'Internacional': tópico2[70:75][::-1][:5],
            'Palmeiras': tópico2[75:80][::-1][:5],
            'Juventude': tópico2[80:85][::-1][:5],
            'São Paulo': tópico2[85:90][::-1][:5],
            'Vasco': tópico2[90:95][::-1][:5],
        }

        def create_enhanced_time_series(years, club_data, highlight, tema_esport, club_image_paths=None):
            import matplotlib.pyplot as plt
            import matplotlib.patheffects as path_effects
            from matplotlib.offsetbox import OffsetImage, AnnotationBbox
            import numpy as np
            from PIL import Image
            import requests
            from io import BytesIO
            
            # Create figure with improved dimensions and DPI
            fig, ax = plt.subplots(figsize=(12, 8), dpi=100)
            
            # Add subtle grid for better readability
            ax.grid(axis='y', linestyle='--', alpha=0.2, zorder=0)
            
            # Track other clubs to create color gradient
            other_clubs = [club for club in club_data.keys() if club != highlight]
            
            # First, plot all non-highlighted clubs with faded color
            for i, club in enumerate(other_clubs):
                data = club_data[club]
                ax.plot(years, data, linewidth=1, linestyle='--', color=('gray'), 
                        alpha=0.6, zorder=1)
            
            # Then plot the highlighted club on top with a more vibrant appearance
            if highlight in club_data:
                # Get highlight club data
                highlight_data = club_data[highlight]
                
                # Plot the main highlighted line with a subtle shadow effect for depth
                main_line = ax.plot(years, highlight_data, linewidth=4, linestyle='-', 
                                color='#2b7bba', zorder=3)[0]
                main_line.set_path_effects([path_effects.SimpleLineShadow(offset=(1, -1), alpha=0.3),
                                        path_effects.Normal()])
                
                # Add markers at each data point
                ax.scatter(years, highlight_data, s=80, color='#2b7bba', edgecolor='white', linewidth=1.5, zorder=4)
                
                # Annotate each point on the highlighted club's line with improved text styling
                for i, value in enumerate(highlight_data):
                    text = ax.annotate(f'{value:.0f}', 
                                    (years[i], value),
                                    textcoords="offset points",
                                    xytext=(0, 12),
                                    ha='center',
                                    va='bottom',
                                    fontsize=14,
                                    fontweight='bold',
                                    color='#2b7bba',
                                    zorder=5)
                    text.set_path_effects([path_effects.withStroke(linewidth=3, foreground='white')])
                    
                # Add club logo at the end of the line if club_image_paths is provided
                if club_image_paths and highlight in club_image_paths:
                    try:
                        # Function to get club logo
                        def get_club_image(url, zoom=0.15):
                            try:
                                response = requests.get(url)
                                img = Image.open(BytesIO(response.content))
                                if img.mode != 'RGBA':
                                    img = img.convert('RGBA')
                                return OffsetImage(img, zoom=zoom)
                            except Exception as e:
                                print(f"Error loading image from {url}: {e}")
                                return None
                        
                        # Get the logo and place it at the end of the line
                        img_url = club_image_paths.get(highlight)
                        if img_url:
                            img = get_club_image(img_url, zoom=0.18)
                            if img:
                                last_year = years[-1]
                                last_value = highlight_data[-1]
                                logo_box = AnnotationBbox(img, 
                                                        (last_year + 0.15, last_value),  # Position slightly after the line
                                                        frameon=False,
                                                        box_alignment=(0, 0.5),
                                                        zorder=6)
                                ax.add_artist(logo_box)
                    except Exception as e:
                        print(f"Error adding club logo: {e}")
            
            # Style adjustments
            ax.set_ylabel(f'{tema_esport} (R$ milhões)', fontsize=14, fontweight='bold')
            
            # Customize axis ticks and labels
            ax.tick_params(axis='both', which='major', labelsize=12)
            
            # Set integer x-ticks for years
            ax.set_xticks(years)
            ax.set_xticklabels([str(int(year)) for year in years])
            
            # Remove spines
            ax.spines['right'].set_visible(False)
            ax.spines['top'].set_visible(False)
            
            # Add subtle light gray background to the plot area
            ax.set_facecolor('#f9f9f9')
            
            # Adjust layout
            plt.tight_layout()
            
            return fig
            
        # Usage:
        fig = create_enhanced_time_series(years, club_data, highlight, tema_esport, club_image_paths)
        st.pyplot(fig)

########################################################################################################################################
########################################################################################################################################
    elif tema_esport == "Ticket médio":
        markdown_1 = f"<div style='text-align:center; color: black; font-weight: bold; font-size:{fontsize}px'>{tema_esport}<br><span style='font-weight: normal;'>(Match-Day + Sócio Torcedor) / Público Pagante</span></div>"
        st.markdown("<h4 style='text-align: center;  color: black;'>Análise Comparativa Simples  (2024)</b></h4>", unsafe_allow_html=True)
        st.markdown(markdown_1, unsafe_allow_html=True)
        st.markdown("---")

        tópico = df1.iloc[58, 1:].values

        # Pairing clubs with their revenues and sorting them by revenue in descending order
        paired_clubs_revenues = sorted(zip(clubes, tópico), key=lambda x: x[1], reverse=True)
        sorted_clubes, sorted_revenues = zip(*paired_clubs_revenues)

        def create_club_revenue_chart(sorted_clubes, sorted_revenues, club_image_paths, tema_esport):
            import matplotlib.pyplot as plt
            import numpy as np
            from PIL import Image
            from io import BytesIO
            import requests
            from matplotlib.offsetbox import OffsetImage, AnnotationBbox
            
            # Create figure
            fig, ax = plt.subplots(figsize=(15, 10))
            
            # Plot bars
            bars = ax.bar(range(len(sorted_clubes)), sorted_revenues, color='skyblue')
            
            # Set chart limits and style
            max_revenue = max(sorted_revenues)
            ax.set_xlim(-0.5, len(sorted_clubes)-0.5)
            ax.set_ylim(0, max_revenue*1.1)  # Add 10% space at top
            
            # Remove spines and x-ticks
            ax.spines['right'].set_visible(False)
            ax.spines['top'].set_visible(False)
            ax.spines['bottom'].set_visible(False)
            ax.spines['left'].set_visible(False)
            ax.set_xticks([])
            
            # Add y-axis label
            ax.set_ylabel(f'{tema_esport} (R$ milhões)', fontsize=22, fontweight='bold')
            ax.tick_params(axis='y', labelsize=16)
            
            # Function to get club logo
            def getImage(url):
                try:
                    response = requests.get(url)
                    img = Image.open(BytesIO(response.content))
                    
                    # Make sure image has transparency
                    if img.mode != 'RGBA':
                        img = img.convert('RGBA')
                        
                    return OffsetImage(img, zoom=0.18)  # Slightly increased from original 0.15
                except Exception as e:
                    print(f"Error loading image from {url}: {e}")
                    return None
            
            # Add value labels above bars
            for bar in bars:
                height = bar.get_height()
                ax.annotate(f'{height:.0f}',
                        xy=(bar.get_x() + bar.get_width() / 2, height),
                        xytext=(0, 3),  # 3 points vertical offset
                        textcoords="offset points",
                        ha='center', va='bottom', fontsize=16)
            
            # Create a small margin at the bottom for the icons
            # Instead of using a separate subplot, we'll add the icons directly at the bottom of the chart
            # Add an invisible bar at the bottom to make space
            bottom_margin = max_revenue * 0.12  # Small margin for icons
            ax.set_ylim(-bottom_margin, max_revenue*1.1)  # Update y-limits to include margin
            
            # Add club logos - position them right at the bottom of the chart
            for i, club in enumerate(sorted_clubes):
                img_url = club_image_paths.get(club)
                if img_url:
                    img = getImage(img_url)
                    if img:
                        # Position just below the x-axis
                        ab = AnnotationBbox(
                            img, 
                            (i, -bottom_margin * 0.5),  # Position in the middle of the bottom margin
                            xycoords='data',
                            box_alignment=(0.5, 0.5),
                            frameon=False
                        )
                        ax.add_artist(ab)
            
            fig.tight_layout()
            return fig

        # Usage:
        fig = create_club_revenue_chart(sorted_clubes, sorted_revenues, club_image_paths, tema_esport)
        st.pyplot(fig)

#######################################################################################################################################
###TOO MUCH MISSING DATA

#######################################################################################################################################
########################################################################################################################################

    elif tema_esport == "Aquisições de atletas":
        markdown_1 = f"<div style='text-align:center;  color: black; font-weight: bold; font-size:{fontsize}px'>{tema_esport:}</div>"
        st.markdown("<h4 style='text-align: center;  color: black;'>Análise Comparativa Simples  (2024)</b></h4>", unsafe_allow_html=True)
        st.markdown(markdown_1, unsafe_allow_html=True)
        st.markdown("---")

        tópico = df1.iloc[22, 1:].values

        # Pairing clubs with their revenues and sorting them by revenue in descending order
        paired_clubs_revenues = sorted(zip(clubes, tópico), key=lambda x: x[1], reverse=True)
        sorted_clubes, sorted_revenues = zip(*paired_clubs_revenues)

        def create_club_revenue_chart(sorted_clubes, sorted_revenues, club_image_paths, tema_esport):
            import matplotlib.pyplot as plt
            import numpy as np
            from PIL import Image
            from io import BytesIO
            import requests
            from matplotlib.offsetbox import OffsetImage, AnnotationBbox
            
            # Create figure
            fig, ax = plt.subplots(figsize=(15, 10))
            
            # Plot bars
            bars = ax.bar(range(len(sorted_clubes)), sorted_revenues, color='skyblue')
            
            # Set chart limits and style
            max_revenue = max(sorted_revenues)
            ax.set_xlim(-0.5, len(sorted_clubes)-0.5)
            ax.set_ylim(0, max_revenue*1.1)  # Add 10% space at top
            
            # Remove spines and x-ticks
            ax.spines['right'].set_visible(False)
            ax.spines['top'].set_visible(False)
            ax.spines['bottom'].set_visible(False)
            ax.spines['left'].set_visible(False)
            ax.set_xticks([])
            
            # Add y-axis label
            ax.set_ylabel(f'{tema_esport} (R$ milhões)', fontsize=22, fontweight='bold')
            ax.tick_params(axis='y', labelsize=16)
            
            # Function to get club logo
            def getImage(url):
                try:
                    response = requests.get(url)
                    img = Image.open(BytesIO(response.content))
                    
                    # Make sure image has transparency
                    if img.mode != 'RGBA':
                        img = img.convert('RGBA')
                        
                    return OffsetImage(img, zoom=0.18)  # Slightly increased from original 0.15
                except Exception as e:
                    print(f"Error loading image from {url}: {e}")
                    return None
            
            # Add value labels above bars
            for bar in bars:
                height = bar.get_height()
                ax.annotate(f'{height:.0f}',
                        xy=(bar.get_x() + bar.get_width() / 2, height),
                        xytext=(0, 3),  # 3 points vertical offset
                        textcoords="offset points",
                        ha='center', va='bottom', fontsize=16)
            
            # Create a small margin at the bottom for the icons
            # Instead of using a separate subplot, we'll add the icons directly at the bottom of the chart
            # Add an invisible bar at the bottom to make space
            bottom_margin = max_revenue * 0.12  # Small margin for icons
            ax.set_ylim(-bottom_margin, max_revenue*1.1)  # Update y-limits to include margin
            
            # Add club logos - position them right at the bottom of the chart
            for i, club in enumerate(sorted_clubes):
                img_url = club_image_paths.get(club)
                if img_url:
                    img = getImage(img_url)
                    if img:
                        # Position just below the x-axis
                        ab = AnnotationBbox(
                            img, 
                            (i, -bottom_margin * 0.5),  # Position in the middle of the bottom margin
                            xycoords='data',
                            box_alignment=(0.5, 0.5),
                            frameon=False
                        )
                        ax.add_artist(ab)
            
            fig.tight_layout()
            return fig

        # Usage:
        fig = create_club_revenue_chart(sorted_clubes, sorted_revenues, club_image_paths, tema_esport)
        st.pyplot(fig)

#######################################################################################################################################

        st.markdown("<h4 style='text-align: center;  color: black;'>Análise Comparativa 2020-2024 (em moeda constante)</b></h4>", unsafe_allow_html=True)
        markdown_1 = f"<div style='text-align:center;  color: black; font-weight: bold; font-size:{fontsize}px'>{highlight:} (em destaque)</div>"
        st.markdown(markdown_1, unsafe_allow_html=True)
        st.markdown("---")

        years = ['2020', '2021', '2022', '2023', '2024']

        tópico2 = df3.iloc[13, 1:].values
        club_data = {
            'Atlético GO': tópico2[:5][::-1][:5],
            'Atlético': tópico2[5:10][::-1][:5],
            'Athletico': tópico2[10:15][::-1][:5],
            'Bahia': tópico2[15:20][::-1][:5],
            'Botafogo': tópico2[20:25][::-1][:5],
            'Corinthians': tópico2[25:30][::-1][:5],
            'Vitória': tópico2[30:35][::-1][:5],
            'Cruzeiro': tópico2[35:40][::-1][:5],
            'Cuiabá': tópico2[40:45][::-1][:5],
            'Flamengo': tópico2[45:50][::-1][:5],
            'Fluminense': tópico2[50:55][::-1][:5],
            'Fortaleza': tópico2[55:60][::-1][:5],
            'Grêmio': tópico2[60:65][::-1][:5],
            'Criciúma': tópico2[65:70][::-1][:5],
            'Internacional': tópico2[70:75][::-1][:5],
            'Palmeiras': tópico2[75:80][::-1][:5],
            'Juventude': tópico2[80:85][::-1][:5],
            'São Paulo': tópico2[85:90][::-1][:5],
            'Vasco': tópico2[90:95][::-1][:5],
        }

        def create_enhanced_time_series(years, club_data, highlight, tema_esport, club_image_paths=None):
            import matplotlib.pyplot as plt
            import matplotlib.patheffects as path_effects
            from matplotlib.offsetbox import OffsetImage, AnnotationBbox
            import numpy as np
            from PIL import Image
            import requests
            from io import BytesIO
            
            # Create figure with improved dimensions and DPI
            fig, ax = plt.subplots(figsize=(12, 8), dpi=100)
            
            # Add subtle grid for better readability
            ax.grid(axis='y', linestyle='--', alpha=0.2, zorder=0)
            
            # Track other clubs to create color gradient
            other_clubs = [club for club in club_data.keys() if club != highlight]
            
            # First, plot all non-highlighted clubs with faded color
            for i, club in enumerate(other_clubs):
                data = club_data[club]
                ax.plot(years, data, linewidth=1, linestyle='--', color=('gray'), 
                        alpha=0.6, zorder=1)
            
            # Then plot the highlighted club on top with a more vibrant appearance
            if highlight in club_data:
                # Get highlight club data
                highlight_data = club_data[highlight]
                
                # Plot the main highlighted line with a subtle shadow effect for depth
                main_line = ax.plot(years, highlight_data, linewidth=4, linestyle='-', 
                                color='#2b7bba', zorder=3)[0]
                main_line.set_path_effects([path_effects.SimpleLineShadow(offset=(1, -1), alpha=0.3),
                                        path_effects.Normal()])
                
                # Add markers at each data point
                ax.scatter(years, highlight_data, s=80, color='#2b7bba', edgecolor='white', linewidth=1.5, zorder=4)
                
                # Annotate each point on the highlighted club's line with improved text styling
                for i, value in enumerate(highlight_data):
                    text = ax.annotate(f'{value:.0f}', 
                                    (years[i], value),
                                    textcoords="offset points",
                                    xytext=(0, 12),
                                    ha='center',
                                    va='bottom',
                                    fontsize=14,
                                    fontweight='bold',
                                    color='#2b7bba',
                                    zorder=5)
                    text.set_path_effects([path_effects.withStroke(linewidth=3, foreground='white')])
                    
                # Add club logo at the end of the line if club_image_paths is provided
                if club_image_paths and highlight in club_image_paths:
                    try:
                        # Function to get club logo
                        def get_club_image(url, zoom=0.15):
                            try:
                                response = requests.get(url)
                                img = Image.open(BytesIO(response.content))
                                if img.mode != 'RGBA':
                                    img = img.convert('RGBA')
                                return OffsetImage(img, zoom=zoom)
                            except Exception as e:
                                print(f"Error loading image from {url}: {e}")
                                return None
                        
                        # Get the logo and place it at the end of the line
                        img_url = club_image_paths.get(highlight)
                        if img_url:
                            img = get_club_image(img_url, zoom=0.18)
                            if img:
                                last_year = years[-1]
                                last_value = highlight_data[-1]
                                logo_box = AnnotationBbox(img, 
                                                        (last_year + 0.15, last_value),  # Position slightly after the line
                                                        frameon=False,
                                                        box_alignment=(0, 0.5),
                                                        zorder=6)
                                ax.add_artist(logo_box)
                    except Exception as e:
                        print(f"Error adding club logo: {e}")
            
            # Style adjustments
            ax.set_ylabel(f'{tema_esport} (R$ milhões)', fontsize=14, fontweight='bold')
            
            # Customize axis ticks and labels
            ax.tick_params(axis='both', which='major', labelsize=12)
            
            # Set integer x-ticks for years
            ax.set_xticks(years)
            ax.set_xticklabels([str(int(year)) for year in years])
            
            # Remove spines
            ax.spines['right'].set_visible(False)
            ax.spines['top'].set_visible(False)
            
            # Add subtle light gray background to the plot area
            ax.set_facecolor('#f9f9f9')
            
            # Adjust layout
            plt.tight_layout()
            
            return fig
            
        # Usage:
        fig = create_enhanced_time_series(years, club_data, highlight, tema_esport, club_image_paths)
        st.pyplot(fig)

#######################################################################################################################################
########################################################################################################################################

#######################################################################################################################################
########################################################################################################################################

    elif tema_esport == "Folha do Futebol + Compra de Jogadores":
        markdown_1 = f"<div style='text-align:center;  color: black; font-weight: bold; font-size:{fontsize}px'>{tema_esport:}</div>"
        st.markdown("<h4 style='text-align: center;  color: black;'>Análise Comparativa Simples  (2024)</b></h4>", unsafe_allow_html=True)
        st.markdown(markdown_1, unsafe_allow_html=True)
        st.markdown("---")

        tópico = df1.iloc[59, 1:].values

        # Pairing clubs with their revenues and sorting them by revenue in descending order
        paired_clubs_revenues = sorted(zip(clubes, tópico), key=lambda x: x[1], reverse=True)
        sorted_clubes, sorted_revenues = zip(*paired_clubs_revenues)

        def create_club_revenue_chart(sorted_clubes, sorted_revenues, club_image_paths, tema_esport):
            import matplotlib.pyplot as plt
            import numpy as np
            from PIL import Image
            from io import BytesIO
            import requests
            from matplotlib.offsetbox import OffsetImage, AnnotationBbox
            
            # Create figure
            fig, ax = plt.subplots(figsize=(15, 10))
            
            # Plot bars
            bars = ax.bar(range(len(sorted_clubes)), sorted_revenues, color='skyblue')
            
            # Set chart limits and style
            max_revenue = max(sorted_revenues)
            ax.set_xlim(-0.5, len(sorted_clubes)-0.5)
            ax.set_ylim(0, max_revenue*1.1)  # Add 10% space at top
            
            # Remove spines and x-ticks
            ax.spines['right'].set_visible(False)
            ax.spines['top'].set_visible(False)
            ax.spines['bottom'].set_visible(False)
            ax.spines['left'].set_visible(False)
            ax.set_xticks([])
            
            # Add y-axis label
            ax.set_ylabel(f'{tema_esport} (R$ milhões)', fontsize=22, fontweight='bold')
            ax.tick_params(axis='y', labelsize=16)
            
            # Function to get club logo
            def getImage(url):
                try:
                    response = requests.get(url)
                    img = Image.open(BytesIO(response.content))
                    
                    # Make sure image has transparency
                    if img.mode != 'RGBA':
                        img = img.convert('RGBA')
                        
                    return OffsetImage(img, zoom=0.18)  # Slightly increased from original 0.15
                except Exception as e:
                    print(f"Error loading image from {url}: {e}")
                    return None
            
            # Add value labels above bars
            for bar in bars:
                height = bar.get_height()
                ax.annotate(f'{height:.0f}',
                        xy=(bar.get_x() + bar.get_width() / 2, height),
                        xytext=(0, 3),  # 3 points vertical offset
                        textcoords="offset points",
                        ha='center', va='bottom', fontsize=16)
            
            # Create a small margin at the bottom for the icons
            # Instead of using a separate subplot, we'll add the icons directly at the bottom of the chart
            # Add an invisible bar at the bottom to make space
            bottom_margin = max_revenue * 0.12  # Small margin for icons
            ax.set_ylim(-bottom_margin, max_revenue*1.1)  # Update y-limits to include margin
            
            # Add club logos - position them right at the bottom of the chart
            for i, club in enumerate(sorted_clubes):
                img_url = club_image_paths.get(club)
                if img_url:
                    img = getImage(img_url)
                    if img:
                        # Position just below the x-axis
                        ab = AnnotationBbox(
                            img, 
                            (i, -bottom_margin * 0.5),  # Position in the middle of the bottom margin
                            xycoords='data',
                            box_alignment=(0.5, 0.5),
                            frameon=False
                        )
                        ax.add_artist(ab)
            
            fig.tight_layout()
            return fig

        # Usage:
        fig = create_club_revenue_chart(sorted_clubes, sorted_revenues, club_image_paths, tema_esport)
        st.pyplot(fig)

#######################################################################################################################################

        st.markdown("<h4 style='text-align: center;  color: black;'>Análise Comparativa 2020-2024 (em moeda constante)</b></h4>", unsafe_allow_html=True)
        markdown_1 = f"<div style='text-align:center;  color: black; font-weight: bold; font-size:{fontsize}px'>{highlight:} (em destaque)</div>"
        st.markdown(markdown_1, unsafe_allow_html=True)
        st.markdown("---")

        years = ['2020', '2021', '2022', '2023', '2024']

        tópico2 = df3.iloc[34, 1:].values
        club_data = {
            'Atlético GO': tópico2[:5][::-1][:5],
            'Atlético': tópico2[5:10][::-1][:5],
            'Athletico': tópico2[10:15][::-1][:5],
            'Bahia': tópico2[15:20][::-1][:5],
            'Botafogo': tópico2[20:25][::-1][:5],
            'Corinthians': tópico2[25:30][::-1][:5],
            'Vitória': tópico2[30:35][::-1][:5],
            'Cruzeiro': tópico2[35:40][::-1][:5],
            'Cuiabá': tópico2[40:45][::-1][:5],
            'Flamengo': tópico2[45:50][::-1][:5],
            'Fluminense': tópico2[50:55][::-1][:5],
            'Fortaleza': tópico2[55:60][::-1][:5],
            'Grêmio': tópico2[60:65][::-1][:5],
            'Criciúma': tópico2[65:70][::-1][:5],
            'Internacional': tópico2[70:75][::-1][:5],
            'Palmeiras': tópico2[75:80][::-1][:5],
            'Juventude': tópico2[80:85][::-1][:5],
            'São Paulo': tópico2[85:90][::-1][:5],
            'Vasco': tópico2[90:95][::-1][:5],
        }

        def create_enhanced_time_series(years, club_data, highlight, tema_esport, club_image_paths=None):
            import matplotlib.pyplot as plt
            import matplotlib.patheffects as path_effects
            from matplotlib.offsetbox import OffsetImage, AnnotationBbox
            import numpy as np
            from PIL import Image
            import requests
            from io import BytesIO
            
            # Create figure with improved dimensions and DPI
            fig, ax = plt.subplots(figsize=(12, 8), dpi=100)
            
            # Add subtle grid for better readability
            ax.grid(axis='y', linestyle='--', alpha=0.2, zorder=0)
            
            # Track other clubs to create color gradient
            other_clubs = [club for club in club_data.keys() if club != highlight]
            
            # First, plot all non-highlighted clubs with faded color
            for i, club in enumerate(other_clubs):
                data = club_data[club]
                ax.plot(years, data, linewidth=1, linestyle='--', color=('gray'), 
                        alpha=0.6, zorder=1)
            
            # Then plot the highlighted club on top with a more vibrant appearance
            if highlight in club_data:
                # Get highlight club data
                highlight_data = club_data[highlight]
                
                # Plot the main highlighted line with a subtle shadow effect for depth
                main_line = ax.plot(years, highlight_data, linewidth=4, linestyle='-', 
                                color='#2b7bba', zorder=3)[0]
                main_line.set_path_effects([path_effects.SimpleLineShadow(offset=(1, -1), alpha=0.3),
                                        path_effects.Normal()])
                
                # Add markers at each data point
                ax.scatter(years, highlight_data, s=80, color='#2b7bba', edgecolor='white', linewidth=1.5, zorder=4)
                
                # Annotate each point on the highlighted club's line with improved text styling
                for i, value in enumerate(highlight_data):
                    text = ax.annotate(f'{value:.0f}', 
                                    (years[i], value),
                                    textcoords="offset points",
                                    xytext=(0, 12),
                                    ha='center',
                                    va='bottom',
                                    fontsize=14,
                                    fontweight='bold',
                                    color='#2b7bba',
                                    zorder=5)
                    text.set_path_effects([path_effects.withStroke(linewidth=3, foreground='white')])
                    
                # Add club logo at the end of the line if club_image_paths is provided
                if club_image_paths and highlight in club_image_paths:
                    try:
                        # Function to get club logo
                        def get_club_image(url, zoom=0.15):
                            try:
                                response = requests.get(url)
                                img = Image.open(BytesIO(response.content))
                                if img.mode != 'RGBA':
                                    img = img.convert('RGBA')
                                return OffsetImage(img, zoom=zoom)
                            except Exception as e:
                                print(f"Error loading image from {url}: {e}")
                                return None
                        
                        # Get the logo and place it at the end of the line
                        img_url = club_image_paths.get(highlight)
                        if img_url:
                            img = get_club_image(img_url, zoom=0.18)
                            if img:
                                last_year = years[-1]
                                last_value = highlight_data[-1]
                                logo_box = AnnotationBbox(img, 
                                                        (last_year + 0.15, last_value),  # Position slightly after the line
                                                        frameon=False,
                                                        box_alignment=(0, 0.5),
                                                        zorder=6)
                                ax.add_artist(logo_box)
                    except Exception as e:
                        print(f"Error adding club logo: {e}")
            
            # Style adjustments
            ax.set_ylabel(f'{tema_esport} (R$ milhões)', fontsize=14, fontweight='bold')
            
            # Customize axis ticks and labels
            ax.tick_params(axis='both', which='major', labelsize=12)
            
            # Set integer x-ticks for years
            ax.set_xticks(years)
            ax.set_xticklabels([str(int(year)) for year in years])
            
            # Remove spines
            ax.spines['right'].set_visible(False)
            ax.spines['top'].set_visible(False)
            
            # Add subtle light gray background to the plot area
            ax.set_facecolor('#f9f9f9')
            
            # Adjust layout
            plt.tight_layout()
            
            return fig
            
        # Usage:
        fig = create_enhanced_time_series(years, club_data, highlight, tema_esport, club_image_paths)
        st.pyplot(fig)

#######################################################################################################################################
########################################################################################################################################

    elif tema_esport == "Base de Torcedores":
        markdown_1 = f"<div style='text-align:center;  color: black; font-weight: bold; font-size:{fontsize}px'>{tema_esport:}</div>"
        st.markdown("<h4 style='text-align: center;  color: black;'>Análise Comparativa Simples  (2024)</b></h4>", unsafe_allow_html=True)
        st.markdown(markdown_1, unsafe_allow_html=True)
        st.markdown("---")

        tópico = df1.iloc[28, 1:].values

        # Pairing clubs with their revenues and sorting them by revenue in descending order
        paired_clubs_revenues = sorted(zip(clubes, tópico), key=lambda x: x[1], reverse=True)
        sorted_clubes, sorted_revenues = zip(*paired_clubs_revenues)

        def create_club_revenue_chart(sorted_clubes, sorted_revenues, club_image_paths, tema_esport):
            import matplotlib.pyplot as plt
            import numpy as np
            from PIL import Image
            from io import BytesIO
            import requests
            from matplotlib.offsetbox import OffsetImage, AnnotationBbox
            
            # Create figure
            fig, ax = plt.subplots(figsize=(15, 10))
            
            # Plot bars
            bars = ax.bar(range(len(sorted_clubes)), sorted_revenues, color='skyblue')
            
            # Set chart limits and style
            max_revenue = max(sorted_revenues)
            ax.set_xlim(-0.5, len(sorted_clubes)-0.5)
            ax.set_ylim(0, max_revenue*1.1)  # Add 10% space at top
            
            # Remove spines and x-ticks
            ax.spines['right'].set_visible(False)
            ax.spines['top'].set_visible(False)
            ax.spines['bottom'].set_visible(False)
            ax.spines['left'].set_visible(False)
            ax.set_xticks([])
            
            # Add y-axis label
            ax.set_ylabel(f'{tema_esport} (R$ milhões)', fontsize=22, fontweight='bold')
            ax.tick_params(axis='y', labelsize=16)
            
            # Function to get club logo
            def getImage(url):
                try:
                    response = requests.get(url)
                    img = Image.open(BytesIO(response.content))
                    
                    # Make sure image has transparency
                    if img.mode != 'RGBA':
                        img = img.convert('RGBA')
                        
                    return OffsetImage(img, zoom=0.18)  # Slightly increased from original 0.15
                except Exception as e:
                    print(f"Error loading image from {url}: {e}")
                    return None
            
            # Add value labels above bars
            for bar in bars:
                height = bar.get_height()
                ax.annotate(f'{height:.0f}',
                        xy=(bar.get_x() + bar.get_width() / 2, height),
                        xytext=(0, 3),  # 3 points vertical offset
                        textcoords="offset points",
                        ha='center', va='bottom', fontsize=16)
            
            # Create a small margin at the bottom for the icons
            # Instead of using a separate subplot, we'll add the icons directly at the bottom of the chart
            # Add an invisible bar at the bottom to make space
            bottom_margin = max_revenue * 0.12  # Small margin for icons
            ax.set_ylim(-bottom_margin, max_revenue*1.1)  # Update y-limits to include margin
            
            # Add club logos - position them right at the bottom of the chart
            for i, club in enumerate(sorted_clubes):
                img_url = club_image_paths.get(club)
                if img_url:
                    img = getImage(img_url)
                    if img:
                        # Position just below the x-axis
                        ab = AnnotationBbox(
                            img, 
                            (i, -bottom_margin * 0.5),  # Position in the middle of the bottom margin
                            xycoords='data',
                            box_alignment=(0.5, 0.5),
                            frameon=False
                        )
                        ax.add_artist(ab)
            
            fig.tight_layout()
            return fig

        # Usage:
        fig = create_club_revenue_chart(sorted_clubes, sorted_revenues, club_image_paths, tema_esport)
        st.pyplot(fig)

#######################################################################################################################################
#######################################################################################################################################


    elif tema_esport == "Pontuação Série A":
        markdown_1 = f"<div style='text-align:center;  color: black; font-weight: bold; font-size:{fontsize}px'>{tema_esport:}</div>"
        st.markdown("<h4 style='text-align: center;  color: black;'>Análise Comparativa Simples  (2024)</b></h4>", unsafe_allow_html=True)
        st.markdown(markdown_1, unsafe_allow_html=True)
        st.markdown("---")

        tópico = df1.iloc[29, 1:].values

        # Pairing clubs with their revenues and sorting them by revenue in descending order
        paired_clubs_revenues = sorted(zip(clubes, tópico), key=lambda x: x[1], reverse=True)
        sorted_clubes, sorted_revenues = zip(*paired_clubs_revenues)

        def create_club_revenue_chart(sorted_clubes, sorted_revenues, club_image_paths, tema_esport):
            import matplotlib.pyplot as plt
            import numpy as np
            from PIL import Image
            from io import BytesIO
            import requests
            from matplotlib.offsetbox import OffsetImage, AnnotationBbox
            
            # Create figure
            fig, ax = plt.subplots(figsize=(15, 10))
            
            # Plot bars
            bars = ax.bar(range(len(sorted_clubes)), sorted_revenues, color='skyblue')
            
            # Set chart limits and style
            max_revenue = max(sorted_revenues)
            ax.set_xlim(-0.5, len(sorted_clubes)-0.5)
            ax.set_ylim(0, max_revenue*1.1)  # Add 10% space at top
            
            # Remove spines and x-ticks
            ax.spines['right'].set_visible(False)
            ax.spines['top'].set_visible(False)
            ax.spines['bottom'].set_visible(False)
            ax.spines['left'].set_visible(False)
            ax.set_xticks([])
            
            # Add y-axis label
            ax.set_ylabel(f'{tema_esport} (R$ milhões)', fontsize=22, fontweight='bold')
            ax.tick_params(axis='y', labelsize=16)
            
            # Function to get club logo
            def getImage(url):
                try:
                    response = requests.get(url)
                    img = Image.open(BytesIO(response.content))
                    
                    # Make sure image has transparency
                    if img.mode != 'RGBA':
                        img = img.convert('RGBA')
                        
                    return OffsetImage(img, zoom=0.18)  # Slightly increased from original 0.15
                except Exception as e:
                    print(f"Error loading image from {url}: {e}")
                    return None
            
            # Add value labels above bars
            for bar in bars:
                height = bar.get_height()
                ax.annotate(f'{height:.0f}',
                        xy=(bar.get_x() + bar.get_width() / 2, height),
                        xytext=(0, 3),  # 3 points vertical offset
                        textcoords="offset points",
                        ha='center', va='bottom', fontsize=16)
            
            # Create a small margin at the bottom for the icons
            # Instead of using a separate subplot, we'll add the icons directly at the bottom of the chart
            # Add an invisible bar at the bottom to make space
            bottom_margin = max_revenue * 0.12  # Small margin for icons
            ax.set_ylim(-bottom_margin, max_revenue*1.1)  # Update y-limits to include margin
            
            # Add club logos - position them right at the bottom of the chart
            for i, club in enumerate(sorted_clubes):
                img_url = club_image_paths.get(club)
                if img_url:
                    img = getImage(img_url)
                    if img:
                        # Position just below the x-axis
                        ab = AnnotationBbox(
                            img, 
                            (i, -bottom_margin * 0.5),  # Position in the middle of the bottom margin
                            xycoords='data',
                            box_alignment=(0.5, 0.5),
                            frameon=False
                        )
                        ax.add_artist(ab)
            
            fig.tight_layout()
            return fig

        # Usage:
        fig = create_club_revenue_chart(sorted_clubes, sorted_revenues, club_image_paths, tema_esport)
        st.pyplot(fig)

#######################################################################################################################################
########################################################################################################################################

        st.markdown("<h4 style='text-align: center;  color: black;'>Análise Comparativa 2020-2024 (em moeda constante)</b></h4>", unsafe_allow_html=True)
        markdown_1 = f"<div style='text-align:center;  color: black; font-weight: bold; font-size:{fontsize}px'>{highlight:} (em destaque)</div>"
        st.markdown(markdown_1, unsafe_allow_html=True)
        st.markdown("---")

        years = ['2020', '2021', '2022', '2023', '2024']

        tópico2 = df3.iloc[17, 1:].values
        club_data = {
            'Atlético GO': tópico2[:5][::-1][:5],
            'Atlético': tópico2[5:10][::-1][:5],
            'Athletico': tópico2[10:15][::-1][:5],
            'Bahia': tópico2[15:20][::-1][:5],
            'Botafogo': tópico2[20:25][::-1][:5],
            'Corinthians': tópico2[25:30][::-1][:5],
            'Vitória': tópico2[30:35][::-1][:5],
            'Cruzeiro': tópico2[35:40][::-1][:5],
            'Cuiabá': tópico2[40:45][::-1][:5],
            'Flamengo': tópico2[45:50][::-1][:5],
            'Fluminense': tópico2[50:55][::-1][:5],
            'Fortaleza': tópico2[55:60][::-1][:5],
            'Grêmio': tópico2[60:65][::-1][:5],
            'Criciúma': tópico2[65:70][::-1][:5],
            'Internacional': tópico2[70:75][::-1][:5],
            'Palmeiras': tópico2[75:80][::-1][:5],
            'Juventude': tópico2[80:85][::-1][:5],
            'São Paulo': tópico2[85:90][::-1][:5],
            'Vasco': tópico2[90:95][::-1][:5],
        }

        def create_enhanced_time_series(years, club_data, highlight, tema_esport, club_image_paths=None):
            import matplotlib.pyplot as plt
            import matplotlib.patheffects as path_effects
            from matplotlib.offsetbox import OffsetImage, AnnotationBbox
            import numpy as np
            from PIL import Image
            import requests
            from io import BytesIO
            
            # Create figure with improved dimensions and DPI
            fig, ax = plt.subplots(figsize=(12, 8), dpi=100)
            
            # Add subtle grid for better readability
            ax.grid(axis='y', linestyle='--', alpha=0.2, zorder=0)
            
            # Track other clubs to create color gradient
            other_clubs = [club for club in club_data.keys() if club != highlight]
            
            # First, plot all non-highlighted clubs with faded color
            for i, club in enumerate(other_clubs):
                data = club_data[club]
                ax.plot(years, data, linewidth=1, linestyle='--', color=('gray'), 
                        alpha=0.6, zorder=1)
            
            # Then plot the highlighted club on top with a more vibrant appearance
            if highlight in club_data:
                # Get highlight club data
                highlight_data = club_data[highlight]
                
                # Plot the main highlighted line with a subtle shadow effect for depth
                main_line = ax.plot(years, highlight_data, linewidth=4, linestyle='-', 
                                color='#2b7bba', zorder=3)[0]
                main_line.set_path_effects([path_effects.SimpleLineShadow(offset=(1, -1), alpha=0.3),
                                        path_effects.Normal()])
                
                # Add markers at each data point
                ax.scatter(years, highlight_data, s=80, color='#2b7bba', edgecolor='white', linewidth=1.5, zorder=4)
                
                # Annotate each point on the highlighted club's line with improved text styling
                for i, value in enumerate(highlight_data):
                    text = ax.annotate(f'{value:.0f}', 
                                    (years[i], value),
                                    textcoords="offset points",
                                    xytext=(0, 12),
                                    ha='center',
                                    va='bottom',
                                    fontsize=14,
                                    fontweight='bold',
                                    color='#2b7bba',
                                    zorder=5)
                    text.set_path_effects([path_effects.withStroke(linewidth=3, foreground='white')])
                    
                # Add club logo at the end of the line if club_image_paths is provided
                if club_image_paths and highlight in club_image_paths:
                    try:
                        # Function to get club logo
                        def get_club_image(url, zoom=0.15):
                            try:
                                response = requests.get(url)
                                img = Image.open(BytesIO(response.content))
                                if img.mode != 'RGBA':
                                    img = img.convert('RGBA')
                                return OffsetImage(img, zoom=zoom)
                            except Exception as e:
                                print(f"Error loading image from {url}: {e}")
                                return None
                        
                        # Get the logo and place it at the end of the line
                        img_url = club_image_paths.get(highlight)
                        if img_url:
                            img = get_club_image(img_url, zoom=0.18)
                            if img:
                                last_year = years[-1]
                                last_value = highlight_data[-1]
                                logo_box = AnnotationBbox(img, 
                                                        (last_year + 0.15, last_value),  # Position slightly after the line
                                                        frameon=False,
                                                        box_alignment=(0, 0.5),
                                                        zorder=6)
                                ax.add_artist(logo_box)
                    except Exception as e:
                        print(f"Error adding club logo: {e}")
            
            # Style adjustments
            ax.set_ylabel(f'{tema_esport} (R$ milhões)', fontsize=14, fontweight='bold')
            
            # Customize axis ticks and labels
            ax.tick_params(axis='both', which='major', labelsize=12)
            
            # Set integer x-ticks for years
            ax.set_xticks(years)
            ax.set_xticklabels([str(int(year)) for year in years])
            
            # Remove spines
            ax.spines['right'].set_visible(False)
            ax.spines['top'].set_visible(False)
            
            # Add subtle light gray background to the plot area
            ax.set_facecolor('#f9f9f9')
            
            # Adjust layout
            plt.tight_layout()
            
            return fig
            
        # Usage:
        fig = create_enhanced_time_series(years, club_data, highlight, tema_esport, club_image_paths)
        st.pyplot(fig)

#######################################################################################################################################
#######################################################################################################################################

    elif tema_esport == "Bilheteria Série A (R$ milhões)":
        markdown_1 = f"<div style='text-align:center;  color: black; font-weight: bold; font-size:{fontsize}px'>{tema_esport:}</div>"
        st.markdown("<h4 style='text-align: center;  color: black;'>Análise Comparativa Simples  (2024)</b></h4>", unsafe_allow_html=True)
        st.markdown(markdown_1, unsafe_allow_html=True)
        st.markdown("---")

        tópico = df1.iloc[31, 1:].values

        # Pairing clubs with their revenues and sorting them by revenue in descending order
        paired_clubs_revenues = sorted(zip(clubes, tópico), key=lambda x: x[1], reverse=True)
        sorted_clubes, sorted_revenues = zip(*paired_clubs_revenues)

        def create_club_revenue_chart(sorted_clubes, sorted_revenues, club_image_paths, tema_esport):
            import matplotlib.pyplot as plt
            import numpy as np
            from PIL import Image
            from io import BytesIO
            import requests
            from matplotlib.offsetbox import OffsetImage, AnnotationBbox
            
            # Create figure
            fig, ax = plt.subplots(figsize=(15, 10))
            
            # Plot bars
            bars = ax.bar(range(len(sorted_clubes)), sorted_revenues, color='skyblue')
            
            # Set chart limits and style
            max_revenue = max(sorted_revenues)
            ax.set_xlim(-0.5, len(sorted_clubes)-0.5)
            ax.set_ylim(0, max_revenue*1.1)  # Add 10% space at top
            
            # Remove spines and x-ticks
            ax.spines['right'].set_visible(False)
            ax.spines['top'].set_visible(False)
            ax.spines['bottom'].set_visible(False)
            ax.spines['left'].set_visible(False)
            ax.set_xticks([])
            
            # Add y-axis label
            ax.set_ylabel(f'{tema_esport}', fontsize=22, fontweight='bold')
            ax.tick_params(axis='y', labelsize=16)
            
            # Function to get club logo
            def getImage(url):
                try:
                    response = requests.get(url)
                    img = Image.open(BytesIO(response.content))
                    
                    # Make sure image has transparency
                    if img.mode != 'RGBA':
                        img = img.convert('RGBA')
                        
                    return OffsetImage(img, zoom=0.18)  # Slightly increased from original 0.15
                except Exception as e:
                    print(f"Error loading image from {url}: {e}")
                    return None
            
            # Add value labels above bars
            for bar in bars:
                height = bar.get_height()
                ax.annotate(f'{height:.0f}',
                        xy=(bar.get_x() + bar.get_width() / 2, height),
                        xytext=(0, 3),  # 3 points vertical offset
                        textcoords="offset points",
                        ha='center', va='bottom', fontsize=16)
            
            # Create a small margin at the bottom for the icons
            # Instead of using a separate subplot, we'll add the icons directly at the bottom of the chart
            # Add an invisible bar at the bottom to make space
            bottom_margin = max_revenue * 0.12  # Small margin for icons
            ax.set_ylim(-bottom_margin, max_revenue*1.1)  # Update y-limits to include margin
            
            # Add club logos - position them right at the bottom of the chart
            for i, club in enumerate(sorted_clubes):
                img_url = club_image_paths.get(club)
                if img_url:
                    img = getImage(img_url)
                    if img:
                        # Position just below the x-axis
                        ab = AnnotationBbox(
                            img, 
                            (i, -bottom_margin * 0.5),  # Position in the middle of the bottom margin
                            xycoords='data',
                            box_alignment=(0.5, 0.5),
                            frameon=False
                        )
                        ax.add_artist(ab)
            
            fig.tight_layout()
            return fig

        # Usage:
        fig = create_club_revenue_chart(sorted_clubes, sorted_revenues, club_image_paths, tema_esport)
        st.pyplot(fig)

#######################################################################################################################################
########################################################################################################################################

        st.markdown("<h4 style='text-align: center;  color: black;'>Análise Comparativa 2020-2024 (em moeda constante)</b></h4>", unsafe_allow_html=True)
        markdown_1 = f"<div style='text-align:center;  color: black; font-weight: bold; font-size:{fontsize}px'>{highlight:} (em destaque)</div>"
        st.markdown(markdown_1, unsafe_allow_html=True)
        st.markdown("---")

        years = ['2022', '2023', '2024']

        tópico2 = df6.iloc[19, 1:].values
        club_data = {
            'Atlético GO': tópico2[:3][::-1][:3],
            'Atlético': tópico2[3:6][::-1][:3],
            'Athletico': tópico2[6:9][::-1][:3],
            'Bahia': tópico2[9:12][::-1][:3],
            'Botafogo': tópico2[12:15][::-1][:3],
            'Corinthians': tópico2[15:18][::-1][:3],
            'Vitória': tópico2[18:21][::-1][:3],
            'Cruzeiro': tópico2[21:24][::-1][:3],
            'Cuiabá': tópico2[24:27][::-1][:3],
            'Flamengo': tópico2[27:30][::-1][:3],
            'Fluminense': tópico2[30:33][::-1][:3],
            'Fortaleza': tópico2[33:36][::-1][:3],
            'Grêmio': tópico2[36:39][::-1][:3],
            'Criciúma': tópico2[39:42][::-1][:3],
            'Internacional': tópico2[42:45][::-1][:3],
            'Palmeiras': tópico2[45:48][::-1][:3],
            'Juventude': tópico2[48:51][::-1][:3],
            'São Paulo': tópico2[51:54][::-1][:3],
            'Vasco': tópico2[54:57][::-1][:3],
        }

        def create_enhanced_time_series(years, club_data, highlight, tema_esport, club_image_paths=None):
            
            # Create figure with improved dimensions and DPI
            fig, ax = plt.subplots(figsize=(12, 8), dpi=100)
            
            # Add subtle grid for better readability
            ax.grid(axis='y', linestyle='--', alpha=0.2, zorder=0)
            
            # Track other clubs to create color gradient
            other_clubs = [club for club in club_data.keys() if club != highlight]
            
            # First, plot all non-highlighted clubs with faded color
            for i, club in enumerate(other_clubs):
                data = club_data[club]
                ax.plot(years, data, linewidth=1, linestyle='--', color=('gray'), 
                        alpha=0.6, zorder=1)
            
            # Then plot the highlighted club on top with a more vibrant appearance
            if highlight in club_data:
                # Get highlight club data
                highlight_data = club_data[highlight]
                
                # Plot the main highlighted line with a subtle shadow effect for depth
                main_line = ax.plot(years, highlight_data, linewidth=4, linestyle='-', 
                                color='#2b7bba', zorder=3)[0]
                main_line.set_path_effects([path_effects.SimpleLineShadow(offset=(1, -1), alpha=0.3),
                                        path_effects.Normal()])
                
                # Add markers at each data point
                ax.scatter(years, highlight_data, s=80, color='#2b7bba', edgecolor='white', linewidth=1.5, zorder=4)
                
                # Annotate each point on the highlighted club's line with improved text styling
                for i, value in enumerate(highlight_data):
                    text = ax.annotate(f'{value:.0f}', 
                                    (years[i], value),
                                    textcoords="offset points",
                                    xytext=(0, 12),
                                    ha='center',
                                    va='bottom',
                                    fontsize=14,
                                    fontweight='bold',
                                    color='#2b7bba',
                                    zorder=5)
                    text.set_path_effects([path_effects.withStroke(linewidth=3, foreground='white')])
                    
                # Add club logo at the end of the line if club_image_paths is provided
                if club_image_paths and highlight in club_image_paths:
                    try:
                        # Function to get club logo
                        def get_club_image(url, zoom=0.15):
                            try:
                                response = requests.get(url)
                                img = Image.open(BytesIO(response.content))
                                if img.mode != 'RGBA':
                                    img = img.convert('RGBA')
                                return OffsetImage(img, zoom=zoom)
                            except Exception as e:
                                print(f"Error loading image from {url}: {e}")
                                return None
                        
                        # Get the logo and place it at the end of the line
                        img_url = club_image_paths.get(highlight)
                        if img_url:
                            img = get_club_image(img_url, zoom=0.18)
                            if img:
                                last_year = years[-1]
                                last_value = highlight_data[-1]
                                logo_box = AnnotationBbox(img, 
                                                        (last_year + 0.15, last_value),  # Position slightly after the line
                                                        frameon=False,
                                                        box_alignment=(0, 0.5),
                                                        zorder=6)
                                ax.add_artist(logo_box)
                    except Exception as e:
                        print(f"Error adding club logo: {e}")
            
            # Style adjustments
            ax.set_ylabel(f'{tema_esport}', fontsize=14, fontweight='bold')
            
            # Customize axis ticks and labels
            ax.tick_params(axis='both', which='major', labelsize=12)
            
            # Set integer x-ticks for years
            ax.set_xticks(years)
            ax.set_xticklabels([str(int(year)) for year in years])
            
            # Remove spines
            ax.spines['right'].set_visible(False)
            ax.spines['top'].set_visible(False)
            
            # Add subtle light gray background to the plot area
            ax.set_facecolor('#f9f9f9')
            
            # Adjust layout
            plt.tight_layout()
            
            return fig
            
        # Usage:
        fig = create_enhanced_time_series(years, club_data, highlight, tema_esport, club_image_paths)
        st.pyplot(fig)

#######################################################################################################################################
#######################################################################################################################################

    elif tema_esport == "Bilheteria média (R$ mil/jogo)":
        markdown_1 = f"<div style='text-align:center;  color: black; font-weight: bold; font-size:{fontsize}px'>{tema_esport:}</div>"
        st.markdown("<h4 style='text-align: center;  color: black;'>Análise Comparativa Simples  (2024)</b></h4>", unsafe_allow_html=True)
        st.markdown(markdown_1, unsafe_allow_html=True)
        st.markdown("---")

        tópico = df1.iloc[32, 1:].values

        # Pairing clubs with their revenues and sorting them by revenue in descending order
        paired_clubs_revenues = sorted(zip(clubes, tópico), key=lambda x: x[1], reverse=True)
        sorted_clubes, sorted_revenues = zip(*paired_clubs_revenues)

        def create_club_revenue_chart(sorted_clubes, sorted_revenues, club_image_paths, tema_esport):
            import matplotlib.pyplot as plt
            import numpy as np
            from PIL import Image
            from io import BytesIO
            import requests
            from matplotlib.offsetbox import OffsetImage, AnnotationBbox
            
            # Create figure
            fig, ax = plt.subplots(figsize=(15, 10))
            
            # Plot bars
            bars = ax.bar(range(len(sorted_clubes)), sorted_revenues, color='skyblue')
            
            # Set chart limits and style
            max_revenue = max(sorted_revenues)
            ax.set_xlim(-0.5, len(sorted_clubes)-0.5)
            ax.set_ylim(0, max_revenue*1.1)  # Add 10% space at top
            
            # Remove spines and x-ticks
            ax.spines['right'].set_visible(False)
            ax.spines['top'].set_visible(False)
            ax.spines['bottom'].set_visible(False)
            ax.spines['left'].set_visible(False)
            ax.set_xticks([])
            
            # Add y-axis label
            ax.set_ylabel(f'{tema_esport}', fontsize=22, fontweight='bold')
            ax.tick_params(axis='y', labelsize=16)
            
            # Function to get club logo
            def getImage(url):
                try:
                    response = requests.get(url)
                    img = Image.open(BytesIO(response.content))
                    
                    # Make sure image has transparency
                    if img.mode != 'RGBA':
                        img = img.convert('RGBA')
                        
                    return OffsetImage(img, zoom=0.18)  # Slightly increased from original 0.15
                except Exception as e:
                    print(f"Error loading image from {url}: {e}")
                    return None
            
            # Add value labels above bars
            for bar in bars:
                height = bar.get_height()
                ax.annotate(f'{height:.0f}',
                        xy=(bar.get_x() + bar.get_width() / 2, height),
                        xytext=(0, 3),  # 3 points vertical offset
                        textcoords="offset points",
                        ha='center', va='bottom', fontsize=16)
            
            # Create a small margin at the bottom for the icons
            # Instead of using a separate subplot, we'll add the icons directly at the bottom of the chart
            # Add an invisible bar at the bottom to make space
            bottom_margin = max_revenue * 0.12  # Small margin for icons
            ax.set_ylim(-bottom_margin, max_revenue*1.1)  # Update y-limits to include margin
            
            # Add club logos - position them right at the bottom of the chart
            for i, club in enumerate(sorted_clubes):
                img_url = club_image_paths.get(club)
                if img_url:
                    img = getImage(img_url)
                    if img:
                        # Position just below the x-axis
                        ab = AnnotationBbox(
                            img, 
                            (i, -bottom_margin * 0.5),  # Position in the middle of the bottom margin
                            xycoords='data',
                            box_alignment=(0.5, 0.5),
                            frameon=False
                        )
                        ax.add_artist(ab)
            
            fig.tight_layout()
            return fig

        # Usage:
        fig = create_club_revenue_chart(sorted_clubes, sorted_revenues, club_image_paths, tema_esport)
        st.pyplot(fig)

#######################################################################################################################################
########################################################################################################################################

        st.markdown("<h4 style='text-align: center;  color: black;'>Análise Comparativa 2020-2024 (em moeda constante)</b></h4>", unsafe_allow_html=True)
        markdown_1 = f"<div style='text-align:center;  color: black; font-weight: bold; font-size:{fontsize}px'>{highlight:} (em destaque)</div>"
        st.markdown(markdown_1, unsafe_allow_html=True)
        st.markdown("---")

        years = ['2022', '2023', '2024']

        tópico2 = df6.iloc[20, 1:].values
        club_data = {
            'Atlético GO': tópico2[:3][::-1][:3],
            'Atlético': tópico2[3:6][::-1][:3],
            'Athletico': tópico2[6:9][::-1][:3],
            'Bahia': tópico2[9:12][::-1][:3],
            'Botafogo': tópico2[12:15][::-1][:3],
            'Corinthians': tópico2[15:18][::-1][:3],
            'Vitória': tópico2[18:21][::-1][:3],
            'Cruzeiro': tópico2[21:24][::-1][:3],
            'Cuiabá': tópico2[24:27][::-1][:3],
            'Flamengo': tópico2[27:30][::-1][:3],
            'Fluminense': tópico2[30:33][::-1][:3],
            'Fortaleza': tópico2[33:36][::-1][:3],
            'Grêmio': tópico2[36:39][::-1][:3],
            'Criciúma': tópico2[39:42][::-1][:3],
            'Internacional': tópico2[42:45][::-1][:3],
            'Palmeiras': tópico2[45:48][::-1][:3],
            'Juventude': tópico2[48:51][::-1][:3],
            'São Paulo': tópico2[51:54][::-1][:3],
            'Vasco': tópico2[54:57][::-1][:3],
        }

        def create_enhanced_time_series(years, club_data, highlight, tema_esport, club_image_paths=None):
            import matplotlib.pyplot as plt
            import matplotlib.patheffects as path_effects
            from matplotlib.offsetbox import OffsetImage, AnnotationBbox
            import numpy as np
            from PIL import Image
            import requests
            from io import BytesIO
            
            # Create figure with improved dimensions and DPI
            fig, ax = plt.subplots(figsize=(12, 8), dpi=100)
            
            # Add subtle grid for better readability
            ax.grid(axis='y', linestyle='--', alpha=0.2, zorder=0)
            
            # Track other clubs to create color gradient
            other_clubs = [club for club in club_data.keys() if club != highlight]
            
            # First, plot all non-highlighted clubs with faded color
            for i, club in enumerate(other_clubs):
                data = club_data[club]
                ax.plot(years, data, linewidth=1, linestyle='--', color=('gray'), 
                        alpha=0.6, zorder=1)
            
            # Then plot the highlighted club on top with a more vibrant appearance
            if highlight in club_data:
                # Get highlight club data
                highlight_data = club_data[highlight]
                
                # Plot the main highlighted line with a subtle shadow effect for depth
                main_line = ax.plot(years, highlight_data, linewidth=4, linestyle='-', 
                                color='#2b7bba', zorder=3)[0]
                main_line.set_path_effects([path_effects.SimpleLineShadow(offset=(1, -1), alpha=0.3),
                                        path_effects.Normal()])
                
                # Add markers at each data point
                ax.scatter(years, highlight_data, s=80, color='#2b7bba', edgecolor='white', linewidth=1.5, zorder=4)
                
                # Annotate each point on the highlighted club's line with improved text styling
                for i, value in enumerate(highlight_data):
                    text = ax.annotate(f'{value:.0f}', 
                                    (years[i], value),
                                    textcoords="offset points",
                                    xytext=(0, 12),
                                    ha='center',
                                    va='bottom',
                                    fontsize=14,
                                    fontweight='bold',
                                    color='#2b7bba',
                                    zorder=5)
                    text.set_path_effects([path_effects.withStroke(linewidth=3, foreground='white')])
                    
                # Add club logo at the end of the line if club_image_paths is provided
                if club_image_paths and highlight in club_image_paths:
                    try:
                        # Function to get club logo
                        def get_club_image(url, zoom=0.15):
                            try:
                                response = requests.get(url)
                                img = Image.open(BytesIO(response.content))
                                if img.mode != 'RGBA':
                                    img = img.convert('RGBA')
                                return OffsetImage(img, zoom=zoom)
                            except Exception as e:
                                print(f"Error loading image from {url}: {e}")
                                return None
                        
                        # Get the logo and place it at the end of the line
                        img_url = club_image_paths.get(highlight)
                        if img_url:
                            img = get_club_image(img_url, zoom=0.18)
                            if img:
                                last_year = years[-1]
                                last_value = highlight_data[-1]
                                logo_box = AnnotationBbox(img, 
                                                        (last_year + 0.15, last_value),  # Position slightly after the line
                                                        frameon=False,
                                                        box_alignment=(0, 0.5),
                                                        zorder=6)
                                ax.add_artist(logo_box)
                    except Exception as e:
                        print(f"Error adding club logo: {e}")
            
            # Style adjustments
            ax.set_ylabel(f'{tema_esport}', fontsize=14, fontweight='bold')
            
            # Customize axis ticks and labels
            ax.tick_params(axis='both', which='major', labelsize=12)
            
            # Set integer x-ticks for years
            ax.set_xticks(years)
            ax.set_xticklabels([str(int(year)) for year in years])
            
            # Remove spines
            ax.spines['right'].set_visible(False)
            ax.spines['top'].set_visible(False)
            
            # Add subtle light gray background to the plot area
            ax.set_facecolor('#f9f9f9')
            
            # Adjust layout
            plt.tight_layout()
            
            return fig
            
        # Usage:
        fig = create_enhanced_time_series(years, club_data, highlight, tema_esport, club_image_paths)
        st.pyplot(fig)

#######################################################################################################################################
#######################################################################################################################################

    elif tema_esport == "Público Médio (pagantes)":
        markdown_1 = f"<div style='text-align:center;  color: black; font-weight: bold; font-size:{fontsize}px'>{tema_esport:}</div>"
        st.markdown("<h4 style='text-align: center;  color: black;'>Análise Comparativa Simples  (2024)</b></h4>", unsafe_allow_html=True)
        st.markdown(markdown_1, unsafe_allow_html=True)
        st.markdown("---")

        tópico = df1.iloc[33, 1:].values

        # Pairing clubs with their revenues and sorting them by revenue in descending order
        paired_clubs_revenues = sorted(zip(clubes, tópico), key=lambda x: x[1], reverse=True)
        sorted_clubes, sorted_revenues = zip(*paired_clubs_revenues)

        def create_club_revenue_chart(sorted_clubes, sorted_revenues, club_image_paths, tema_esport):
            import matplotlib.pyplot as plt
            import numpy as np
            from PIL import Image
            from io import BytesIO
            import requests
            from matplotlib.offsetbox import OffsetImage, AnnotationBbox
            
            # Create figure
            fig, ax = plt.subplots(figsize=(15, 10))
            
            # Plot bars
            bars = ax.bar(range(len(sorted_clubes)), sorted_revenues, color='skyblue')
            
            # Set chart limits and style
            max_revenue = max(sorted_revenues)
            ax.set_xlim(-0.5, len(sorted_clubes)-0.5)
            ax.set_ylim(0, max_revenue*1.1)  # Add 10% space at top
            
            # Remove spines and x-ticks
            ax.spines['right'].set_visible(False)
            ax.spines['top'].set_visible(False)
            ax.spines['bottom'].set_visible(False)
            ax.spines['left'].set_visible(False)
            ax.set_xticks([])
            
            # Add y-axis label
            ax.set_ylabel(f'{tema_esport}', fontsize=22, fontweight='bold')
            ax.tick_params(axis='y', labelsize=16)
            
            # Function to get club logo
            def getImage(url):
                try:
                    response = requests.get(url)
                    img = Image.open(BytesIO(response.content))
                    
                    # Make sure image has transparency
                    if img.mode != 'RGBA':
                        img = img.convert('RGBA')
                        
                    return OffsetImage(img, zoom=0.18)  # Slightly increased from original 0.15
                except Exception as e:
                    print(f"Error loading image from {url}: {e}")
                    return None
            
            # Add value labels above bars
            for bar in bars:
                height = bar.get_height()
                ax.annotate(f'{height:.0f}',
                        xy=(bar.get_x() + bar.get_width() / 2, height),
                        xytext=(0, 3),  # 3 points vertical offset
                        textcoords="offset points",
                        ha='center', va='bottom', fontsize=16)
            
            # Create a small margin at the bottom for the icons
            # Instead of using a separate subplot, we'll add the icons directly at the bottom of the chart
            # Add an invisible bar at the bottom to make space
            bottom_margin = max_revenue * 0.12  # Small margin for icons
            ax.set_ylim(-bottom_margin, max_revenue*1.1)  # Update y-limits to include margin
            
            # Add club logos - position them right at the bottom of the chart
            for i, club in enumerate(sorted_clubes):
                img_url = club_image_paths.get(club)
                if img_url:
                    img = getImage(img_url)
                    if img:
                        # Position just below the x-axis
                        ab = AnnotationBbox(
                            img, 
                            (i, -bottom_margin * 0.5),  # Position in the middle of the bottom margin
                            xycoords='data',
                            box_alignment=(0.5, 0.5),
                            frameon=False
                        )
                        ax.add_artist(ab)
            
            fig.tight_layout()
            return fig

        # Usage:
        fig = create_club_revenue_chart(sorted_clubes, sorted_revenues, club_image_paths, tema_esport)
        st.pyplot(fig)

#######################################################################################################################################
########################################################################################################################################

        st.markdown("<h4 style='text-align: center;  color: black;'>Análise Comparativa 2020-2024 (em moeda constante)</b></h4>", unsafe_allow_html=True)
        markdown_1 = f"<div style='text-align:center;  color: black; font-weight: bold; font-size:{fontsize}px'>{highlight:} (em destaque)</div>"
        st.markdown(markdown_1, unsafe_allow_html=True)
        st.markdown("---")

        years = ['2022', '2023', '2024']

        tópico2 = df6.iloc[21, 1:].values
        club_data = {
            'Atlético GO': tópico2[:3][::-1][:3],
            'Atlético': tópico2[3:6][::-1][:3],
            'Athletico': tópico2[6:9][::-1][:3],
            'Bahia': tópico2[9:12][::-1][:3],
            'Botafogo': tópico2[12:15][::-1][:3],
            'Corinthians': tópico2[15:18][::-1][:3],
            'Vitória': tópico2[18:21][::-1][:3],
            'Cruzeiro': tópico2[21:24][::-1][:3],
            'Cuiabá': tópico2[24:27][::-1][:3],
            'Flamengo': tópico2[27:30][::-1][:3],
            'Fluminense': tópico2[30:33][::-1][:3],
            'Fortaleza': tópico2[33:36][::-1][:3],
            'Grêmio': tópico2[36:39][::-1][:3],
            'Criciúma': tópico2[39:42][::-1][:3],
            'Internacional': tópico2[42:45][::-1][:3],
            'Palmeiras': tópico2[45:48][::-1][:3],
            'Juventude': tópico2[48:51][::-1][:3],
            'São Paulo': tópico2[51:54][::-1][:3],
            'Vasco': tópico2[54:57][::-1][:3],
        }

        def create_enhanced_time_series(years, club_data, highlight, tema_esport, club_image_paths=None):
            import matplotlib.pyplot as plt
            import matplotlib.patheffects as path_effects
            from matplotlib.offsetbox import OffsetImage, AnnotationBbox
            import numpy as np
            from PIL import Image
            import requests
            from io import BytesIO
            
            # Create figure with improved dimensions and DPI
            fig, ax = plt.subplots(figsize=(12, 8), dpi=100)
            
            # Add subtle grid for better readability
            ax.grid(axis='y', linestyle='--', alpha=0.2, zorder=0)
            
            # Track other clubs to create color gradient
            other_clubs = [club for club in club_data.keys() if club != highlight]
            
            # First, plot all non-highlighted clubs with faded color
            for i, club in enumerate(other_clubs):
                data = club_data[club]
                ax.plot(years, data, linewidth=1, linestyle='--', color=('gray'), 
                        alpha=0.6, zorder=1)
            
            # Then plot the highlighted club on top with a more vibrant appearance
            if highlight in club_data:
                # Get highlight club data
                highlight_data = club_data[highlight]
                
                # Plot the main highlighted line with a subtle shadow effect for depth
                main_line = ax.plot(years, highlight_data, linewidth=4, linestyle='-', 
                                color='#2b7bba', zorder=3)[0]
                main_line.set_path_effects([path_effects.SimpleLineShadow(offset=(1, -1), alpha=0.3),
                                        path_effects.Normal()])
                
                # Add markers at each data point
                ax.scatter(years, highlight_data, s=80, color='#2b7bba', edgecolor='white', linewidth=1.5, zorder=4)
                
                # Annotate each point on the highlighted club's line with improved text styling
                for i, value in enumerate(highlight_data):
                    text = ax.annotate(f'{value:.0f}', 
                                    (years[i], value),
                                    textcoords="offset points",
                                    xytext=(0, 12),
                                    ha='center',
                                    va='bottom',
                                    fontsize=14,
                                    fontweight='bold',
                                    color='#2b7bba',
                                    zorder=5)
                    text.set_path_effects([path_effects.withStroke(linewidth=3, foreground='white')])
                    
                # Add club logo at the end of the line if club_image_paths is provided
                if club_image_paths and highlight in club_image_paths:
                    try:
                        # Function to get club logo
                        def get_club_image(url, zoom=0.15):
                            try:
                                response = requests.get(url)
                                img = Image.open(BytesIO(response.content))
                                if img.mode != 'RGBA':
                                    img = img.convert('RGBA')
                                return OffsetImage(img, zoom=zoom)
                            except Exception as e:
                                print(f"Error loading image from {url}: {e}")
                                return None
                        
                        # Get the logo and place it at the end of the line
                        img_url = club_image_paths.get(highlight)
                        if img_url:
                            img = get_club_image(img_url, zoom=0.18)
                            if img:
                                last_year = years[-1]
                                last_value = highlight_data[-1]
                                logo_box = AnnotationBbox(img, 
                                                        (last_year + 0.15, last_value),  # Position slightly after the line
                                                        frameon=False,
                                                        box_alignment=(0, 0.5),
                                                        zorder=6)
                                ax.add_artist(logo_box)
                    except Exception as e:
                        print(f"Error adding club logo: {e}")
            
            # Style adjustments
            ax.set_ylabel(f'{tema_esport}', fontsize=14, fontweight='bold')
            
            # Customize axis ticks and labels
            ax.tick_params(axis='both', which='major', labelsize=12)
            
            # Set integer x-ticks for years
            ax.set_xticks(years)
            ax.set_xticklabels([str(int(year)) for year in years])
            
            # Remove spines
            ax.spines['right'].set_visible(False)
            ax.spines['top'].set_visible(False)
            
            # Add subtle light gray background to the plot area
            ax.set_facecolor('#f9f9f9')
            
            # Adjust layout
            plt.tight_layout()
            
            return fig
            
        # Usage:
        fig = create_enhanced_time_series(years, club_data, highlight, tema_esport, club_image_paths)
        st.pyplot(fig)


#######################################################################################################################################
#######################################################################################################################################
        
    elif tema_esport == "Sócios-Torcedores":
        markdown_1 = f"<div style='text-align:center;  color: black; font-weight: bold; font-size:{fontsize}px'>{tema_esport:}</div>"
        st.markdown("<h4 style='text-align: center;  color: black;'>Análise Comparativa Simples  (2024)</b></h4>", unsafe_allow_html=True)
        st.markdown(markdown_1, unsafe_allow_html=True)
        st.markdown("---")

        tópico = df1.iloc[34, 1:].values

        # Pairing clubs with their revenues and sorting them by revenue in descending order
        paired_clubs_revenues = sorted(zip(clubes, tópico), key=lambda x: x[1], reverse=True)
        sorted_clubes, sorted_revenues = zip(*paired_clubs_revenues)

        def create_club_revenue_chart(sorted_clubes, sorted_revenues, club_image_paths, tema_esport):
            import matplotlib.pyplot as plt
            import numpy as np
            from PIL import Image
            from io import BytesIO
            import requests
            from matplotlib.offsetbox import OffsetImage, AnnotationBbox
            
            # Create figure
            fig, ax = plt.subplots(figsize=(15, 10))
            
            # Plot bars
            bars = ax.bar(range(len(sorted_clubes)), sorted_revenues, color='skyblue')
            
            # Set chart limits and style
            max_revenue = max(sorted_revenues)
            ax.set_xlim(-0.5, len(sorted_clubes)-0.5)
            ax.set_ylim(0, max_revenue*1.1)  # Add 10% space at top
            
            # Remove spines and x-ticks
            ax.spines['right'].set_visible(False)
            ax.spines['top'].set_visible(False)
            ax.spines['bottom'].set_visible(False)
            ax.spines['left'].set_visible(False)
            ax.set_xticks([])
            
            # Add y-axis label
            ax.set_ylabel(f'{tema_esport}', fontsize=22, fontweight='bold')
            ax.tick_params(axis='y', labelsize=16)
            
            # Function to get club logo
            def getImage(url):
                try:
                    response = requests.get(url)
                    img = Image.open(BytesIO(response.content))
                    
                    # Make sure image has transparency
                    if img.mode != 'RGBA':
                        img = img.convert('RGBA')
                        
                    return OffsetImage(img, zoom=0.18)  # Slightly increased from original 0.15
                except Exception as e:
                    print(f"Error loading image from {url}: {e}")
                    return None
            
            # Add value labels above bars
            for bar in bars:
                height = bar.get_height()
                ax.annotate(f'{height:.0f}',
                        xy=(bar.get_x() + bar.get_width() / 2, height),
                        xytext=(0, 3),  # 3 points vertical offset
                        textcoords="offset points",
                        ha='center', va='bottom', fontsize=16)
            
            # Create a small margin at the bottom for the icons
            # Instead of using a separate subplot, we'll add the icons directly at the bottom of the chart
            # Add an invisible bar at the bottom to make space
            bottom_margin = max_revenue * 0.12  # Small margin for icons
            ax.set_ylim(-bottom_margin, max_revenue*1.1)  # Update y-limits to include margin
            
            # Add club logos - position them right at the bottom of the chart
            for i, club in enumerate(sorted_clubes):
                img_url = club_image_paths.get(club)
                if img_url:
                    img = getImage(img_url)
                    if img:
                        # Position just below the x-axis
                        ab = AnnotationBbox(
                            img, 
                            (i, -bottom_margin * 0.5),  # Position in the middle of the bottom margin
                            xycoords='data',
                            box_alignment=(0.5, 0.5),
                            frameon=False
                        )
                        ax.add_artist(ab)
            
            fig.tight_layout()
            return fig

        # Usage:
        fig = create_club_revenue_chart(sorted_clubes, sorted_revenues, club_image_paths, tema_esport)
        st.pyplot(fig)

########################################################################################################################################
########################################################################################################################################

    elif tema_esport == "Valor do Elenco (€ milhões)":
        markdown_1 = f"<div style='text-align:center;  color: black; font-weight: bold; font-size:{fontsize}px'>{tema_esport:}</div>"
        st.markdown("<h4 style='text-align: center;  color: black;'>Análise Comparativa Simples  (2024)</b></h4>", unsafe_allow_html=True)
        st.markdown(markdown_1, unsafe_allow_html=True)
        st.markdown("---")

        tópico = df1.iloc[37, 1:].values

        # Pairing clubs with their revenues and sorting them by revenue in descending order
        paired_clubs_revenues = sorted(zip(clubes, tópico), key=lambda x: x[1], reverse=True)
        sorted_clubes, sorted_revenues = zip(*paired_clubs_revenues)

        def create_club_revenue_chart(sorted_clubes, sorted_revenues, club_image_paths, tema_esport):
            import matplotlib.pyplot as plt
            import numpy as np
            from PIL import Image
            from io import BytesIO
            import requests
            from matplotlib.offsetbox import OffsetImage, AnnotationBbox
            
            # Create figure
            fig, ax = plt.subplots(figsize=(15, 10))
            
            # Plot bars
            bars = ax.bar(range(len(sorted_clubes)), sorted_revenues, color='skyblue')
            
            # Set chart limits and style
            max_revenue = max(sorted_revenues)
            ax.set_xlim(-0.5, len(sorted_clubes)-0.5)
            ax.set_ylim(0, max_revenue*1.1)  # Add 10% space at top
            
            # Remove spines and x-ticks
            ax.spines['right'].set_visible(False)
            ax.spines['top'].set_visible(False)
            ax.spines['bottom'].set_visible(False)
            ax.spines['left'].set_visible(False)
            ax.set_xticks([])
            
            # Add y-axis label
            ax.set_ylabel(f'{tema_esport}', fontsize=22, fontweight='bold')
            ax.tick_params(axis='y', labelsize=16)
            
            # Function to get club logo
            def getImage(url):
                try:
                    response = requests.get(url)
                    img = Image.open(BytesIO(response.content))
                    
                    # Make sure image has transparency
                    if img.mode != 'RGBA':
                        img = img.convert('RGBA')
                        
                    return OffsetImage(img, zoom=0.18)  # Slightly increased from original 0.15
                except Exception as e:
                    print(f"Error loading image from {url}: {e}")
                    return None
            
            # Add value labels above bars
            for bar in bars:
                height = bar.get_height()
                ax.annotate(f'{height:.0f}',
                        xy=(bar.get_x() + bar.get_width() / 2, height),
                        xytext=(0, 3),  # 3 points vertical offset
                        textcoords="offset points",
                        ha='center', va='bottom', fontsize=16)
            
            # Create a small margin at the bottom for the icons
            # Instead of using a separate subplot, we'll add the icons directly at the bottom of the chart
            # Add an invisible bar at the bottom to make space
            bottom_margin = max_revenue * 0.12  # Small margin for icons
            ax.set_ylim(-bottom_margin, max_revenue*1.1)  # Update y-limits to include margin
            
            # Add club logos - position them right at the bottom of the chart
            for i, club in enumerate(sorted_clubes):
                img_url = club_image_paths.get(club)
                if img_url:
                    img = getImage(img_url)
                    if img:
                        # Position just below the x-axis
                        ab = AnnotationBbox(
                            img, 
                            (i, -bottom_margin * 0.5),  # Position in the middle of the bottom margin
                            xycoords='data',
                            box_alignment=(0.5, 0.5),
                            frameon=False
                        )
                        ax.add_artist(ab)
            
            fig.tight_layout()
            return fig

        # Usage:
        fig = create_club_revenue_chart(sorted_clubes, sorted_revenues, club_image_paths, tema_esport)
        st.pyplot(fig)

########################################################################################################################################
########################################################################################################################################
    st.write("---")
    st.markdown("<h5 style='text-align: center; color: black;'>Escolha o Indicador Gerencial</b></h5>", unsafe_allow_html=True)
    tema_ger = st.selectbox("", options=temas_ger, index=None, placeholder="Escolha o Indicador Gerencial!")
    fontsize = 24
    if tema_ger == "Público Médio / Sócios-Torcedores":
        markdown_1 = f"<div style='text-align:center;  color: black; font-weight: bold; font-size:{fontsize}px'>{tema_ger} (%)</div>"
        st.markdown("<h4 style='text-align: center;  color: black;'>Análise Comparativa Simples  (2024)</b></h4>", unsafe_allow_html=True)
        st.markdown(markdown_1, unsafe_allow_html=True)
        st.markdown("---")

        tópico = df1.iloc[35, 1:].values

        # Pairing clubs with their revenues and sorting them by revenue in descending order
        paired_clubs_revenues = sorted(zip(clubes, tópico), key=lambda x: x[1], reverse=True)
        sorted_clubes, sorted_revenues = zip(*paired_clubs_revenues)

        def create_club_revenue_chart(sorted_clubes, sorted_revenues, club_image_paths, tema_esport):
            
            # Create figure
            fig, ax = plt.subplots(figsize=(15, 10))
            
            # Plot bars
            bars = ax.bar(range(len(sorted_clubes)), sorted_revenues, color='skyblue')
            
            # Set chart limits and style
            max_revenue = max(sorted_revenues)
            ax.set_xlim(-0.5, len(sorted_clubes)-0.5)
            ax.set_ylim(0, max_revenue*1.1)  # Add 10% space at top
            
            # Remove spines and x-ticks
            ax.spines['right'].set_visible(False)
            ax.spines['top'].set_visible(False)
            ax.spines['bottom'].set_visible(False)
            ax.spines['left'].set_visible(False)
            ax.set_xticks([])
            
            # Add y-axis label
            ax.set_ylabel(f'{tema_ger}', fontsize=22, fontweight='bold')
            ax.tick_params(axis='y', labelsize=16)
            
            # Function to get club logo
            def getImage(url):
                try:
                    response = requests.get(url)
                    img = Image.open(BytesIO(response.content))
                    
                    # Make sure image has transparency
                    if img.mode != 'RGBA':
                        img = img.convert('RGBA')
                        
                    return OffsetImage(img, zoom=0.18)  # Slightly increased from original 0.15
                except Exception as e:
                    print(f"Error loading image from {url}: {e}")
                    return None
            
            # Add value labels above bars
            for bar in bars:
                height = bar.get_height()
                ax.annotate(f'{height:.0f}',
                        xy=(bar.get_x() + bar.get_width() / 2, height),
                        xytext=(0, 3),  # 3 points vertical offset
                        textcoords="offset points",
                        ha='center', va='bottom', fontsize=16)
            
            # Create a small margin at the bottom for the icons
            # Instead of using a separate subplot, we'll add the icons directly at the bottom of the chart
            # Add an invisible bar at the bottom to make space
            bottom_margin = max_revenue * 0.12  # Small margin for icons
            ax.set_ylim(-bottom_margin, max_revenue*1.1)  # Update y-limits to include margin
            
            # Add club logos - position them right at the bottom of the chart
            for i, club in enumerate(sorted_clubes):
                img_url = club_image_paths.get(club)
                if img_url:
                    img = getImage(img_url)
                    if img:
                        # Position just below the x-axis
                        ab = AnnotationBbox(
                            img, 
                            (i, -bottom_margin * 0.5),  # Position in the middle of the bottom margin
                            xycoords='data',
                            box_alignment=(0.5, 0.5),
                            frameon=False
                        )
                        ax.add_artist(ab)
            
            fig.tight_layout()
            return fig

            # Usage:
            fig = create_club_revenue_chart(sorted_clubes, sorted_revenues, club_image_paths, tema_ger)
            st.pyplot(fig)

########################################################################################################################################

    elif tema_ger == "Receita Operacional / Base de Torcedores":
        markdown_1 = f"<div style='text-align:center;  color: black; font-weight: bold; font-size:{fontsize}px'>{tema_ger:}</div>"
        st.markdown("<h4 style='text-align: center;  color: black;'>Análise Comparativa Simples  (2024)</b></h4>", unsafe_allow_html=True)
        st.markdown(markdown_1, unsafe_allow_html=True)
        st.markdown("<h6 style='text-align: center;  color: black;'>(R$ / Torcedor)</b></h6>", unsafe_allow_html=True)
        st.markdown("---")

        tópico = df1.iloc[38, 1:].values

        # Pairing clubs with their revenues and sorting them by revenue in descending order
        paired_clubs_revenues = sorted(zip(clubes, tópico), key=lambda x: x[1], reverse=True)
        sorted_clubes, sorted_revenues = zip(*paired_clubs_revenues)

        def create_club_revenue_chart(sorted_clubes, sorted_revenues, club_image_paths, tema_ger):
            import matplotlib.pyplot as plt
            import numpy as np
            from PIL import Image
            from io import BytesIO
            import requests
            from matplotlib.offsetbox import OffsetImage, AnnotationBbox
            
            # Create figure
            fig, ax = plt.subplots(figsize=(15, 10))
            
            # Plot bars
            bars = ax.bar(range(len(sorted_clubes)), sorted_revenues, color='skyblue')
            
            # Set chart limits and style
            max_revenue = max(sorted_revenues)
            ax.set_xlim(-0.5, len(sorted_clubes)-0.5)
            ax.set_ylim(0, max_revenue*1.1)  # Add 10% space at top
            
            # Remove spines and x-ticks
            ax.spines['right'].set_visible(False)
            ax.spines['top'].set_visible(False)
            ax.spines['bottom'].set_visible(False)
            ax.spines['left'].set_visible(False)
            ax.set_xticks([])
            
            # Add y-axis label
            ax.set_ylabel(f'{tema_ger}', fontsize=22, fontweight='bold')
            ax.tick_params(axis='y', labelsize=16)
            
            # Function to get club logo
            def getImage(url):
                try:
                    response = requests.get(url)
                    img = Image.open(BytesIO(response.content))
                    
                    # Make sure image has transparency
                    if img.mode != 'RGBA':
                        img = img.convert('RGBA')
                        
                    return OffsetImage(img, zoom=0.18)  # Slightly increased from original 0.15
                except Exception as e:
                    print(f"Error loading image from {url}: {e}")
                    return None
            
            # Add value labels above bars
            for bar in bars:
                height = bar.get_height()
                ax.annotate(f'{height:.0f}',
                        xy=(bar.get_x() + bar.get_width() / 2, height),
                        xytext=(0, 3),  # 3 points vertical offset
                        textcoords="offset points",
                        ha='center', va='bottom', fontsize=16)
            
            # Create a small margin at the bottom for the icons
            # Instead of using a separate subplot, we'll add the icons directly at the bottom of the chart
            # Add an invisible bar at the bottom to make space
            bottom_margin = max_revenue * 0.12  # Small margin for icons
            ax.set_ylim(-bottom_margin, max_revenue*1.1)  # Update y-limits to include margin
            
            # Add club logos - position them right at the bottom of the chart
            for i, club in enumerate(sorted_clubes):
                img_url = club_image_paths.get(club)
                if img_url:
                    img = getImage(img_url)
                    if img:
                        # Position just below the x-axis
                        ab = AnnotationBbox(
                            img, 
                            (i, -bottom_margin * 0.5),  # Position in the middle of the bottom margin
                            xycoords='data',
                            box_alignment=(0.5, 0.5),
                            frameon=False
                        )
                        ax.add_artist(ab)
            
            fig.tight_layout()
            return fig

        # Usage:
        fig = create_club_revenue_chart(sorted_clubes, sorted_revenues, club_image_paths, tema_ger)
        st.pyplot(fig)

#######################################################################################################################################

        st.markdown("<h4 style='text-align: center;  color: black;'>Análise Comparativa 2020-2024 (em moeda constante)</b></h4>", unsafe_allow_html=True)
        markdown_1 = f"<div style='text-align:center;  color: black; font-weight: bold; font-size:{fontsize}px'>{highlight:} (em destaque)</div>"
        st.markdown(markdown_1, unsafe_allow_html=True)
        st.markdown("---")

        years = ['2020', '2021', '2022', '2023', '2024']

        tópico2 = df3.iloc[22, 1:].values
        club_data = {
            'Atlético GO': tópico2[:5][::-1][:5],
            'Atlético': tópico2[5:10][::-1][:5],
            'Athletico': tópico2[10:15][::-1][:5],
            'Bahia': tópico2[15:20][::-1][:5],
            'Botafogo': tópico2[20:25][::-1][:5],
            'Corinthians': tópico2[25:30][::-1][:5],
            'Vitória': tópico2[30:35][::-1][:5],
            'Cruzeiro': tópico2[35:40][::-1][:5],
            'Cuiabá': tópico2[40:45][::-1][:5],
            'Flamengo': tópico2[45:50][::-1][:5],
            'Fluminense': tópico2[50:55][::-1][:5],
            'Fortaleza': tópico2[55:60][::-1][:5],
            'Grêmio': tópico2[60:65][::-1][:5],
            'Criciúma': tópico2[65:70][::-1][:5],
            'Internacional': tópico2[70:75][::-1][:5],
            'Palmeiras': tópico2[75:80][::-1][:5],
            'Juventude': tópico2[80:85][::-1][:5],
            'São Paulo': tópico2[85:90][::-1][:5],
            'Vasco': tópico2[90:95][::-1][:5],
        }

        def create_enhanced_time_series(years, club_data, highlight, tema_ger, club_image_paths=None):
            import matplotlib.pyplot as plt
            import matplotlib.patheffects as path_effects
            from matplotlib.offsetbox import OffsetImage, AnnotationBbox
            import numpy as np
            from PIL import Image
            import requests
            from io import BytesIO
            
            # Create figure with improved dimensions and DPI
            fig, ax = plt.subplots(figsize=(12, 8), dpi=100)
            
            # Add subtle grid for better readability
            ax.grid(axis='y', linestyle='--', alpha=0.2, zorder=0)
            
            # Track other clubs to create color gradient
            other_clubs = [club for club in club_data.keys() if club != highlight]
            
            # First, plot all non-highlighted clubs with faded color
            for i, club in enumerate(other_clubs):
                data = club_data[club]
                ax.plot(years, data, linewidth=1, linestyle='--', color=('gray'), 
                        alpha=0.6, zorder=1)
            
            # Then plot the highlighted club on top with a more vibrant appearance
            if highlight in club_data:
                # Get highlight club data
                highlight_data = club_data[highlight]
                
                # Plot the main highlighted line with a subtle shadow effect for depth
                main_line = ax.plot(years, highlight_data, linewidth=4, linestyle='-', 
                                color='#2b7bba', zorder=3)[0]
                main_line.set_path_effects([path_effects.SimpleLineShadow(offset=(1, -1), alpha=0.3),
                                        path_effects.Normal()])
                
                # Add markers at each data point
                ax.scatter(years, highlight_data, s=80, color='#2b7bba', edgecolor='white', linewidth=1.5, zorder=4)
                
                # Annotate each point on the highlighted club's line with improved text styling
                for i, value in enumerate(highlight_data):
                    text = ax.annotate(f'{value:.0f}', 
                                    (years[i], value),
                                    textcoords="offset points",
                                    xytext=(0, 12),
                                    ha='center',
                                    va='bottom',
                                    fontsize=14,
                                    fontweight='bold',
                                    color='#2b7bba',
                                    zorder=5)
                    text.set_path_effects([path_effects.withStroke(linewidth=3, foreground='white')])
                    
                # Add club logo at the end of the line if club_image_paths is provided
                if club_image_paths and highlight in club_image_paths:
                    try:
                        # Function to get club logo
                        def get_club_image(url, zoom=0.15):
                            try:
                                response = requests.get(url)
                                img = Image.open(BytesIO(response.content))
                                if img.mode != 'RGBA':
                                    img = img.convert('RGBA')
                                return OffsetImage(img, zoom=zoom)
                            except Exception as e:
                                print(f"Error loading image from {url}: {e}")
                                return None
                        
                        # Get the logo and place it at the end of the line
                        img_url = club_image_paths.get(highlight)
                        if img_url:
                            img = get_club_image(img_url, zoom=0.18)
                            if img:
                                last_year = years[-1]
                                last_value = highlight_data[-1]
                                logo_box = AnnotationBbox(img, 
                                                        (last_year + 0.15, last_value),  # Position slightly after the line
                                                        frameon=False,
                                                        box_alignment=(0, 0.5),
                                                        zorder=6)
                                ax.add_artist(logo_box)
                    except Exception as e:
                        print(f"Error adding club logo: {e}")
            
            # Style adjustments
            ax.set_ylabel(f'{tema_ger}', fontsize=14, fontweight='bold')
            
            # Customize axis ticks and labels
            ax.tick_params(axis='both', which='major', labelsize=12)
            
            # Set integer x-ticks for years
            ax.set_xticks(years)
            ax.set_xticklabels([str(int(year)) for year in years])
            
            # Remove spines
            ax.spines['right'].set_visible(False)
            ax.spines['top'].set_visible(False)
            
            # Add subtle light gray background to the plot area
            ax.set_facecolor('#f9f9f9')
            
            # Adjust layout
            plt.tight_layout()
            
            return fig
            
        # Usage:
        fig = create_enhanced_time_series(years, club_data, highlight, tema_ger, club_image_paths)
        st.pyplot(fig)

#######################################################################################################################################
########################################################################################################################################

    elif tema_ger == "Receita Operacional / Sócios Torcedores":
        markdown_1 = f"<div style='text-align:center;  color: black; font-weight: bold; font-size:{fontsize}px'>{tema_ger:}</div>"
        st.markdown("<h4 style='text-align: center;  color: black;'>Análise Comparativa Simples  (2024)</b></h4>", unsafe_allow_html=True)
        st.markdown(markdown_1, unsafe_allow_html=True)
        st.markdown("<h6 style='text-align: center;  color: black;'>(R$ mil / Torcedor)</b></h6>", unsafe_allow_html=True)
        st.markdown("---")

        tópico = df1.iloc[39, 1:].values

        # Pairing clubs with their revenues and sorting them by revenue in descending order
        paired_clubs_revenues = sorted(zip(clubes, tópico), key=lambda x: x[1], reverse=True)
        sorted_clubes, sorted_revenues = zip(*paired_clubs_revenues)

        def create_club_revenue_chart(sorted_clubes, sorted_revenues, club_image_paths, tema_ger):
            
            # Create figure
            fig, ax = plt.subplots(figsize=(15, 10))
            
            # Plot bars
            bars = ax.bar(range(len(sorted_clubes)), sorted_revenues, color='skyblue')
            
            # Set chart limits and style
            max_revenue = max(sorted_revenues)
            ax.set_xlim(-0.5, len(sorted_clubes)-0.5)
            ax.set_ylim(0, max_revenue*1.1)  # Add 10% space at top
            
            # Remove spines and x-ticks
            ax.spines['right'].set_visible(False)
            ax.spines['top'].set_visible(False)
            ax.spines['bottom'].set_visible(False)
            ax.spines['left'].set_visible(False)
            ax.set_xticks([])
            
            # Add y-axis label
            ax.set_ylabel(f'{tema_ger}', fontsize=22, fontweight='bold')
            ax.tick_params(axis='y', labelsize=16)
            
            # Function to get club logo
            def getImage(url):
                try:
                    response = requests.get(url)
                    img = Image.open(BytesIO(response.content))
                    
                    # Make sure image has transparency
                    if img.mode != 'RGBA':
                        img = img.convert('RGBA')
                        
                    return OffsetImage(img, zoom=0.18)  # Slightly increased from original 0.15
                except Exception as e:
                    print(f"Error loading image from {url}: {e}")
                    return None
            
            # Add value labels above bars
            for bar in bars:
                height = bar.get_height()
                ax.annotate(f'{height:.0f}',
                        xy=(bar.get_x() + bar.get_width() / 2, height),
                        xytext=(0, 3),  # 3 points vertical offset
                        textcoords="offset points",
                        ha='center', va='bottom', fontsize=16)
            
            # Create a small margin at the bottom for the icons
            # Instead of using a separate subplot, we'll add the icons directly at the bottom of the chart
            # Add an invisible bar at the bottom to make space
            bottom_margin = max_revenue * 0.12  # Small margin for icons
            ax.set_ylim(-bottom_margin, max_revenue*1.1)  # Update y-limits to include margin
            
            # Add club logos - position them right at the bottom of the chart
            for i, club in enumerate(sorted_clubes):
                img_url = club_image_paths.get(club)
                if img_url:
                    img = getImage(img_url)
                    if img:
                        # Position just below the x-axis
                        ab = AnnotationBbox(
                            img, 
                            (i, -bottom_margin * 0.5),  # Position in the middle of the bottom margin
                            xycoords='data',
                            box_alignment=(0.5, 0.5),
                            frameon=False
                        )
                        ax.add_artist(ab)
            
            fig.tight_layout()
            return fig

        # Usage:
        fig = create_club_revenue_chart(sorted_clubes, sorted_revenues, club_image_paths, tema_ger)
        st.pyplot(fig)

########################################################################################################################################

    elif tema_ger == "Receita com Venda de Direitos Econômicos / Gastos com a Base":
        markdown_1 = f"<div style='text-align:center;  color: black; font-weight: bold; font-size:{fontsize}px'>{tema_ger:}</div>"
        st.markdown("<h4 style='text-align: center;  color: black;'>Análise Comparativa Simples  (2024)</b></h4>", unsafe_allow_html=True)
        st.markdown(markdown_1, unsafe_allow_html=True)
        st.markdown("---")

        tópico = df1.iloc[40, 1:].values

        # Pairing clubs with their revenues and sorting them by revenue in descending order
        paired_clubs_revenues = sorted(zip(clubes, tópico), key=lambda x: x[1], reverse=True)
        sorted_clubes, sorted_revenues = zip(*paired_clubs_revenues)

        def create_club_revenue_chart(sorted_clubes, sorted_revenues, club_image_paths, tema_ger):
            
            # Create figure
            fig, ax = plt.subplots(figsize=(15, 10))
            
            # Plot bars
            bars = ax.bar(range(len(sorted_clubes)), sorted_revenues, color='skyblue')
            
            # Set chart limits and style
            max_revenue = max(sorted_revenues)
            ax.set_xlim(-0.5, len(sorted_clubes)-0.5)
            ax.set_ylim(0, max_revenue*1.1)  # Add 10% space at top
            
            # Remove spines and x-ticks
            ax.spines['right'].set_visible(False)
            ax.spines['top'].set_visible(False)
            ax.spines['bottom'].set_visible(False)
            ax.spines['left'].set_visible(False)
            ax.set_xticks([])
            
            # Add y-axis label
            ax.set_ylabel(f'{tema_ger}', fontsize=22, fontweight='bold')
            ax.tick_params(axis='y', labelsize=16)
            
            # Function to get club logo
            def getImage(url):
                try:
                    response = requests.get(url)
                    img = Image.open(BytesIO(response.content))
                    
                    # Make sure image has transparency
                    if img.mode != 'RGBA':
                        img = img.convert('RGBA')
                        
                    return OffsetImage(img, zoom=0.18)  # Slightly increased from original 0.15
                except Exception as e:
                    print(f"Error loading image from {url}: {e}")
                    return None
            
            # Add value labels above bars
            for bar in bars:
                height = bar.get_height()
                ax.annotate(f'{height:.0f}',
                        xy=(bar.get_x() + bar.get_width() / 2, height),
                        xytext=(0, 3),  # 3 points vertical offset
                        textcoords="offset points",
                        ha='center', va='bottom', fontsize=16)
            
            # Create a small margin at the bottom for the icons
            # Instead of using a separate subplot, we'll add the icons directly at the bottom of the chart
            # Add an invisible bar at the bottom to make space
            bottom_margin = max_revenue * 0.12  # Small margin for icons
            ax.set_ylim(-bottom_margin, max_revenue*1.1)  # Update y-limits to include margin
            
            # Add club logos - position them right at the bottom of the chart
            for i, club in enumerate(sorted_clubes):
                img_url = club_image_paths.get(club)
                if img_url:
                    img = getImage(img_url)
                    if img:
                        # Position just below the x-axis
                        ab = AnnotationBbox(
                            img, 
                            (i, -bottom_margin * 0.5),  # Position in the middle of the bottom margin
                            xycoords='data',
                            box_alignment=(0.5, 0.5),
                            frameon=False
                        )
                        ax.add_artist(ab)
            
            fig.tight_layout()
            return fig

        # Usage:
        fig = create_club_revenue_chart(sorted_clubes, sorted_revenues, club_image_paths, tema_ger)
        st.pyplot(fig)

#######################################################################################################################################

        st.markdown("<h4 style='text-align: center;  color: black;'>Análise Comparativa 2020-2024 (em moeda constante)</b></h4>", unsafe_allow_html=True)
        markdown_1 = f"<div style='text-align:center;  color: black; font-weight: bold; font-size:{fontsize}px'>{highlight:} (em destaque)</div>"
        st.markdown(markdown_1, unsafe_allow_html=True)
        st.markdown("---")

        years = ['2020', '2021', '2022', '2023', '2024']

        tópico2 = df3.iloc[23, 1:].values
        club_data = {
            'Atlético GO': tópico2[:5][::-1][:5],
            'Atlético': tópico2[5:10][::-1][:5],
            'Athletico': tópico2[10:15][::-1][:5],
            'Bahia': tópico2[15:20][::-1][:5],
            'Botafogo': tópico2[20:25][::-1][:5],
            'Corinthians': tópico2[25:30][::-1][:5],
            'Vitória': tópico2[30:35][::-1][:5],
            'Cruzeiro': tópico2[35:40][::-1][:5],
            'Cuiabá': tópico2[40:45][::-1][:5],
            'Flamengo': tópico2[45:50][::-1][:5],
            'Fluminense': tópico2[50:55][::-1][:5],
            'Fortaleza': tópico2[55:60][::-1][:5],
            'Grêmio': tópico2[60:65][::-1][:5],
            'Criciúma': tópico2[65:70][::-1][:5],
            'Internacional': tópico2[70:75][::-1][:5],
            'Palmeiras': tópico2[75:80][::-1][:5],
            'Juventude': tópico2[80:85][::-1][:5],
            'São Paulo': tópico2[85:90][::-1][:5],
            'Vasco': tópico2[90:95][::-1][:5],
        }

        def create_enhanced_time_series(years, club_data, highlight, tema_ger, club_image_paths=None):
            import matplotlib.pyplot as plt
            import matplotlib.patheffects as path_effects
            from matplotlib.offsetbox import OffsetImage, AnnotationBbox
            import numpy as np
            from PIL import Image
            import requests
            from io import BytesIO
            
            # Create figure with improved dimensions and DPI
            fig, ax = plt.subplots(figsize=(12, 8), dpi=100)
            
            # Add subtle grid for better readability
            ax.grid(axis='y', linestyle='--', alpha=0.2, zorder=0)
            
            # Track other clubs to create color gradient
            other_clubs = [club for club in club_data.keys() if club != highlight]
            
            # First, plot all non-highlighted clubs with faded color
            for i, club in enumerate(other_clubs):
                data = club_data[club]
                ax.plot(years, data, linewidth=1, linestyle='--', color=('gray'), 
                        alpha=0.6, zorder=1)
            
            # Then plot the highlighted club on top with a more vibrant appearance
            if highlight in club_data:
                # Get highlight club data
                highlight_data = club_data[highlight]
                
                # Plot the main highlighted line with a subtle shadow effect for depth
                main_line = ax.plot(years, highlight_data, linewidth=4, linestyle='-', 
                                color='#2b7bba', zorder=3)[0]
                main_line.set_path_effects([path_effects.SimpleLineShadow(offset=(1, -1), alpha=0.3),
                                        path_effects.Normal()])
                
                # Add markers at each data point
                ax.scatter(years, highlight_data, s=80, color='#2b7bba', edgecolor='white', linewidth=1.5, zorder=4)
                
                # Annotate each point on the highlighted club's line with improved text styling
                for i, value in enumerate(highlight_data):
                    text = ax.annotate(f'{value:.0f}', 
                                    (years[i], value),
                                    textcoords="offset points",
                                    xytext=(0, 12),
                                    ha='center',
                                    va='bottom',
                                    fontsize=14,
                                    fontweight='bold',
                                    color='#2b7bba',
                                    zorder=5)
                    text.set_path_effects([path_effects.withStroke(linewidth=3, foreground='white')])
                    
                # Add club logo at the end of the line if club_image_paths is provided
                if club_image_paths and highlight in club_image_paths:
                    try:
                        # Function to get club logo
                        def get_club_image(url, zoom=0.15):
                            try:
                                response = requests.get(url)
                                img = Image.open(BytesIO(response.content))
                                if img.mode != 'RGBA':
                                    img = img.convert('RGBA')
                                return OffsetImage(img, zoom=zoom)
                            except Exception as e:
                                print(f"Error loading image from {url}: {e}")
                                return None
                        
                        # Get the logo and place it at the end of the line
                        img_url = club_image_paths.get(highlight)
                        if img_url:
                            img = get_club_image(img_url, zoom=0.18)
                            if img:
                                last_year = years[-1]
                                last_value = highlight_data[-1]
                                logo_box = AnnotationBbox(img, 
                                                        (last_year + 0.15, last_value),  # Position slightly after the line
                                                        frameon=False,
                                                        box_alignment=(0, 0.5),
                                                        zorder=6)
                                ax.add_artist(logo_box)
                    except Exception as e:
                        print(f"Error adding club logo: {e}")
            
            # Style adjustments
            ax.set_ylabel(f'{tema_ger} (R$ milhões)', fontsize=14, fontweight='bold')
            
            # Customize axis ticks and labels
            ax.tick_params(axis='both', which='major', labelsize=12)
            
            # Set integer x-ticks for years
            ax.set_xticks(years)
            ax.set_xticklabels([str(int(year)) for year in years])
            
            # Remove spines
            ax.spines['right'].set_visible(False)
            ax.spines['top'].set_visible(False)
            
            # Add subtle light gray background to the plot area
            ax.set_facecolor('#f9f9f9')
            
            # Adjust layout
            plt.tight_layout()
            
            return fig
            
        # Usage:
        fig = create_enhanced_time_series(years, club_data, highlight, tema_ger, club_image_paths)
        st.pyplot(fig)

#######################################################################################################################################
########################################################################################################################################

    elif tema_ger == "Receita com Venda de Direitos Econômicos / Pontuação Série A":
        markdown_1 = f"<div style='text-align:center;  color: black; font-weight: bold; font-size:{fontsize}px'>{tema_ger:}</div>"
        st.markdown("<h4 style='text-align: center;  color: black;'>Análise Comparativa Simples  (2024)</b></h4>", unsafe_allow_html=True)
        st.markdown(markdown_1, unsafe_allow_html=True)
        st.markdown("<h6 style='text-align: center;  color: black;'>(R$ milhões / Ponto conquistado)</b></h6>", unsafe_allow_html=True)

        st.markdown("---")

        tópico = df1.iloc[41, 1:].values

        # Pairing clubs with their revenues and sorting them by revenue in descending order
        paired_clubs_revenues = sorted(zip(clubes, tópico), key=lambda x: x[1], reverse=True)
        sorted_clubes, sorted_revenues = zip(*paired_clubs_revenues)

        def create_club_revenue_chart(sorted_clubes, sorted_revenues, club_image_paths, tema_ger):
            
            # Create figure
            fig, ax = plt.subplots(figsize=(15, 10))
            
            # Plot bars
            bars = ax.bar(range(len(sorted_clubes)), sorted_revenues, color='skyblue')
            
            # Set chart limits and style
            max_revenue = max(sorted_revenues)
            ax.set_xlim(-0.5, len(sorted_clubes)-0.5)
            ax.set_ylim(0, max_revenue*1.1)  # Add 10% space at top
            
            # Remove spines and x-ticks
            ax.spines['right'].set_visible(False)
            ax.spines['top'].set_visible(False)
            ax.spines['bottom'].set_visible(False)
            ax.spines['left'].set_visible(False)
            ax.set_xticks([])
            
            # Add y-axis label
            ax.set_ylabel(f'{tema_ger}', fontsize=18, fontweight='bold')
            ax.tick_params(axis='y', labelsize=16)
            
            # Function to get club logo
            def getImage(url):
                try:
                    response = requests.get(url)
                    img = Image.open(BytesIO(response.content))
                    
                    # Make sure image has transparency
                    if img.mode != 'RGBA':
                        img = img.convert('RGBA')
                        
                    return OffsetImage(img, zoom=0.18)  # Slightly increased from original 0.15
                except Exception as e:
                    print(f"Error loading image from {url}: {e}")
                    return None
            
            # Add value labels above bars
            for bar in bars:
                height = bar.get_height()
                ax.annotate(f'{height:.2f}',
                        xy=(bar.get_x() + bar.get_width() / 2, height),
                        xytext=(0, 3),  # 3 points vertical offset
                        textcoords="offset points",
                        ha='center', va='bottom', fontsize=16)
            
            # Create a small margin at the bottom for the icons
            # Instead of using a separate subplot, we'll add the icons directly at the bottom of the chart
            # Add an invisible bar at the bottom to make space
            bottom_margin = max_revenue * 0.12  # Small margin for icons
            ax.set_ylim(-bottom_margin, max_revenue*1.1)  # Update y-limits to include margin
            
            # Add club logos - position them right at the bottom of the chart
            for i, club in enumerate(sorted_clubes):
                img_url = club_image_paths.get(club)
                if img_url:
                    img = getImage(img_url)
                    if img:
                        # Position just below the x-axis
                        ab = AnnotationBbox(
                            img, 
                            (i, -bottom_margin * 0.5),  # Position in the middle of the bottom margin
                            xycoords='data',
                            box_alignment=(0.5, 0.5),
                            frameon=False
                        )
                        ax.add_artist(ab)
            
            fig.tight_layout()
            return fig

        # Usage:
        fig = create_club_revenue_chart(sorted_clubes, sorted_revenues, club_image_paths, tema_ger)
        st.pyplot(fig)

#######################################################################################################################################

        st.markdown("<h4 style='text-align: center;  color: black;'>Análise Comparativa 2020-2024 (em moeda constante)</b></h4>", unsafe_allow_html=True)
        markdown_1 = f"<div style='text-align:center;  color: black; font-weight: bold; font-size:{fontsize}px'>{highlight:} (em destaque)</div>"
        st.markdown(markdown_1, unsafe_allow_html=True)
        st.markdown("---")

        years = ['2020', '2021', '2022', '2023', '2024']

        tópico2 = df3.iloc[24, 1:].values
        club_data = {
            'Atlético GO': tópico2[:5][::-1][:5],
            'Atlético': tópico2[5:10][::-1][:5],
            'Athletico': tópico2[10:15][::-1][:5],
            'Bahia': tópico2[15:20][::-1][:5],
            'Botafogo': tópico2[20:25][::-1][:5],
            'Corinthians': tópico2[25:30][::-1][:5],
            'Vitória': tópico2[30:35][::-1][:5],
            'Cruzeiro': tópico2[35:40][::-1][:5],
            'Cuiabá': tópico2[40:45][::-1][:5],
            'Flamengo': tópico2[45:50][::-1][:5],
            'Fluminense': tópico2[50:55][::-1][:5],
            'Fortaleza': tópico2[55:60][::-1][:5],
            'Grêmio': tópico2[60:65][::-1][:5],
            'Criciúma': tópico2[65:70][::-1][:5],
            'Internacional': tópico2[70:75][::-1][:5],
            'Palmeiras': tópico2[75:80][::-1][:5],
            'Juventude': tópico2[80:85][::-1][:5],
            'São Paulo': tópico2[85:90][::-1][:5],
            'Vasco': tópico2[90:95][::-1][:5],
        }

        def create_enhanced_time_series(years, club_data, highlight, tema_ger, club_image_paths=None):
            
            # Create figure with improved dimensions and DPI
            fig, ax = plt.subplots(figsize=(12, 8), dpi=100)
            
            # Add subtle grid for better readability
            ax.grid(axis='y', linestyle='--', alpha=0.2, zorder=0)
            
            # Track other clubs to create color gradient
            other_clubs = [club for club in club_data.keys() if club != highlight]
            
            # First, plot all non-highlighted clubs with faded color
            for i, club in enumerate(other_clubs):
                data = club_data[club]
                ax.plot(years, data, linewidth=1, linestyle='--', color=('gray'), 
                        alpha=0.6, zorder=1)
            
            # Then plot the highlighted club on top with a more vibrant appearance
            if highlight in club_data:
                # Get highlight club data
                highlight_data = club_data[highlight]
                
                # Plot the main highlighted line with a subtle shadow effect for depth
                main_line = ax.plot(years, highlight_data, linewidth=4, linestyle='-', 
                                color='#2b7bba', zorder=3)[0]
                main_line.set_path_effects([path_effects.SimpleLineShadow(offset=(1, -1), alpha=0.3),
                                        path_effects.Normal()])
                
                # Add markers at each data point
                ax.scatter(years, highlight_data, s=80, color='#2b7bba', edgecolor='white', linewidth=1.5, zorder=4)
                
                # Annotate each point on the highlighted club's line with improved text styling
                for i, value in enumerate(highlight_data):
                    text = ax.annotate(f'{value:.2f}', 
                                    (years[i], value),
                                    textcoords="offset points",
                                    xytext=(0, 12),
                                    ha='center',
                                    va='bottom',
                                    fontsize=14,
                                    fontweight='bold',
                                    color='#2b7bba',
                                    zorder=5)
                    text.set_path_effects([path_effects.withStroke(linewidth=3, foreground='white')])
                    
                # Add club logo at the end of the line if club_image_paths is provided
                if club_image_paths and highlight in club_image_paths:
                    try:
                        # Function to get club logo
                        def get_club_image(url, zoom=0.15):
                            try:
                                response = requests.get(url)
                                img = Image.open(BytesIO(response.content))
                                if img.mode != 'RGBA':
                                    img = img.convert('RGBA')
                                return OffsetImage(img, zoom=zoom)
                            except Exception as e:
                                print(f"Error loading image from {url}: {e}")
                                return None
                        
                        # Get the logo and place it at the end of the line
                        img_url = club_image_paths.get(highlight)
                        if img_url:
                            img = get_club_image(img_url, zoom=0.18)
                            if img:
                                last_year = years[-1]
                                last_value = highlight_data[-1]
                                logo_box = AnnotationBbox(img, 
                                                        (last_year + 0.15, last_value),  # Position slightly after the line
                                                        frameon=False,
                                                        box_alignment=(0, 0.5),
                                                        zorder=6)
                                ax.add_artist(logo_box)
                    except Exception as e:
                        print(f"Error adding club logo: {e}")
            
            # Style adjustments
            ax.set_ylabel(f'{tema_ger}', fontsize=14, fontweight='bold')
            
            # Customize axis ticks and labels
            ax.tick_params(axis='both', which='major', labelsize=12)
            
            # Set integer x-ticks for years
            ax.set_xticks(years)
            ax.set_xticklabels([str(int(year)) for year in years])
            
            # Remove spines
            ax.spines['right'].set_visible(False)
            ax.spines['top'].set_visible(False)
            
            # Add subtle light gray background to the plot area
            ax.set_facecolor('#f9f9f9')
            
            # Adjust layout
            plt.tight_layout()
            
            return fig
            
        # Usage:
        fig = create_enhanced_time_series(years, club_data, highlight, tema_ger, club_image_paths)
        st.pyplot(fig)

#######################################################################################################################################
########################################################################################################################################

    elif tema_ger == "Receita com Premiação / Folha do Futebol":
        markdown_1 = f"<div style='text-align:center;  color: black; font-weight: bold; font-size:{fontsize}px'>{tema_ger:}</div>"
        st.markdown("<h4 style='text-align: center;  color: black;'>Análise Comparativa Simples  (2024)</b></h4>", unsafe_allow_html=True)
        st.markdown(markdown_1, unsafe_allow_html=True)
        st.markdown("---")

        tópico = df1.iloc[42, 1:].values

        # Pairing clubs with their revenues and sorting them by revenue in descending order
        paired_clubs_revenues = sorted(zip(clubes, tópico), key=lambda x: x[1], reverse=True)
        sorted_clubes, sorted_revenues = zip(*paired_clubs_revenues)

        def create_club_revenue_chart(sorted_clubes, sorted_revenues, club_image_paths, tema_ger):
            
            # Create figure
            fig, ax = plt.subplots(figsize=(15, 10))
            
            # Plot bars
            bars = ax.bar(range(len(sorted_clubes)), sorted_revenues, color='skyblue')
            
            # Set chart limits and style
            max_revenue = max(sorted_revenues)
            ax.set_xlim(-0.5, len(sorted_clubes)-0.5)
            ax.set_ylim(0, max_revenue*1.1)  # Add 10% space at top
            
            # Remove spines and x-ticks
            ax.spines['right'].set_visible(False)
            ax.spines['top'].set_visible(False)
            ax.spines['bottom'].set_visible(False)
            ax.spines['left'].set_visible(False)
            ax.set_xticks([])
            
            # Add y-axis label
            ax.set_ylabel(f'{tema_ger}', fontsize=22, fontweight='bold')
            ax.tick_params(axis='y', labelsize=16)
            
            # Function to get club logo
            def getImage(url):
                try:
                    response = requests.get(url)
                    img = Image.open(BytesIO(response.content))
                    
                    # Make sure image has transparency
                    if img.mode != 'RGBA':
                        img = img.convert('RGBA')
                        
                    return OffsetImage(img, zoom=0.18)  # Slightly increased from original 0.15
                except Exception as e:
                    print(f"Error loading image from {url}: {e}")
                    return None
            
            # Add value labels above bars
            for bar in bars:
                height = bar.get_height()
                ax.annotate(f'{height:.2f}',
                        xy=(bar.get_x() + bar.get_width() / 2, height),
                        xytext=(0, 3),  # 3 points vertical offset
                        textcoords="offset points",
                        ha='center', va='bottom', fontsize=16)
            
            # Create a small margin at the bottom for the icons
            # Instead of using a separate subplot, we'll add the icons directly at the bottom of the chart
            # Add an invisible bar at the bottom to make space
            bottom_margin = max_revenue * 0.12  # Small margin for icons
            ax.set_ylim(-bottom_margin, max_revenue*1.1)  # Update y-limits to include margin
            
            # Add club logos - position them right at the bottom of the chart
            for i, club in enumerate(sorted_clubes):
                img_url = club_image_paths.get(club)
                if img_url:
                    img = getImage(img_url)
                    if img:
                        # Position just below the x-axis
                        ab = AnnotationBbox(
                            img, 
                            (i, -bottom_margin * 0.5),  # Position in the middle of the bottom margin
                            xycoords='data',
                            box_alignment=(0.5, 0.5),
                            frameon=False
                        )
                        ax.add_artist(ab)
            
            fig.tight_layout()
            return fig

        # Usage:
        fig = create_club_revenue_chart(sorted_clubes, sorted_revenues, club_image_paths, tema_ger)
        st.pyplot(fig)

#######################################################################################################################################

        st.markdown("<h4 style='text-align: center;  color: black;'>Análise Comparativa 2020-2024 (em moeda constante)</b></h4>", unsafe_allow_html=True)
        markdown_1 = f"<div style='text-align:center;  color: black; font-weight: bold; font-size:{fontsize}px'>{highlight:} (em destaque)</div>"
        st.markdown(markdown_1, unsafe_allow_html=True)
        st.markdown("---")

        years = ['2020', '2021', '2022', '2023', '2024']

        tópico2 = df3.iloc[25, 1:].values
        club_data = {
            'Atlético GO': tópico2[:5][::-1][:5],
            'Atlético': tópico2[5:10][::-1][:5],
            'Athletico': tópico2[10:15][::-1][:5],
            'Bahia': tópico2[15:20][::-1][:5],
            'Botafogo': tópico2[20:25][::-1][:5],
            'Corinthians': tópico2[25:30][::-1][:5],
            'Vitória': tópico2[30:35][::-1][:5],
            'Cruzeiro': tópico2[35:40][::-1][:5],
            'Cuiabá': tópico2[40:45][::-1][:5],
            'Flamengo': tópico2[45:50][::-1][:5],
            'Fluminense': tópico2[50:55][::-1][:5],
            'Fortaleza': tópico2[55:60][::-1][:5],
            'Grêmio': tópico2[60:65][::-1][:5],
            'Criciúma': tópico2[65:70][::-1][:5],
            'Internacional': tópico2[70:75][::-1][:5],
            'Palmeiras': tópico2[75:80][::-1][:5],
            'Juventude': tópico2[80:85][::-1][:5],
            'São Paulo': tópico2[85:90][::-1][:5],
            'Vasco': tópico2[90:95][::-1][:5],
        }

        def create_enhanced_time_series(years, club_data, highlight, tema_ger, club_image_paths=None):
            import matplotlib.pyplot as plt
            import matplotlib.patheffects as path_effects
            from matplotlib.offsetbox import OffsetImage, AnnotationBbox
            import numpy as np
            from PIL import Image
            import requests
            from io import BytesIO
            
            # Create figure with improved dimensions and DPI
            fig, ax = plt.subplots(figsize=(12, 8), dpi=100)
            
            # Add subtle grid for better readability
            ax.grid(axis='y', linestyle='--', alpha=0.2, zorder=0)
            
            # Track other clubs to create color gradient
            other_clubs = [club for club in club_data.keys() if club != highlight]
            
            # First, plot all non-highlighted clubs with faded color
            for i, club in enumerate(other_clubs):
                data = club_data[club]
                ax.plot(years, data, linewidth=1, linestyle='--', color=('gray'), 
                        alpha=0.6, zorder=1)
            
            # Then plot the highlighted club on top with a more vibrant appearance
            if highlight in club_data:
                # Get highlight club data
                highlight_data = club_data[highlight]
                
                # Plot the main highlighted line with a subtle shadow effect for depth
                main_line = ax.plot(years, highlight_data, linewidth=4, linestyle='-', 
                                color='#2b7bba', zorder=3)[0]
                main_line.set_path_effects([path_effects.SimpleLineShadow(offset=(1, -1), alpha=0.3),
                                        path_effects.Normal()])
                
                # Add markers at each data point
                ax.scatter(years, highlight_data, s=80, color='#2b7bba', edgecolor='white', linewidth=1.5, zorder=4)
                
                # Annotate each point on the highlighted club's line with improved text styling
                for i, value in enumerate(highlight_data):
                    text = ax.annotate(f'{value:.2f}', 
                                    (years[i], value),
                                    textcoords="offset points",
                                    xytext=(0, 12),
                                    ha='center',
                                    va='bottom',
                                    fontsize=14,
                                    fontweight='bold',
                                    color='#2b7bba',
                                    zorder=5)
                    text.set_path_effects([path_effects.withStroke(linewidth=3, foreground='white')])
                    
                # Add club logo at the end of the line if club_image_paths is provided
                if club_image_paths and highlight in club_image_paths:
                    try:
                        # Function to get club logo
                        def get_club_image(url, zoom=0.15):
                            try:
                                response = requests.get(url)
                                img = Image.open(BytesIO(response.content))
                                if img.mode != 'RGBA':
                                    img = img.convert('RGBA')
                                return OffsetImage(img, zoom=zoom)
                            except Exception as e:
                                print(f"Error loading image from {url}: {e}")
                                return None
                        
                        # Get the logo and place it at the end of the line
                        img_url = club_image_paths.get(highlight)
                        if img_url:
                            img = get_club_image(img_url, zoom=0.18)
                            if img:
                                last_year = years[-1]
                                last_value = highlight_data[-1]
                                logo_box = AnnotationBbox(img, 
                                                        (last_year + 0.15, last_value),  # Position slightly after the line
                                                        frameon=False,
                                                        box_alignment=(0, 0.5),
                                                        zorder=6)
                                ax.add_artist(logo_box)
                    except Exception as e:
                        print(f"Error adding club logo: {e}")
            
            # Style adjustments
            ax.set_ylabel(f'{tema_ger}', fontsize=14, fontweight='bold')
            
            # Customize axis ticks and labels
            ax.tick_params(axis='both', which='major', labelsize=12)
            
            # Set integer x-ticks for years
            ax.set_xticks(years)
            ax.set_xticklabels([str(int(year)) for year in years])
            
            # Remove spines
            ax.spines['right'].set_visible(False)
            ax.spines['top'].set_visible(False)
            
            # Add subtle light gray background to the plot area
            ax.set_facecolor('#f9f9f9')
            
            # Adjust layout
            plt.tight_layout()
            
            return fig
            
        # Usage:
        fig = create_enhanced_time_series(years, club_data, highlight, tema_ger, club_image_paths)
        st.pyplot(fig)

#######################################################################################################################################
########################################################################################################################################

    elif tema_ger == "Folha do futebol / Pontuação Série A":
        markdown_1 = f"<div style='text-align:center;  color: black; font-weight: bold; font-size:{fontsize}px'>{tema_ger:}</div>"
        st.markdown("<h4 style='text-align: center;  color: black;'>Análise Comparativa Simples  (2024)</b></h4>", unsafe_allow_html=True)
        st.markdown(markdown_1, unsafe_allow_html=True)
        st.markdown("<h6 style='text-align: center;  color: black;'>(R$ milhões / Ponto conquistado)</b></h6>", unsafe_allow_html=True)
        st.markdown("---")

        tópico = df1.iloc[43, 1:].values

        # Pairing clubs with their revenues and sorting them by revenue in descending order
        paired_clubs_revenues = sorted(zip(clubes, tópico), key=lambda x: x[1], reverse=True)
        sorted_clubes, sorted_revenues = zip(*paired_clubs_revenues)

        def create_club_revenue_chart(sorted_clubes, sorted_revenues, club_image_paths, tema_ger):
            import matplotlib.pyplot as plt
            import numpy as np
            from PIL import Image
            from io import BytesIO
            import requests
            from matplotlib.offsetbox import OffsetImage, AnnotationBbox
            
            # Create figure
            fig, ax = plt.subplots(figsize=(15, 10))
            
            # Plot bars
            bars = ax.bar(range(len(sorted_clubes)), sorted_revenues, color='skyblue')
            
            # Set chart limits and style
            max_revenue = max(sorted_revenues)
            ax.set_xlim(-0.5, len(sorted_clubes)-0.5)
            ax.set_ylim(0, max_revenue*1.1)  # Add 10% space at top
            
            # Remove spines and x-ticks
            ax.spines['right'].set_visible(False)
            ax.spines['top'].set_visible(False)
            ax.spines['bottom'].set_visible(False)
            ax.spines['left'].set_visible(False)
            ax.set_xticks([])
            
            # Add y-axis label
            ax.set_ylabel(f'{tema_ger}', fontsize=22, fontweight='bold')
            ax.tick_params(axis='y', labelsize=16)
            
            # Function to get club logo
            def getImage(url):
                try:
                    response = requests.get(url)
                    img = Image.open(BytesIO(response.content))
                    
                    # Make sure image has transparency
                    if img.mode != 'RGBA':
                        img = img.convert('RGBA')
                        
                    return OffsetImage(img, zoom=0.18)  # Slightly increased from original 0.15
                except Exception as e:
                    print(f"Error loading image from {url}: {e}")
                    return None
            
            # Add value labels above bars
            for bar in bars:
                height = bar.get_height()
                ax.annotate(f'{height:.2f}',
                        xy=(bar.get_x() + bar.get_width() / 2, height),
                        xytext=(0, 3),  # 3 points vertical offset
                        textcoords="offset points",
                        ha='center', va='bottom', fontsize=16)
            
            # Create a small margin at the bottom for the icons
            # Instead of using a separate subplot, we'll add the icons directly at the bottom of the chart
            # Add an invisible bar at the bottom to make space
            bottom_margin = max_revenue * 0.12  # Small margin for icons
            ax.set_ylim(-bottom_margin, max_revenue*1.1)  # Update y-limits to include margin
            
            # Add club logos - position them right at the bottom of the chart
            for i, club in enumerate(sorted_clubes):
                img_url = club_image_paths.get(club)
                if img_url:
                    img = getImage(img_url)
                    if img:
                        # Position just below the x-axis
                        ab = AnnotationBbox(
                            img, 
                            (i, -bottom_margin * 0.5),  # Position in the middle of the bottom margin
                            xycoords='data',
                            box_alignment=(0.5, 0.5),
                            frameon=False
                        )
                        ax.add_artist(ab)
            
            fig.tight_layout()
            return fig

        # Usage:
        fig = create_club_revenue_chart(sorted_clubes, sorted_revenues, club_image_paths, tema_ger)
        st.pyplot(fig)

#######################################################################################################################################

        st.markdown("<h4 style='text-align: center;  color: black;'>Análise Comparativa 2020-2024 (em moeda constante)</b></h4>", unsafe_allow_html=True)
        markdown_1 = f"<div style='text-align:center;  color: black; font-weight: bold; font-size:{fontsize}px'>{highlight:} (em destaque)</div>"
        st.markdown(markdown_1, unsafe_allow_html=True)
        st.markdown("---")

        years = ['2020', '2021', '2022', '2023', '2024']

        tópico2 = df3.iloc[26, 1:].values
        club_data = {
            'Atlético GO': tópico2[:5][::-1][:5],
            'Atlético': tópico2[5:10][::-1][:5],
            'Athletico': tópico2[10:15][::-1][:5],
            'Bahia': tópico2[15:20][::-1][:5],
            'Botafogo': tópico2[20:25][::-1][:5],
            'Corinthians': tópico2[25:30][::-1][:5],
            'Vitória': tópico2[30:35][::-1][:5],
            'Cruzeiro': tópico2[35:40][::-1][:5],
            'Cuiabá': tópico2[40:45][::-1][:5],
            'Flamengo': tópico2[45:50][::-1][:5],
            'Fluminense': tópico2[50:55][::-1][:5],
            'Fortaleza': tópico2[55:60][::-1][:5],
            'Grêmio': tópico2[60:65][::-1][:5],
            'Criciúma': tópico2[65:70][::-1][:5],
            'Internacional': tópico2[70:75][::-1][:5],
            'Palmeiras': tópico2[75:80][::-1][:5],
            'Juventude': tópico2[80:85][::-1][:5],
            'São Paulo': tópico2[85:90][::-1][:5],
            'Vasco': tópico2[90:95][::-1][:5],
        }

        def create_enhanced_time_series(years, club_data, highlight, tema_ger, club_image_paths=None):
            
            # Create figure with improved dimensions and DPI
            fig, ax = plt.subplots(figsize=(12, 8), dpi=100)
            
            # Add subtle grid for better readability
            ax.grid(axis='y', linestyle='--', alpha=0.2, zorder=0)
            
            # Track other clubs to create color gradient
            other_clubs = [club for club in club_data.keys() if club != highlight]
            
            # First, plot all non-highlighted clubs with faded color
            for i, club in enumerate(other_clubs):
                data = club_data[club]
                ax.plot(years, data, linewidth=1, linestyle='--', color=('gray'), 
                        alpha=0.6, zorder=1)
            
            # Then plot the highlighted club on top with a more vibrant appearance
            if highlight in club_data:
                # Get highlight club data
                highlight_data = club_data[highlight]
                
                # Plot the main highlighted line with a subtle shadow effect for depth
                main_line = ax.plot(years, highlight_data, linewidth=4, linestyle='-', 
                                color='#2b7bba', zorder=3)[0]
                main_line.set_path_effects([path_effects.SimpleLineShadow(offset=(1, -1), alpha=0.3),
                                        path_effects.Normal()])
                
                # Add markers at each data point
                ax.scatter(years, highlight_data, s=80, color='#2b7bba', edgecolor='white', linewidth=1.5, zorder=4)
                
                # Annotate each point on the highlighted club's line with improved text styling
                for i, value in enumerate(highlight_data):
                    text = ax.annotate(f'{value:.2f}', 
                                    (years[i], value),
                                    textcoords="offset points",
                                    xytext=(0, 12),
                                    ha='center',
                                    va='bottom',
                                    fontsize=14,
                                    fontweight='bold',
                                    color='#2b7bba',
                                    zorder=5)
                    text.set_path_effects([path_effects.withStroke(linewidth=3, foreground='white')])
                    
                # Add club logo at the end of the line if club_image_paths is provided
                if club_image_paths and highlight in club_image_paths:
                    try:
                        # Function to get club logo
                        def get_club_image(url, zoom=0.15):
                            try:
                                response = requests.get(url)
                                img = Image.open(BytesIO(response.content))
                                if img.mode != 'RGBA':
                                    img = img.convert('RGBA')
                                return OffsetImage(img, zoom=zoom)
                            except Exception as e:
                                print(f"Error loading image from {url}: {e}")
                                return None
                        
                        # Get the logo and place it at the end of the line
                        img_url = club_image_paths.get(highlight)
                        if img_url:
                            img = get_club_image(img_url, zoom=0.18)
                            if img:
                                last_year = years[-1]
                                last_value = highlight_data[-1]
                                logo_box = AnnotationBbox(img, 
                                                        (last_year + 0.15, last_value),  # Position slightly after the line
                                                        frameon=False,
                                                        box_alignment=(0, 0.5),
                                                        zorder=6)
                                ax.add_artist(logo_box)
                    except Exception as e:
                        print(f"Error adding club logo: {e}")
            
            # Style adjustments
            ax.set_ylabel(f'{tema_ger}', fontsize=14, fontweight='bold')
            
            # Customize axis ticks and labels
            ax.tick_params(axis='both', which='major', labelsize=12)
            
            # Set integer x-ticks for years
            ax.set_xticks(years)
            ax.set_xticklabels([str(int(year)) for year in years])
            
            # Remove spines
            ax.spines['right'].set_visible(False)
            ax.spines['top'].set_visible(False)
            
            # Add subtle light gray background to the plot area
            ax.set_facecolor('#f9f9f9')
            
            # Adjust layout
            plt.tight_layout()
            
            return fig
            
        # Usage:
        fig = create_enhanced_time_series(years, club_data, highlight, tema_ger, club_image_paths)
        st.pyplot(fig)

#######################################################################################################################################
########################################################################################################################################

    elif tema_ger == "Receita Operacional / Pontuação Série A":
        markdown_1 = f"<div style='text-align:center;  color: black; font-weight: bold; font-size:{fontsize}px'>{tema_ger:}</div>"
        st.markdown("<h4 style='text-align: center;  color: black;'>Análise Comparativa Simples  (2024)</b></h4>", unsafe_allow_html=True)
        st.markdown(markdown_1, unsafe_allow_html=True)
        st.markdown("<h6 style='text-align: center;  color: black;'>(R$ milhões / Ponto conquistado)</b></h6>", unsafe_allow_html=True)
        st.markdown("---")

        tópico = df1.iloc[44, 1:].values

        # Pairing clubs with their revenues and sorting them by revenue in descending order
        paired_clubs_revenues = sorted(zip(clubes, tópico), key=lambda x: x[1], reverse=True)
        sorted_clubes, sorted_revenues = zip(*paired_clubs_revenues)

        def create_club_revenue_chart(sorted_clubes, sorted_revenues, club_image_paths, tema_ger):
            import matplotlib.pyplot as plt
            import numpy as np
            from PIL import Image
            from io import BytesIO
            import requests
            from matplotlib.offsetbox import OffsetImage, AnnotationBbox
            
            # Create figure
            fig, ax = plt.subplots(figsize=(15, 10))
            
            # Plot bars
            bars = ax.bar(range(len(sorted_clubes)), sorted_revenues, color='skyblue')
            
            # Set chart limits and style
            max_revenue = max(sorted_revenues)
            ax.set_xlim(-0.5, len(sorted_clubes)-0.5)
            ax.set_ylim(0, max_revenue*1.1)  # Add 10% space at top
            
            # Remove spines and x-ticks
            ax.spines['right'].set_visible(False)
            ax.spines['top'].set_visible(False)
            ax.spines['bottom'].set_visible(False)
            ax.spines['left'].set_visible(False)
            ax.set_xticks([])
            
            # Add y-axis label
            ax.set_ylabel(f'{tema_ger}', fontsize=22, fontweight='bold')
            ax.tick_params(axis='y', labelsize=16)
            
            # Function to get club logo
            def getImage(url):
                try:
                    response = requests.get(url)
                    img = Image.open(BytesIO(response.content))
                    
                    # Make sure image has transparency
                    if img.mode != 'RGBA':
                        img = img.convert('RGBA')
                        
                    return OffsetImage(img, zoom=0.18)  # Slightly increased from original 0.15
                except Exception as e:
                    print(f"Error loading image from {url}: {e}")
                    return None
            
            # Add value labels above bars
            for bar in bars:
                height = bar.get_height()
                ax.annotate(f'{height:.2f}',
                        xy=(bar.get_x() + bar.get_width() / 2, height),
                        xytext=(0, 3),  # 3 points vertical offset
                        textcoords="offset points",
                        ha='center', va='bottom', fontsize=16)
            
            # Create a small margin at the bottom for the icons
            # Instead of using a separate subplot, we'll add the icons directly at the bottom of the chart
            # Add an invisible bar at the bottom to make space
            bottom_margin = max_revenue * 0.12  # Small margin for icons
            ax.set_ylim(-bottom_margin, max_revenue*1.1)  # Update y-limits to include margin
            
            # Add club logos - position them right at the bottom of the chart
            for i, club in enumerate(sorted_clubes):
                img_url = club_image_paths.get(club)
                if img_url:
                    img = getImage(img_url)
                    if img:
                        # Position just below the x-axis
                        ab = AnnotationBbox(
                            img, 
                            (i, -bottom_margin * 0.5),  # Position in the middle of the bottom margin
                            xycoords='data',
                            box_alignment=(0.5, 0.5),
                            frameon=False
                        )
                        ax.add_artist(ab)
            
            fig.tight_layout()
            return fig

        # Usage:
        fig = create_club_revenue_chart(sorted_clubes, sorted_revenues, club_image_paths, tema_ger)
        st.pyplot(fig)

#######################################################################################################################################

        st.markdown("<h4 style='text-align: center;  color: black;'>Análise Comparativa 2020-2024 (em moeda constante)</b></h4>", unsafe_allow_html=True)
        markdown_1 = f"<div style='text-align:center;  color: black; font-weight: bold; font-size:{fontsize}px'>{highlight:} (em destaque)</div>"
        st.markdown(markdown_1, unsafe_allow_html=True)
        st.markdown("---")

        years = ['2020', '2021', '2022', '2023', '2024']

        tópico2 = df3.iloc[27, 1:].values
        club_data = {
            'Atlético GO': tópico2[:5][::-1][:5],
            'Atlético': tópico2[5:10][::-1][:5],
            'Athletico': tópico2[10:15][::-1][:5],
            'Bahia': tópico2[15:20][::-1][:5],
            'Botafogo': tópico2[20:25][::-1][:5],
            'Corinthians': tópico2[25:30][::-1][:5],
            'Vitória': tópico2[30:35][::-1][:5],
            'Cruzeiro': tópico2[35:40][::-1][:5],
            'Cuiabá': tópico2[40:45][::-1][:5],
            'Flamengo': tópico2[45:50][::-1][:5],
            'Fluminense': tópico2[50:55][::-1][:5],
            'Fortaleza': tópico2[55:60][::-1][:5],
            'Grêmio': tópico2[60:65][::-1][:5],
            'Criciúma': tópico2[65:70][::-1][:5],
            'Internacional': tópico2[70:75][::-1][:5],
            'Palmeiras': tópico2[75:80][::-1][:5],
            'Juventude': tópico2[80:85][::-1][:5],
            'São Paulo': tópico2[85:90][::-1][:5],
            'Vasco': tópico2[90:95][::-1][:5],
        }

        def create_enhanced_time_series(years, club_data, highlight, tema_ger, club_image_paths=None):
            import matplotlib.pyplot as plt
            import matplotlib.patheffects as path_effects
            from matplotlib.offsetbox import OffsetImage, AnnotationBbox
            import numpy as np
            from PIL import Image
            import requests
            from io import BytesIO
            
            # Create figure with improved dimensions and DPI
            fig, ax = plt.subplots(figsize=(12, 8), dpi=100)
            
            # Add subtle grid for better readability
            ax.grid(axis='y', linestyle='--', alpha=0.2, zorder=0)
            
            # Track other clubs to create color gradient
            other_clubs = [club for club in club_data.keys() if club != highlight]
            
            # First, plot all non-highlighted clubs with faded color
            for i, club in enumerate(other_clubs):
                data = club_data[club]
                ax.plot(years, data, linewidth=1, linestyle='--', color=('gray'), 
                        alpha=0.6, zorder=1)
            
            # Then plot the highlighted club on top with a more vibrant appearance
            if highlight in club_data:
                # Get highlight club data
                highlight_data = club_data[highlight]
                
                # Plot the main highlighted line with a subtle shadow effect for depth
                main_line = ax.plot(years, highlight_data, linewidth=4, linestyle='-', 
                                color='#2b7bba', zorder=3)[0]
                main_line.set_path_effects([path_effects.SimpleLineShadow(offset=(1, -1), alpha=0.3),
                                        path_effects.Normal()])
                
                # Add markers at each data point
                ax.scatter(years, highlight_data, s=80, color='#2b7bba', edgecolor='white', linewidth=1.5, zorder=4)
                
                # Annotate each point on the highlighted club's line with improved text styling
                for i, value in enumerate(highlight_data):
                    text = ax.annotate(f'{value:.2f}', 
                                    (years[i], value),
                                    textcoords="offset points",
                                    xytext=(0, 12),
                                    ha='center',
                                    va='bottom',
                                    fontsize=14,
                                    fontweight='bold',
                                    color='#2b7bba',
                                    zorder=5)
                    text.set_path_effects([path_effects.withStroke(linewidth=3, foreground='white')])
                    
                # Add club logo at the end of the line if club_image_paths is provided
                if club_image_paths and highlight in club_image_paths:
                    try:
                        # Function to get club logo
                        def get_club_image(url, zoom=0.15):
                            try:
                                response = requests.get(url)
                                img = Image.open(BytesIO(response.content))
                                if img.mode != 'RGBA':
                                    img = img.convert('RGBA')
                                return OffsetImage(img, zoom=zoom)
                            except Exception as e:
                                print(f"Error loading image from {url}: {e}")
                                return None
                        
                        # Get the logo and place it at the end of the line
                        img_url = club_image_paths.get(highlight)
                        if img_url:
                            img = get_club_image(img_url, zoom=0.18)
                            if img:
                                last_year = years[-1]
                                last_value = highlight_data[-1]
                                logo_box = AnnotationBbox(img, 
                                                        (last_year + 0.15, last_value),  # Position slightly after the line
                                                        frameon=False,
                                                        box_alignment=(0, 0.5),
                                                        zorder=6)
                                ax.add_artist(logo_box)
                    except Exception as e:
                        print(f"Error adding club logo: {e}")
            
            # Style adjustments
            ax.set_ylabel(f'{tema_ger}', fontsize=14, fontweight='bold')
            
            # Customize axis ticks and labels
            ax.tick_params(axis='both', which='major', labelsize=12)
            
            # Set integer x-ticks for years
            ax.set_xticks(years)
            ax.set_xticklabels([str(int(year)) for year in years])
            
            # Remove spines
            ax.spines['right'].set_visible(False)
            ax.spines['top'].set_visible(False)
            
            # Add subtle light gray background to the plot area
            ax.set_facecolor('#f9f9f9')
            
            # Adjust layout
            plt.tight_layout()
            
            return fig
            
        # Usage:
        fig = create_enhanced_time_series(years, club_data, highlight, tema_ger, club_image_paths)
        st.pyplot(fig)

###############################################################################################################################################
###############################################################################################################################################

    elif tema_ger == "Dívida / Receita Operacional":
        markdown_1 = f"<div style='text-align:center;  color: black; font-weight: bold; font-size:{fontsize}px'>{tema_ger:}</div>"
        st.markdown("<h4 style='text-align: center;  color: black;'>Análise Comparativa Simples  (2024)</b></h4>", unsafe_allow_html=True)
        st.markdown(markdown_1, unsafe_allow_html=True)
        st.markdown("---")

        tópico = df1.iloc[50, 1:].values

        # Pairing clubs with their revenues and sorting them by revenue in descending order
        paired_clubs_revenues = sorted(zip(clubes, tópico), key=lambda x: x[1], reverse=False)
        sorted_clubes, sorted_revenues = zip(*paired_clubs_revenues)

        def create_club_revenue_chart(sorted_clubes, sorted_revenues, club_image_paths, tema_ger):
            import matplotlib.pyplot as plt
            import numpy as np
            from PIL import Image
            from io import BytesIO
            import requests
            from matplotlib.offsetbox import OffsetImage, AnnotationBbox
            
            # Create figure
            fig, ax = plt.subplots(figsize=(15, 10))
            
            # Plot bars
            bars = ax.bar(range(len(sorted_clubes)), sorted_revenues, color='skyblue')
            
            # Set chart limits and style
            max_revenue = max(sorted_revenues)
            ax.set_xlim(-0.5, len(sorted_clubes)-0.5)
            ax.set_ylim(0, max_revenue*1.1)  # Add 10% space at top
            
            # Remove spines and x-ticks
            ax.spines['right'].set_visible(False)
            ax.spines['top'].set_visible(False)
            ax.spines['bottom'].set_visible(False)
            ax.spines['left'].set_visible(False)
            ax.set_xticks([])
            
            # Add y-axis label
            ax.set_ylabel(f'{tema_ger}', fontsize=22, fontweight='bold')
            ax.tick_params(axis='y', labelsize=16)
            
            # Function to get club logo
            def getImage(url):
                try:
                    response = requests.get(url)
                    img = Image.open(BytesIO(response.content))
                    
                    # Make sure image has transparency
                    if img.mode != 'RGBA':
                        img = img.convert('RGBA')
                        
                    return OffsetImage(img, zoom=0.18)  # Slightly increased from original 0.15
                except Exception as e:
                    print(f"Error loading image from {url}: {e}")
                    return None
            
            # Add value labels above bars
            for bar in bars:
                height = bar.get_height()
                ax.annotate(f'{height:.2f}',
                        xy=(bar.get_x() + bar.get_width() / 2, height),
                        xytext=(0, 3),  # 3 points vertical offset
                        textcoords="offset points",
                        ha='center', va='bottom', fontsize=16)
            
            # Create a small margin at the bottom for the icons
            # Instead of using a separate subplot, we'll add the icons directly at the bottom of the chart
            # Add an invisible bar at the bottom to make space
            bottom_margin = max_revenue * 0.12  # Small margin for icons
            ax.set_ylim(-bottom_margin, max_revenue*1.1)  # Update y-limits to include margin
            
            # Add club logos - position them right at the bottom of the chart
            for i, club in enumerate(sorted_clubes):
                img_url = club_image_paths.get(club)
                if img_url:
                    img = getImage(img_url)
                    if img:
                        # Position just below the x-axis
                        ab = AnnotationBbox(
                            img, 
                            (i, -bottom_margin * 0.5),  # Position in the middle of the bottom margin
                            xycoords='data',
                            box_alignment=(0.5, 0.5),
                            frameon=False
                        )
                        ax.add_artist(ab)
            
            fig.tight_layout()
            return fig

        # Usage:
        fig = create_club_revenue_chart(sorted_clubes, sorted_revenues, club_image_paths, tema_ger)
        st.pyplot(fig)

#######################################################################################################################################

        st.markdown("<h4 style='text-align: center;  color: black;'>Análise Comparativa 2020-2024 (em moeda constante)</b></h4>", unsafe_allow_html=True)
        markdown_1 = f"<div style='text-align:center;  color: black; font-weight: bold; font-size:{fontsize}px'>{highlight:} (em destaque)</div>"
        st.markdown(markdown_1, unsafe_allow_html=True)
        st.markdown("---")

        years = ['2020', '2021', '2022', '2023', '2024']

        tópico2 = df3.iloc[31, 1:].values
        club_data = {
            'Atlético GO': tópico2[:5][::-1][:5],
            'Atlético': tópico2[5:10][::-1][:5],
            'Athletico': tópico2[10:15][::-1][:5],
            'Bahia': tópico2[15:20][::-1][:5],
            'Botafogo': tópico2[20:25][::-1][:5],
            'Corinthians': tópico2[25:30][::-1][:5],
            'Vitória': tópico2[30:35][::-1][:5],
            'Cruzeiro': tópico2[35:40][::-1][:5],
            'Cuiabá': tópico2[40:45][::-1][:5],
            'Flamengo': tópico2[45:50][::-1][:5],
            'Fluminense': tópico2[50:55][::-1][:5],
            'Fortaleza': tópico2[55:60][::-1][:5],
            'Grêmio': tópico2[60:65][::-1][:5],
            'Criciúma': tópico2[65:70][::-1][:5],
            'Internacional': tópico2[70:75][::-1][:5],
            'Palmeiras': tópico2[75:80][::-1][:5],
            'Juventude': tópico2[80:85][::-1][:5],
            'São Paulo': tópico2[85:90][::-1][:5],
            'Vasco': tópico2[90:95][::-1][:5],
        }

        def create_enhanced_time_series(years, club_data, highlight, tema_ger, club_image_paths=None):
            import matplotlib.pyplot as plt
            import matplotlib.patheffects as path_effects
            from matplotlib.offsetbox import OffsetImage, AnnotationBbox
            import numpy as np
            from PIL import Image
            import requests
            from io import BytesIO
            
            # Create figure with improved dimensions and DPI
            fig, ax = plt.subplots(figsize=(12, 8), dpi=100)
            
            # Add subtle grid for better readability
            ax.grid(axis='y', linestyle='--', alpha=0.2, zorder=0)
            
            # Track other clubs to create color gradient
            other_clubs = [club for club in club_data.keys() if club != highlight]
            
            # First, plot all non-highlighted clubs with faded color
            for i, club in enumerate(other_clubs):
                data = club_data[club]
                ax.plot(years, data, linewidth=1, linestyle='--', color=('gray'), 
                        alpha=0.6, zorder=1)
            
            # Then plot the highlighted club on top with a more vibrant appearance
            if highlight in club_data:
                # Get highlight club data
                highlight_data = club_data[highlight]
                
                # Plot the main highlighted line with a subtle shadow effect for depth
                main_line = ax.plot(years, highlight_data, linewidth=4, linestyle='-', 
                                color='#2b7bba', zorder=3)[0]
                main_line.set_path_effects([path_effects.SimpleLineShadow(offset=(1, -1), alpha=0.3),
                                        path_effects.Normal()])
                
                # Add markers at each data point
                ax.scatter(years, highlight_data, s=80, color='#2b7bba', edgecolor='white', linewidth=1.5, zorder=4)
                
                # Annotate each point on the highlighted club's line with improved text styling
                for i, value in enumerate(highlight_data):
                    text = ax.annotate(f'{value:.2f}', 
                                    (years[i], value),
                                    textcoords="offset points",
                                    xytext=(0, 12),
                                    ha='center',
                                    va='bottom',
                                    fontsize=14,
                                    fontweight='bold',
                                    color='#2b7bba',
                                    zorder=5)
                    text.set_path_effects([path_effects.withStroke(linewidth=3, foreground='white')])
                    
                # Add club logo at the end of the line if club_image_paths is provided
                if club_image_paths and highlight in club_image_paths:
                    try:
                        # Function to get club logo
                        def get_club_image(url, zoom=0.15):
                            try:
                                response = requests.get(url)
                                img = Image.open(BytesIO(response.content))
                                if img.mode != 'RGBA':
                                    img = img.convert('RGBA')
                                return OffsetImage(img, zoom=zoom)
                            except Exception as e:
                                print(f"Error loading image from {url}: {e}")
                                return None
                        
                        # Get the logo and place it at the end of the line
                        img_url = club_image_paths.get(highlight)
                        if img_url:
                            img = get_club_image(img_url, zoom=0.18)
                            if img:
                                last_year = years[-1]
                                last_value = highlight_data[-1]
                                logo_box = AnnotationBbox(img, 
                                                        (last_year + 0.15, last_value),  # Position slightly after the line
                                                        frameon=False,
                                                        box_alignment=(0, 0.5),
                                                        zorder=6)
                                ax.add_artist(logo_box)
                    except Exception as e:
                        print(f"Error adding club logo: {e}")
            
            # Style adjustments
            ax.set_ylabel(f'{tema_ger}', fontsize=14, fontweight='bold')
            
            # Customize axis ticks and labels
            ax.tick_params(axis='both', which='major', labelsize=12)
            
            # Set integer x-ticks for years
            ax.set_xticks(years)
            ax.set_xticklabels([str(int(year)) for year in years])
            
            # Remove spines
            ax.spines['right'].set_visible(False)
            ax.spines['top'].set_visible(False)
            
            # Add subtle light gray background to the plot area
            ax.set_facecolor('#f9f9f9')
            
            # Adjust layout
            plt.tight_layout()
            
            return fig
            
        # Usage:
        fig = create_enhanced_time_series(years, club_data, highlight, tema_ger, club_image_paths)
        st.pyplot(fig)

###############################################################################################################################################
###############################################################################################################################################

    elif tema_ger == "Folha do futebol / Receita Operacional":
        markdown_1 = f"<div style='text-align:center;  color: black; font-weight: bold; font-size:{fontsize}px'>{tema_ger:}</div>"
        st.markdown("<h4 style='text-align: center;  color: black;'>Análise Comparativa Simples  (2024)</b></h4>", unsafe_allow_html=True)
        st.markdown(markdown_1, unsafe_allow_html=True)
        st.markdown("---")

        tópico = df1.iloc[51, 1:].values

        # Pairing clubs with their revenues and sorting them by revenue in descending order
        paired_clubs_revenues = sorted(zip(clubes, tópico), key=lambda x: x[1], reverse=False)
        sorted_clubes, sorted_revenues = zip(*paired_clubs_revenues)

        def create_club_revenue_chart(sorted_clubes, sorted_revenues, club_image_paths, tema_ger):
            import matplotlib.pyplot as plt
            import numpy as np
            from PIL import Image
            from io import BytesIO
            import requests
            from matplotlib.offsetbox import OffsetImage, AnnotationBbox
            
            # Create figure
            fig, ax = plt.subplots(figsize=(15, 10))
            
            # Plot bars
            bars = ax.bar(range(len(sorted_clubes)), sorted_revenues, color='skyblue')
            
            # Set chart limits and style
            max_revenue = max(sorted_revenues)
            ax.set_xlim(-0.5, len(sorted_clubes)-0.5)
            ax.set_ylim(0, max_revenue*1.1)  # Add 10% space at top
            
            # Remove spines and x-ticks
            ax.spines['right'].set_visible(False)
            ax.spines['top'].set_visible(False)
            ax.spines['bottom'].set_visible(False)
            ax.spines['left'].set_visible(False)
            ax.set_xticks([])
            
            # Add y-axis label
            ax.set_ylabel(f'{tema_ger}', fontsize=19, fontweight='bold')
            ax.tick_params(axis='y', labelsize=16)
            
            # Function to get club logo
            def getImage(url):
                try:
                    response = requests.get(url)
                    img = Image.open(BytesIO(response.content))
                    
                    # Make sure image has transparency
                    if img.mode != 'RGBA':
                        img = img.convert('RGBA')
                        
                    return OffsetImage(img, zoom=0.18)  # Slightly increased from original 0.15
                except Exception as e:
                    print(f"Error loading image from {url}: {e}")
                    return None
            
            # Add value labels above bars
            for bar in bars:
                height = bar.get_height()
                ax.annotate(f'{height:.2f}',
                        xy=(bar.get_x() + bar.get_width() / 2, height),
                        xytext=(0, 3),  # 3 points vertical offset
                        textcoords="offset points",
                        ha='center', va='bottom', fontsize=16)
            
            # Create a small margin at the bottom for the icons
            # Instead of using a separate subplot, we'll add the icons directly at the bottom of the chart
            # Add an invisible bar at the bottom to make space
            bottom_margin = max_revenue * 0.12  # Small margin for icons
            ax.set_ylim(-bottom_margin, max_revenue*1.1)  # Update y-limits to include margin
            
            # Add club logos - position them right at the bottom of the chart
            for i, club in enumerate(sorted_clubes):
                img_url = club_image_paths.get(club)
                if img_url:
                    img = getImage(img_url)
                    if img:
                        # Position just below the x-axis
                        ab = AnnotationBbox(
                            img, 
                            (i, -bottom_margin * 0.5),  # Position in the middle of the bottom margin
                            xycoords='data',
                            box_alignment=(0.5, 0.5),
                            frameon=False
                        )
                        ax.add_artist(ab)
            
            fig.tight_layout()
            return fig

        # Usage:
        fig = create_club_revenue_chart(sorted_clubes, sorted_revenues, club_image_paths, tema_ger)
        st.pyplot(fig)

#######################################################################################################################################

        st.markdown("<h4 style='text-align: center;  color: black;'>Análise Comparativa 2020-2024 (em moeda constante)</b></h4>", unsafe_allow_html=True)
        markdown_1 = f"<div style='text-align:center;  color: black; font-weight: bold; font-size:{fontsize}px'>{highlight:} (em destaque)</div>"
        st.markdown(markdown_1, unsafe_allow_html=True)
        st.markdown("---")

        years = ['2020', '2021', '2022', '2023', '2024']

        tópico2 = df3.iloc[32, 1:].values
        club_data = {
            'Atlético GO': tópico2[:5][::-1][:5],
            'Atlético': tópico2[5:10][::-1][:5],
            'Athletico': tópico2[10:15][::-1][:5],
            'Bahia': tópico2[15:20][::-1][:5],
            'Botafogo': tópico2[20:25][::-1][:5],
            'Corinthians': tópico2[25:30][::-1][:5],
            'Vitória': tópico2[30:35][::-1][:5],
            'Cruzeiro': tópico2[35:40][::-1][:5],
            'Cuiabá': tópico2[40:45][::-1][:5],
            'Flamengo': tópico2[45:50][::-1][:5],
            'Fluminense': tópico2[50:55][::-1][:5],
            'Fortaleza': tópico2[55:60][::-1][:5],
            'Grêmio': tópico2[60:65][::-1][:5],
            'Criciúma': tópico2[65:70][::-1][:5],
            'Internacional': tópico2[70:75][::-1][:5],
            'Palmeiras': tópico2[75:80][::-1][:5],
            'Juventude': tópico2[80:85][::-1][:5],
            'São Paulo': tópico2[85:90][::-1][:5],
            'Vasco': tópico2[90:95][::-1][:5],
        }

        def create_enhanced_time_series(years, club_data, highlight, tema_ger, club_image_paths=None):
            import matplotlib.pyplot as plt
            import matplotlib.patheffects as path_effects
            from matplotlib.offsetbox import OffsetImage, AnnotationBbox
            import numpy as np
            from PIL import Image
            import requests
            from io import BytesIO
            
            # Create figure with improved dimensions and DPI
            fig, ax = plt.subplots(figsize=(12, 8), dpi=100)
            
            # Add subtle grid for better readability
            ax.grid(axis='y', linestyle='--', alpha=0.2, zorder=0)
            
            # Track other clubs to create color gradient
            other_clubs = [club for club in club_data.keys() if club != highlight]
            
            # First, plot all non-highlighted clubs with faded color
            for i, club in enumerate(other_clubs):
                data = club_data[club]
                ax.plot(years, data, linewidth=1, linestyle='--', color=('gray'), 
                        alpha=0.6, zorder=1)
            
            # Then plot the highlighted club on top with a more vibrant appearance
            if highlight in club_data:
                # Get highlight club data
                highlight_data = club_data[highlight]
                
                # Plot the main highlighted line with a subtle shadow effect for depth
                main_line = ax.plot(years, highlight_data, linewidth=4, linestyle='-', 
                                color='#2b7bba', zorder=3)[0]
                main_line.set_path_effects([path_effects.SimpleLineShadow(offset=(1, -1), alpha=0.3),
                                        path_effects.Normal()])
                
                # Add markers at each data point
                ax.scatter(years, highlight_data, s=80, color='#2b7bba', edgecolor='white', linewidth=1.5, zorder=4)
                
                # Annotate each point on the highlighted club's line with improved text styling
                for i, value in enumerate(highlight_data):
                    text = ax.annotate(f'{value:.2f}', 
                                    (years[i], value),
                                    textcoords="offset points",
                                    xytext=(0, 12),
                                    ha='center',
                                    va='bottom',
                                    fontsize=14,
                                    fontweight='bold',
                                    color='#2b7bba',
                                    zorder=5)
                    text.set_path_effects([path_effects.withStroke(linewidth=3, foreground='white')])
                    
                # Add club logo at the end of the line if club_image_paths is provided
                if club_image_paths and highlight in club_image_paths:
                    try:
                        # Function to get club logo
                        def get_club_image(url, zoom=0.15):
                            try:
                                response = requests.get(url)
                                img = Image.open(BytesIO(response.content))
                                if img.mode != 'RGBA':
                                    img = img.convert('RGBA')
                                return OffsetImage(img, zoom=zoom)
                            except Exception as e:
                                print(f"Error loading image from {url}: {e}")
                                return None
                        
                        # Get the logo and place it at the end of the line
                        img_url = club_image_paths.get(highlight)
                        if img_url:
                            img = get_club_image(img_url, zoom=0.18)
                            if img:
                                last_year = years[-1]
                                last_value = highlight_data[-1]
                                logo_box = AnnotationBbox(img, 
                                                        (last_year + 0.15, last_value),  # Position slightly after the line
                                                        frameon=False,
                                                        box_alignment=(0, 0.5),
                                                        zorder=6)
                                ax.add_artist(logo_box)
                    except Exception as e:
                        print(f"Error adding club logo: {e}")
            
            # Style adjustments
            ax.set_ylabel(f'{tema_ger}', fontsize=14, fontweight='bold')
            
            # Customize axis ticks and labels
            ax.tick_params(axis='both', which='major', labelsize=12)
            
            # Set integer x-ticks for years
            ax.set_xticks(years)
            ax.set_xticklabels([str(int(year)) for year in years])
            
            # Remove spines
            ax.spines['right'].set_visible(False)
            ax.spines['top'].set_visible(False)
            
            # Add subtle light gray background to the plot area
            ax.set_facecolor('#f9f9f9')
            
            # Adjust layout
            plt.tight_layout()
            
            return fig
            
        # Usage:
        fig = create_enhanced_time_series(years, club_data, highlight, tema_ger, club_image_paths)
        st.pyplot(fig)

###############################################################################################################################################
###############################################################################################################################################

    elif tema_ger == "Folha futebol + Compra jogadores / Rec Oper Líquida":
        markdown_1 = f"<div style='text-align:center;  color: black; font-weight: bold; font-size:{fontsize}px'>{tema_ger:}</div>"
        st.markdown("<h4 style='text-align: center;  color: black;'>Análise Comparativa Simples  (2024)</b></h4>", unsafe_allow_html=True)
        st.markdown(markdown_1, unsafe_allow_html=True)
        st.markdown("---")

        tópico = df1.iloc[52, 1:].values

        # Pairing clubs with their revenues and sorting them by revenue in descending order
        paired_clubs_revenues = sorted(zip(clubes, tópico), key=lambda x: x[1], reverse=False)
        sorted_clubes, sorted_revenues = zip(*paired_clubs_revenues)

        def create_club_revenue_chart(sorted_clubes, sorted_revenues, club_image_paths, tema_ger):
            import matplotlib.pyplot as plt
            import numpy as np
            from PIL import Image
            from io import BytesIO
            import requests
            from matplotlib.offsetbox import OffsetImage, AnnotationBbox
            
            # Create figure
            fig, ax = plt.subplots(figsize=(15, 10))
            
            # Plot bars
            bars = ax.bar(range(len(sorted_clubes)), sorted_revenues, color='skyblue')
            
            # Set chart limits and style
            max_revenue = max(sorted_revenues)
            ax.set_xlim(-0.5, len(sorted_clubes)-0.5)
            ax.set_ylim(0, max_revenue*1.1)  # Add 10% space at top
            
            # Remove spines and x-ticks
            ax.spines['right'].set_visible(False)
            ax.spines['top'].set_visible(False)
            ax.spines['bottom'].set_visible(False)
            ax.spines['left'].set_visible(False)
            ax.set_xticks([])
            
            # Add y-axis label
            ax.set_ylabel(f'{tema_ger}', fontsize=19, fontweight='bold')
            ax.tick_params(axis='y', labelsize=16)
            
            # Function to get club logo
            def getImage(url):
                try:
                    response = requests.get(url)
                    img = Image.open(BytesIO(response.content))
                    
                    # Make sure image has transparency
                    if img.mode != 'RGBA':
                        img = img.convert('RGBA')
                        
                    return OffsetImage(img, zoom=0.18)  # Slightly increased from original 0.15
                except Exception as e:
                    print(f"Error loading image from {url}: {e}")
                    return None
            
            # Add value labels above bars
            for bar in bars:
                height = bar.get_height()
                ax.annotate(f'{height:.2f}',
                        xy=(bar.get_x() + bar.get_width() / 2, height),
                        xytext=(0, 3),  # 3 points vertical offset
                        textcoords="offset points",
                        ha='center', va='bottom', fontsize=16)
            
            # Create a small margin at the bottom for the icons
            # Instead of using a separate subplot, we'll add the icons directly at the bottom of the chart
            # Add an invisible bar at the bottom to make space
            bottom_margin = max_revenue * 0.12  # Small margin for icons
            ax.set_ylim(-bottom_margin, max_revenue*1.1)  # Update y-limits to include margin
            
            # Add club logos - position them right at the bottom of the chart
            for i, club in enumerate(sorted_clubes):
                img_url = club_image_paths.get(club)
                if img_url:
                    img = getImage(img_url)
                    if img:
                        # Position just below the x-axis
                        ab = AnnotationBbox(
                            img, 
                            (i, -bottom_margin * 0.5),  # Position in the middle of the bottom margin
                            xycoords='data',
                            box_alignment=(0.5, 0.5),
                            frameon=False
                        )
                        ax.add_artist(ab)
            
            fig.tight_layout()
            return fig

        # Usage:
        fig = create_club_revenue_chart(sorted_clubes, sorted_revenues, club_image_paths, tema_ger)
        st.pyplot(fig)

#######################################################################################################################################

        st.markdown("<h4 style='text-align: center;  color: black;'>Análise Comparativa 2020-2024 (em moeda constante)</b></h4>", unsafe_allow_html=True)
        markdown_1 = f"<div style='text-align:center;  color: black; font-weight: bold; font-size:{fontsize}px'>{highlight:} (em destaque)</div>"
        st.markdown(markdown_1, unsafe_allow_html=True)
        st.markdown("---")

        years = ['2020', '2021', '2022', '2023', '2024']

        tópico2 = df3.iloc[33, 1:].values
        club_data = {
            'Atlético GO': tópico2[:5][::-1][:5],
            'Atlético': tópico2[5:10][::-1][:5],
            'Athletico': tópico2[10:15][::-1][:5],
            'Bahia': tópico2[15:20][::-1][:5],
            'Botafogo': tópico2[20:25][::-1][:5],
            'Corinthians': tópico2[25:30][::-1][:5],
            'Vitória': tópico2[30:35][::-1][:5],
            'Cruzeiro': tópico2[35:40][::-1][:5],
            'Cuiabá': tópico2[40:45][::-1][:5],
            'Flamengo': tópico2[45:50][::-1][:5],
            'Fluminense': tópico2[50:55][::-1][:5],
            'Fortaleza': tópico2[55:60][::-1][:5],
            'Grêmio': tópico2[60:65][::-1][:5],
            'Criciúma': tópico2[65:70][::-1][:5],
            'Internacional': tópico2[70:75][::-1][:5],
            'Palmeiras': tópico2[75:80][::-1][:5],
            'Juventude': tópico2[80:85][::-1][:5],
            'São Paulo': tópico2[85:90][::-1][:5],
            'Vasco': tópico2[90:95][::-1][:5],
        }

        def create_enhanced_time_series(years, club_data, highlight, tema_ger, club_image_paths=None):
            import matplotlib.pyplot as plt
            import matplotlib.patheffects as path_effects
            from matplotlib.offsetbox import OffsetImage, AnnotationBbox
            import numpy as np
            from PIL import Image
            import requests
            from io import BytesIO
            
            # Create figure with improved dimensions and DPI
            fig, ax = plt.subplots(figsize=(12, 8), dpi=100)
            
            # Add subtle grid for better readability
            ax.grid(axis='y', linestyle='--', alpha=0.2, zorder=0)
            
            # Track other clubs to create color gradient
            other_clubs = [club for club in club_data.keys() if club != highlight]
            
            # First, plot all non-highlighted clubs with faded color
            for i, club in enumerate(other_clubs):
                data = club_data[club]
                ax.plot(years, data, linewidth=1, linestyle='--', color=('gray'), 
                        alpha=0.6, zorder=1)
            
            # Then plot the highlighted club on top with a more vibrant appearance
            if highlight in club_data:
                # Get highlight club data
                highlight_data = club_data[highlight]
                
                # Plot the main highlighted line with a subtle shadow effect for depth
                main_line = ax.plot(years, highlight_data, linewidth=4, linestyle='-', 
                                color='#2b7bba', zorder=3)[0]
                main_line.set_path_effects([path_effects.SimpleLineShadow(offset=(1, -1), alpha=0.3),
                                        path_effects.Normal()])
                
                # Add markers at each data point
                ax.scatter(years, highlight_data, s=80, color='#2b7bba', edgecolor='white', linewidth=1.5, zorder=4)
                
                # Annotate each point on the highlighted club's line with improved text styling
                for i, value in enumerate(highlight_data):
                    text = ax.annotate(f'{value:.2f}', 
                                    (years[i], value),
                                    textcoords="offset points",
                                    xytext=(0, 12),
                                    ha='center',
                                    va='bottom',
                                    fontsize=14,
                                    fontweight='bold',
                                    color='#2b7bba',
                                    zorder=5)
                    text.set_path_effects([path_effects.withStroke(linewidth=3, foreground='white')])
                    
                # Add club logo at the end of the line if club_image_paths is provided
                if club_image_paths and highlight in club_image_paths:
                    try:
                        # Function to get club logo
                        def get_club_image(url, zoom=0.15):
                            try:
                                response = requests.get(url)
                                img = Image.open(BytesIO(response.content))
                                if img.mode != 'RGBA':
                                    img = img.convert('RGBA')
                                return OffsetImage(img, zoom=zoom)
                            except Exception as e:
                                print(f"Error loading image from {url}: {e}")
                                return None
                        
                        # Get the logo and place it at the end of the line
                        img_url = club_image_paths.get(highlight)
                        if img_url:
                            img = get_club_image(img_url, zoom=0.18)
                            if img:
                                last_year = years[-1]
                                last_value = highlight_data[-1]
                                logo_box = AnnotationBbox(img, 
                                                        (last_year + 0.15, last_value),  # Position slightly after the line
                                                        frameon=False,
                                                        box_alignment=(0, 0.5),
                                                        zorder=6)
                                ax.add_artist(logo_box)
                    except Exception as e:
                        print(f"Error adding club logo: {e}")
            
            # Style adjustments
            ax.set_ylabel(f'{tema_ger}', fontsize=14, fontweight='bold')
            
            # Customize axis ticks and labels
            ax.tick_params(axis='both', which='major', labelsize=12)
            
            # Set integer x-ticks for years
            ax.set_xticks(years)
            ax.set_xticklabels([str(int(year)) for year in years])
            
            # Remove spines
            ax.spines['right'].set_visible(False)
            ax.spines['top'].set_visible(False)
            
            # Add subtle light gray background to the plot area
            ax.set_facecolor('#f9f9f9')
            
            # Adjust layout
            plt.tight_layout()
            
            return fig
            
        # Usage:
        fig = create_enhanced_time_series(years, club_data, highlight, tema_ger, club_image_paths)
        st.pyplot(fig)

########################################################################################################################################

    elif tema_ger == "Receita c/ Pay-per-View":
        markdown_1 = f"<div style='text-align:center;  color: black; font-weight: bold; font-size:{fontsize}px'>{tema_ger:}</div>"
        st.markdown("<h4 style='text-align: center;  color: black;'>Análise Comparativa Simples  (2024)</b></h4>", unsafe_allow_html=True)
        st.markdown(markdown_1, unsafe_allow_html=True)
        st.markdown("<h6 style='text-align: center;  color: black;'>(R$ milhões)</b></h6>", unsafe_allow_html=True)
        st.markdown("---")

        tópico = df1.iloc[56, 1:].values

        # Pairing clubs with their revenues and sorting them by revenue in descending order
        paired_clubs_revenues = sorted(zip(clubes, tópico), key=lambda x: x[1], reverse=True)
        sorted_clubes, sorted_revenues = zip(*paired_clubs_revenues)

        def create_club_revenue_chart(sorted_clubes, sorted_revenues, club_image_paths, tema_ger):
            import matplotlib.pyplot as plt
            import numpy as np
            from PIL import Image
            from io import BytesIO
            import requests
            from matplotlib.offsetbox import OffsetImage, AnnotationBbox
            
            # Create figure
            fig, ax = plt.subplots(figsize=(15, 10))
            
            # Plot bars
            bars = ax.bar(range(len(sorted_clubes)), sorted_revenues, color='skyblue')
            
            # Set chart limits and style
            max_revenue = max(sorted_revenues)
            ax.set_xlim(-0.5, len(sorted_clubes)-0.5)
            ax.set_ylim(0, max_revenue*1.1)  # Add 10% space at top
            
            # Remove spines and x-ticks
            ax.spines['right'].set_visible(False)
            ax.spines['top'].set_visible(False)
            ax.spines['bottom'].set_visible(False)
            ax.spines['left'].set_visible(False)
            ax.set_xticks([])
            
            # Add y-axis label
            ax.set_ylabel(f'{tema_ger} (R$ milhões)', fontsize=22, fontweight='bold')
            ax.tick_params(axis='y', labelsize=16)
            
            # Function to get club logo
            def getImage(url):
                try:
                    response = requests.get(url)
                    img = Image.open(BytesIO(response.content))
                    
                    # Make sure image has transparency
                    if img.mode != 'RGBA':
                        img = img.convert('RGBA')
                        
                    return OffsetImage(img, zoom=0.18)  # Slightly increased from original 0.15
                except Exception as e:
                    print(f"Error loading image from {url}: {e}")
                    return None
            
            # Add value labels above bars
            for bar in bars:
                height = bar.get_height()
                ax.annotate(f'{height:.0f}',
                        xy=(bar.get_x() + bar.get_width() / 2, height),
                        xytext=(0, 3),  # 3 points vertical offset
                        textcoords="offset points",
                        ha='center', va='bottom', fontsize=16)
            
            # Create a small margin at the bottom for the icons
            # Instead of using a separate subplot, we'll add the icons directly at the bottom of the chart
            # Add an invisible bar at the bottom to make space
            bottom_margin = max_revenue * 0.12  # Small margin for icons
            ax.set_ylim(-bottom_margin, max_revenue*1.1)  # Update y-limits to include margin
            
            # Add club logos - position them right at the bottom of the chart
            for i, club in enumerate(sorted_clubes):
                img_url = club_image_paths.get(club)
                if img_url:
                    img = getImage(img_url)
                    if img:
                        # Position just below the x-axis
                        ab = AnnotationBbox(
                            img, 
                            (i, -bottom_margin * 0.5),  # Position in the middle of the bottom margin
                            xycoords='data',
                            box_alignment=(0.5, 0.5),
                            frameon=False
                        )
                        ax.add_artist(ab)
            
            fig.tight_layout()
            return fig

        # Usage:
        fig = create_club_revenue_chart(sorted_clubes, sorted_revenues, club_image_paths, tema_ger)
        st.pyplot(fig)

###############################################################################################################################################
###############################################################################################################################################

    elif tema_ger == "Despesas Administrativas / Folha do Futebol":
        markdown_1 = f"<div style='text-align:center;  color: black; font-weight: bold; font-size:{fontsize}px'>{tema_ger:}</div>"
        st.markdown("<h4 style='text-align: center;  color: black;'>Análise Comparativa Simples  (2024)</b></h4>", unsafe_allow_html=True)
        st.markdown(markdown_1, unsafe_allow_html=True)
        st.markdown("---")

        tópico = df1.iloc[57, 1:].values

        # Pairing clubs with their revenues and sorting them by revenue in descending order
        paired_clubs_revenues = sorted(zip(clubes, tópico), key=lambda x: x[1], reverse=False)
        sorted_clubes, sorted_revenues = zip(*paired_clubs_revenues)

        def create_club_revenue_chart(sorted_clubes, sorted_revenues, club_image_paths, tema_ger):
            import matplotlib.pyplot as plt
            import numpy as np
            from PIL import Image
            from io import BytesIO
            import requests
            from matplotlib.offsetbox import OffsetImage, AnnotationBbox
            
            # Create figure
            fig, ax = plt.subplots(figsize=(15, 10))
            
            # Plot bars
            bars = ax.bar(range(len(sorted_clubes)), sorted_revenues, color='skyblue')
            
            # Set chart limits and style
            max_revenue = max(sorted_revenues)
            ax.set_xlim(-0.5, len(sorted_clubes)-0.5)
            ax.set_ylim(0, max_revenue*1.1)  # Add 10% space at top
            
            # Remove spines and x-ticks
            ax.spines['right'].set_visible(False)
            ax.spines['top'].set_visible(False)
            ax.spines['bottom'].set_visible(False)
            ax.spines['left'].set_visible(False)
            ax.set_xticks([])
            
            # Add y-axis label
            ax.set_ylabel(f'{tema_ger}', fontsize=22, fontweight='bold')
            ax.tick_params(axis='y', labelsize=16)
            
            # Function to get club logo
            def getImage(url):
                try:
                    response = requests.get(url)
                    img = Image.open(BytesIO(response.content))
                    
                    # Make sure image has transparency
                    if img.mode != 'RGBA':
                        img = img.convert('RGBA')
                        
                    return OffsetImage(img, zoom=0.18)  # Slightly increased from original 0.15
                except Exception as e:
                    print(f"Error loading image from {url}: {e}")
                    return None
            
            # Add value labels above bars
            for bar in bars:
                height = bar.get_height()
                ax.annotate(f'{height:.2f}',
                        xy=(bar.get_x() + bar.get_width() / 2, height),
                        xytext=(0, 3),  # 3 points vertical offset
                        textcoords="offset points",
                        ha='center', va='bottom', fontsize=16)
            
            # Create a small margin at the bottom for the icons
            # Instead of using a separate subplot, we'll add the icons directly at the bottom of the chart
            # Add an invisible bar at the bottom to make space
            bottom_margin = max_revenue * 0.12  # Small margin for icons
            ax.set_ylim(-bottom_margin, max_revenue*1.1)  # Update y-limits to include margin
            
            # Add club logos - position them right at the bottom of the chart
            for i, club in enumerate(sorted_clubes):
                img_url = club_image_paths.get(club)
                if img_url:
                    img = getImage(img_url)
                    if img:
                        # Position just below the x-axis
                        ab = AnnotationBbox(
                            img, 
                            (i, -bottom_margin * 0.5),  # Position in the middle of the bottom margin
                            xycoords='data',
                            box_alignment=(0.5, 0.5),
                            frameon=False
                        )
                        ax.add_artist(ab)
            
            fig.tight_layout()
            return fig

        # Usage:
        fig = create_club_revenue_chart(sorted_clubes, sorted_revenues, club_image_paths, tema_ger)
        st.pyplot(fig)

###############################################################################################################################################
###############################################################################################################################################

elif st.session_state.selected_option == "Análise Conjunta":
    

    # Custom CSS for better formatting
    st.markdown("""
    <style>
        .main {
            padding: 2rem;
        }
        .stAlert {
            background-color: #f8f9fa;
            padding: 1rem;
            border-radius: 0.5rem;
            border-left: 5px solid #ff4b4b;
        }
        .info-box {
            background-color: #e6f3ff;
            padding: 1rem;
            border-radius: 0.5rem;
            border-left: 5px solid #4B8BF5;
            margin-bottom: 1rem;
        }
        h1, h2, h3 {
            color: #1E3A8A;
        }
        .katex {
            font-size: 1.1em;
        }
    </style>
    """, unsafe_allow_html=True)

    # Custom styled title
    st.markdown("""
    <h5 style='font-size: 20px; font-weight: bold; font-family: Arial, sans-serif; color: #1E3A8A; margin-bottom: 10px;'>
    ℹ️ Sobre esta análise
    </h5>
    """, unsafe_allow_html=True)

    with st.expander("ℹ️ Clique para expandir", expanded=False):
        st.markdown("""
        <div class="info-box">
        <h4>Análise Conjunta:</h4>
        <p>A Análise Conjunta permite explorar a relação entre duas variáveis de interesse 
        (financeiras, esportivas ou gerenciais) através de um gráfico de dispersão interativo. 
        A visualização inclui uma linha de regressão que indica a tendência geral da relação, 
        complementada pelos indicadores estatísticos R-squared e coeficiente de correlação de Pearson, 
        que quantificam a força dessa relação. Esta ferramenta possibilita identificar padrões, 
        como verificar se clubes com maiores receitas de transmissão tendem a obter melhores pontuações no campeonato, 
        ou detectar clubes que apresentam desempenho acima ou abaixo do esperado considerando os recursos disponíveis.</p>
        </div>
        """, unsafe_allow_html=True)
    
    st.write("---")

    st.markdown("<h5 style='text-align: center; color: black;'>Escolha o primeiro Indicador (eixo horizontal)</b></h5>", unsafe_allow_html=True)
    eixo_x = st.selectbox("", options=temas_x, index=None, placeholder="Escolha o primeiro Tema!")
    st.markdown("<h5 style='text-align: center; color: black;'>Escolha o segundo Indicador (eixo vertical)</b></h5>", unsafe_allow_html=True)
    eixo_y = st.selectbox("", options=temas_y, index=None, placeholder="Escolha o segundo Tema!")
    if eixo_x:
        # Filtering the row where column 0 matches the category (eixo_x)
        filtered_row_x = df1.loc[df1.iloc[:, 0] == eixo_x]
        # Capturing columns "1:" from the filtered row
        result_x = filtered_row_x.iloc[:, 1:20].values.flatten()  # Flattening the result for easy handling
        if eixo_y:
            # Filtering the row where column 0 matches the category (eixo_x)
            filtered_row_y = df1.loc[df1.iloc[:, 0] == eixo_y]
            # Capturing columns "1:" from the filtered row
            result_y = filtered_row_y.iloc[:, 1:20].values.flatten()  # Flattening the result for easy handling
            
            # Create a DataFrame for filtering
            plot_data_initial = pd.DataFrame({
                'club': df1.columns[1:20],
                eixo_x: result_x,
                eixo_y: result_y
            })
            
            # Filter out clubs with zero values in either selected variable
            plot_data = plot_data_initial[(plot_data_initial[eixo_x] != 0) & (plot_data_initial[eixo_y] != 0)]
            
            # Display info about filtered clubs
            removed_count = len(plot_data_initial) - len(plot_data)
            if removed_count > 0:
                st.info(f"{removed_count} clube(s) com valor zero removido(s) da análise.")
            
            # Get filtered values for regression and plotting
            result_x_filtered = plot_data[eixo_x].values
            result_y_filtered = plot_data[eixo_y].values
            
            #Plotting
            def create_plotly_scatter_with_logos(eixo_x, eixo_y, result_x, result_y, df1, clubs, alt_clubs, plot_data):
                """
                Create a scatter plot with club logos as markers using Plotly,
                preserving the original visual style and adding hover functionality
                """
                # Check if we have enough data points after filtering
                if len(result_x) < 2 or len(result_y) < 2:
                    st.warning("Não há clubes suficientes com dados válidos para as variáveis selecionadas.")
                    return None
                
                # Calculate regression line
                slope, intercept = np.polyfit(result_x, result_y, 1)
                
                # Calculate fit line for all points
                fit_line = slope * np.array(result_x) + intercept
                
                # Calculate Pearson correlation and R-squared
                corr_coef, _ = pearsonr(result_x, result_y)
                
                # Calculate R-squared
                residuals = np.array(result_y) - fit_line
                ss_res = np.sum(residuals**2)
                ss_tot = np.sum((np.array(result_y) - np.mean(result_y))**2)
                r_squared = 1 - (ss_res / ss_tot)
                
                # Generate extended x-range for the regression line
                x_line = np.linspace(min(result_x)*0.9, max(result_x)*1.1, 100)
                y_line = slope * x_line + intercept
                
                # Get club logos as base64 encoded images for markers
                def get_club_logo_base64(club, alt_club):
                    try:
                        url = f'https://raw.githubusercontent.com/JAmerico1898/Financials-2025/1cfddd572c20dd697421c1703bcb8e2ed7c8a7be/{alt_club}.png'
                        response = requests.get(url)
                        img_data = BytesIO(response.content)
                        encoded = base64.b64encode(img_data.read()).decode('ascii')
                        return f'data:image/png;base64,{encoded}'
                    except Exception as e:
                        print(f"Error loading image for {club}: {e}")
                        return None
                
                # Prepare club logo images
                club_images = {}
                for club, alt_club in zip(clubs['Clubes'], alt_clubs['alt_clubs']):
                    if club in plot_data['club'].values:
                        club_images[club] = get_club_logo_base64(club, alt_club)
                
                # Create figure
                fig = go.Figure()
                
                # Add regression line
                fig.add_trace(go.Scatter(
                    x=x_line,
                    y=y_line,
                    mode='lines',
                    line=dict(color='red', width=2),
                    name='OLS Regression Line',
                    hoverinfo='skip'
                ))
                
                # Calculate appropriate logo sizes based on data range
                # Use smaller size factor to ensure logos aren't too large
                logo_size_x = max(result_x) * 0.065  # Reduced from 0.07
                logo_size_y = max(result_y) * 0.065  # Reduced from 0.07
                
                # Add points with club logos as custom markers
                for index, row in plot_data.iterrows():
                    club = row['club']
                    if club in club_images and club_images[club]:
                        # Determine if this club is near the top of the chart
                        is_near_top = row[eixo_y] > (max(result_y) * 0.8)
                        
                        # Add invisible marker point for hover functionality
                        fig.add_trace(go.Scatter(
                            x=[row[eixo_x]],
                            y=[row[eixo_y]],
                            mode='markers',
                            marker=dict(
                                size=5,  # Small invisible marker for accurate hover point
                                opacity=0  # Make the default marker transparent
                            ),
                            name=club,
                            hovertemplate=f"<b>{club}</b><br>{eixo_x}: %{{x:.2f}}<br>{eixo_y}: %{{y:.2f}}<extra></extra>",
                            hoverlabel=dict(
                                bgcolor="white",
                                font_size=12,
                                font_family="Arial"
                            )
                        ))                        
                        # Add club logo as an image with adjusted yanchor for clubs near the top
                        fig.add_layout_image(
                            dict(
                                source=club_images[club],
                                x=row[eixo_x],
                                y=row[eixo_y],
                                xref="x",
                                yref="y",
                                sizex=logo_size_x,  # Adjusted size
                                sizey=logo_size_y,  # Adjusted size
                                xanchor="center",
                                # Use "middle" for clubs near the top instead of "bottom"
                                yanchor="middle" if is_near_top else "bottom",
                                opacity=1,
                                layer="above"
                            )
                        )                
                # Configure layout to match original style with explicit width and height
                fig.update_layout(
                    # Set explicit width and height to match the original Matplotlib dimensions
                    width=900,  # 10 inches * 100 pixels per inch
                    height=500,  # 7 inches * 100 pixels per inch
                    
                    title={
                        'text': f'{eixo_x} vs {eixo_y}',
                        'font': {'size': 13, 'color': 'black', 'family': 'Arial Black, Arial, sans-serif'},
                        'x': 0.5,
                        'y': 0.95,
                        'xanchor': 'center',
                        'yanchor': 'top',
                        'pad': {'t': 20}
                    },
                    xaxis={
                        'title': {
                            'text': eixo_x,
                            'font': {'size': 13, 'color': 'black', 'family': 'Arial Black, Arial, sans-serif'},
                        },
                        'showgrid': False,
                        'gridcolor': 'black',
                        'zeroline': False,
                        'showline': True,
                        'linecolor': 'black',
                        'tickfont': {'size': 12, 'color': 'black'}
                    },
                    yaxis={
                        'title': {
                            'text': eixo_y,
                            'font': {'size': 13, 'color': 'black', 'family': 'Arial Black, Arial, sans-serif'},
                        },
                        'showgrid': False,
                        'gridcolor': 'black',
                        'zeroline': False,
                        'showline': True,
                        'linecolor': 'black',
                        'tickfont': {'size': 12, 'color': 'black'}
                    },
                    plot_bgcolor='white',
                    showlegend=False,
                    margin={'t': 80, 'b': 80, 'l': 80, 'r': 80},
                    hovermode='closest',
                    annotations=[
                        {
                            'x': 0.95,
                            'y': 0.05,
                            'xref': 'paper',
                            'yref': 'paper',
                            'text': f'Pearson r={corr_coef:.2f}',
                            'showarrow': False,
                            'font': {'size': 13, 'family': 'Arial, sans-serif', 'color': 'black'}
                        },
                        {
                            'x': 0.95,
                            'y': 0.10,
                            'xref': 'paper',
                            'yref': 'paper',
                            'text': f'R-squared={r_squared:.2f}',
                            'showarrow': False,
                            'font': {'size': 13, 'family': 'Arial, sans-serif', 'color': 'black'}
                        }
                    ]
                )
                
                # Calculate and set appropriate y-axis limits with extra padding at the top
                y_min, y_max = min(result_y), max(result_y)
                y_padding_top = 0.15  # Increased top padding to ensure logos aren't cut off
                
                if y_max <= 1:
                    y_range = y_max - y_min
                    fig.update_yaxes(range=[y_min - 0.15 * y_range, y_max + y_padding_top * y_range])
                elif y_min == 0:
                    fig.update_yaxes(range=[y_min - 0.1*y_min, y_max + y_padding_top*y_max])
                else:
                    fig.update_yaxes(range=[y_min - 0.1*y_min, y_max + y_padding_top*y_max])
                
                return fig

            #Usage in Streamlit:
            if eixo_x and eixo_y and len(result_x_filtered) >= 2:
                fig = create_plotly_scatter_with_logos(eixo_x, eixo_y, result_x_filtered, result_y_filtered, df1, clubs, alt_clubs, plot_data)
                if fig:  # Only display if we have a valid figure
                    st.plotly_chart(fig, use_container_width=False)  # Changed to False to use explicit dimensions
            elif len(result_x_filtered) < 2:
                st.warning("Não há clubes suficientes com dados válidos para as variáveis selecionadas.")
                

###############################################################################################################################################
###############################################################################################################################################
###############################################################################################################################################
###############################################################################################################################################

if st.session_state.selected_option == "Análise Individual - Histórica":

    # Custom CSS for better formatting
    st.markdown("""
    <style>
        .main {
            padding: 2rem;
        }
        .stAlert {
            background-color: #f8f9fa;
            padding: 1rem;
            border-radius: 0.5rem;
            border-left: 5px solid #ff4b4b;
        }
        .info-box {
            background-color: #e6f3ff;
            padding: 1rem;
            border-radius: 0.5rem;
            border-left: 5px solid #4B8BF5;
            margin-bottom: 1rem;
        }
        h1, h2, h3 {
            color: #1E3A8A;
        }
        .katex {
            font-size: 1.1em;
        }
    </style>
    """, unsafe_allow_html=True)

    # Custom styled title
    st.markdown("""
    <h5 style='font-size: 20px; font-weight: bold; font-family: Arial, sans-serif; color: #1E3A8A; margin-bottom: 10px;'>
    ℹ️ Sobre esta análise
    </h5>
    """, unsafe_allow_html=True)

    with st.expander("ℹ️ Clique para expandir", expanded=False):
        st.markdown("""
        <div class="info-box">
        <h4>Análise Individual - Histórica:</h4>
        <p>Esta análise compara as principais receitas e despesas do clube, além de outros indicadores, ao longo de cinco anos (2020-2024). 
        Cada cor representa um ano diferente, permitindo identificar rapidamente tendências de crescimento ou queda em cada 
        categoria ao longo do tempo. Esta ferramenta auxilia na compreensão da evolução da estrutura financeira do clube, 
        destacando mudanças estratégicas na geração de receitas e possibilitando uma análise da sustentabilidade financeira a médio prazo.</p>
        <p>Os dados estão corrigidos pela inflação (IPCA). </p>
        </div>
        """, unsafe_allow_html=True)

    st.markdown("<h5 style='text-align: center; color: black;'>Escolha o Clube</b></h5>", unsafe_allow_html=True)
    clube = st.selectbox("", options=clubes, index=None, placeholder="Escolha o Clube!")
    fontsize = 24
    
    if clube:
        
        def display_club_image(clube):
            try:
                # Get the image URL for the selected club
                club_image_url = club_image_paths.get(clube)
                
                if club_image_url:
                    # Center-align and display the image
                    st.markdown(
                        f"""
                        <div style="display: flex; justify-content: center;">
                            <img src="{club_image_url}" width="150">
                        </div>
                        """,
                        unsafe_allow_html=True
                    )
                else:
                    st.warning(f"Imagem não encontrada para o clube: {clube}")
            except Exception as e:
                st.error(f"Erro ao exibir a imagem: {e}")

        display_club_image(clube)

    if clube == "Atlético GO":
        st.markdown("<h4 style='text-align: center;  color: black;'>Histórico de Receitas e Despesas</b></h4>", unsafe_allow_html=True)
        st.markdown("<h5 style='text-align: center;  color: black;'>(em R$ milhões, em moeda constante)<br></b></h5>", unsafe_allow_html=True)
        st.markdown("---")

        # Selecting the rows 1 to 6 and columns 76 to 81
        selected_data = df3.iloc[np.r_[1:5, 8], 1:6]
        selected_data = selected_data.round(0)
        selected_data.columns = [2024, 2023, 2022, 2021, 2020]

        # Create a colormap of greens
        cmap = plt.get_cmap('Reds')
        colors = cmap(np.linspace(1, 0.3, num=len(selected_data.columns)))

        # Creating a figure and a set of subplots
        fig, ax = plt.subplots(figsize=(15, 10))

        # Plotting using ax
        selected_data.plot(kind='bar', ax=ax, width=0.9, color=colors)

        # Adding value labels on top of each bar
        for p in ax.patches:
            # Format the height as integer
            height = int(p.get_height())  # Convert to integer to avoid decimals
            ax.annotate(f'{height}', (p.get_x() + p.get_width() / 2., p.get_height()),
                        ha='center', va='center', xytext=(0, 10), textcoords='offset points', fontsize=14)

        # Setting the labels and title using ax methods
        custom_labels = ["Transmissão + Premiação", "Publicidade e patrocínio", "Match-Day", 
                 "Sócio-torcedor", "Negociação de atletas"]
        
        # Function to break labels into two lines if longer than a given number of characters
        def adjust_labels(labels, max_len=18):
            adjusted_labels = []
            for label in labels:
                if len(label) > max_len:
                    # Split the label by spaces and attempt to divide into two roughly equal parts
                    words = label.split()
                    midpoint = len(words) // 2
                    label = ' '.join(words[:midpoint]) + '\n' + ' '.join(words[midpoint:])
                adjusted_labels.append(label)
            return adjusted_labels

        # Apply the function to custom_labels
        adjusted_custom_labels = adjust_labels(custom_labels)

        ax.set_xticklabels(adjusted_custom_labels, fontsize=19, rotation=0)
        ax.set_title('Receitas', fontsize=24, fontweight="bold")
        ax.tick_params(axis='y', labelsize=16)
        ax.legend(bbox_to_anchor=(0.5, -0.1), loc='upper center', ncol=5, fontsize=18, frameon=False)
        ax.set_ylabel('Receitas (em R$ milhões, em moeda constante)', fontsize=18)
        ax.spines['right'].set_visible(False)
        ax.spines['top'].set_visible(False)
        note_text = "Notas:"
        note_text_1 = "1. O clube informa a Receita de Premiação em conjunto com a Receita de Transmissão."
        ax.text(0, -0.25, note_text, transform=ax.transAxes, ha="left", fontsize=18, color="black")
        ax.text(0, -0.31, note_text_1, transform=ax.transAxes, ha="left", fontsize=18, color="black")

        # Adjust layout and show plot
        fig.tight_layout()
        st.pyplot(fig)        
######################################################################################################################
######################################################################################################################
        st.markdown("---")

        # Selecting the rows 1 to 6 and columns 76 to 81
        selected_data = df3.iloc[np.r_[10, 13, 11], 1:6]
        selected_data = selected_data.round(0)
        selected_data.columns = [2024, 2023, 2022, 2021, 2020]

        # Create a colormap of reds
        cmap = plt.get_cmap('Reds')
        colors = cmap(np.linspace(1, 0.3, num=len(selected_data.columns)))

        # Creating a figure and a set of subplots
        fig, ax = plt.subplots(figsize=(15, 10))

        # Plotting using ax
        selected_data.plot(kind='bar', ax=ax, width=0.9, color=colors)

        # Adding value labels on top of each bar
        for p in ax.patches:
            # Format the height as integer
            height = int(p.get_height())  # Convert to integer to avoid decimals
            ax.annotate(f'{height}', (p.get_x() + p.get_width() / 2., p.get_height()),
                        ha='center', va='center', xytext=(0, 10), textcoords='offset points', fontsize=16)

        # Setting the labels and title using ax methods
        custom_labels = ["Folha do futebol (Pessoal + Imagem)", "Aquisições de atletas", "Resultado"]
        
        # Function to break labels into two lines if longer than a given number of characters
        def adjust_labels(labels, max_len=18):
            adjusted_labels = []
            for label in labels:
                if len(label) > max_len:
                    # Split the label by spaces and attempt to divide into two roughly equal parts
                    words = label.split()
                    midpoint = len(words) // 2
                    label = ' '.join(words[:midpoint]) + '\n' + ' '.join(words[midpoint:])
                adjusted_labels.append(label)
            return adjusted_labels

        # Apply the function to custom_labels
        adjusted_custom_labels = adjust_labels(custom_labels)

        ax.set_xticklabels(adjusted_custom_labels, fontsize=19, rotation=0)
        ax.set_title('Despesas', fontsize=24, fontweight="bold")
        ax.tick_params(axis='y', labelsize=16)
        ax.legend(bbox_to_anchor=(0.5, -0.1), loc='upper center', ncol=5, fontsize=18, frameon=False)
        ax.set_ylabel('Despesas (em R$ milhões, em moeda constante)', fontsize=18)
        ax.spines['right'].set_visible(False)
        ax.spines['top'].set_visible(False)

        # Adjust layout and show plot
        fig.tight_layout()
        st.pyplot(fig)        

######################################################################################################################
######################################################################################################################

        st.markdown("<h4 style='text-align: center;  color: black;'>Histórico de Índices</b></h4>", unsafe_allow_html=True)
        st.markdown("<h5 style='text-align: center;  color: black;'>(em moeda constante)<br></b></h5>", unsafe_allow_html=True)
        st.markdown("---")

        # Selecting the rows 1 to 6 and columns 76 to 81
        selected_data = df3.iloc[np.r_[22, 24, 27], 1:6]
        selected_data = selected_data.round(1)
        selected_data.columns = [2024, 2023, 2022, 2021, 2020]

        # Create a colormap of reds
        cmap = plt.get_cmap('Reds')
        colors = cmap(np.linspace(1, 0.3, num=len(selected_data.columns)))

        # Creating a figure and a set of subplots
        fig, ax = plt.subplots(figsize=(15, 10))

        # Plotting using ax
        selected_data.plot(kind='bar', ax=ax, width=0.9, color=colors)

        for p in ax.patches:
            # Format the height with one decimal place
            height = p.get_height()
            ax.annotate(f'{height:.1f}', (p.get_x() + p.get_width() / 2., height),
                        ha='center', va='center', xytext=(0, 10), textcoords='offset points', fontsize=16)

        # Setting the labels and title using ax methods
        custom_labels = ["Rec Operacional / Base Torcedores", 
                         "Rec Venda Jogadores / Pontuação Série A",
                         "Rec Operacional / Pontuação Série A"]
        
        def adjust_labels(labels, max_len=18):
            adjusted_labels = []
            for label in labels:
                if len(label) > max_len:
                    # Find the index of the slash in the label
                    slash_index = label.find('/')
                    if slash_index != -1:
                        # Split the label right after the slash and keep the slash at the end of the first line
                        label = label[:slash_index + 1] + '\n' + label[slash_index + 1:]
                adjusted_labels.append(label)
            return adjusted_labels

        # Apply the function to custom_labels
        adjusted_custom_labels = adjust_labels(custom_labels)

        ax.set_xticklabels(adjusted_custom_labels, fontsize=16, rotation=0)
        #ax.set_title('Índices', fontsize=24, fontweight="bold")
        ax.tick_params(axis='y', labelsize=16)
        ax.legend(bbox_to_anchor=(0.5, -0.1), loc='upper center', ncol=5, fontsize=18, frameon=False)
        #ax.set_ylabel('Despesas (em R$ milhões, em moeda constante)', fontsize=18)
        ax.spines['right'].set_visible(False)
        ax.spines['top'].set_visible(False)
        # Adding a note below the graph using the axes
        note_text = "Nota: As variáveis estão, respectivamente, em Reais/torcedor"
        note_text_2 = "e milhões/ponto conquistado nas duas últimas."
        ax.text(0, -0.25, note_text, transform=ax.transAxes, ha="left", fontsize=18, color="black")
        ax.text(0, -0.31, note_text_2, transform=ax.transAxes, ha="left", fontsize=18, color="black")

        # Adjust layout and show plot
        fig.tight_layout()
        st.pyplot(fig)        

######################################################################################################################

        st.markdown("---")

        # Selecting the rows 1 to 6 and columns 76 to 81
        selected_data = df3.iloc[np.r_[26, 31, 33], 1:6]
        selected_data = selected_data.round(2)
        selected_data.columns = [2024, 2023, 2022, 2021, 2020]

        # Create a colormap of reds
        cmap = plt.get_cmap('Reds')
        colors = cmap(np.linspace(1, 0.3, num=len(selected_data.columns)))

        # Creating a figure and a set of subplots
        fig, ax = plt.subplots(figsize=(15, 10))

        # Plotting using ax
        selected_data.plot(kind='bar', ax=ax, width=0.95, color=colors)

        for p in ax.patches:
            # Format the height with one decimal place
            height = p.get_height()
            ax.annotate(f'{height:.2f}', (p.get_x() + p.get_width() / 2., height),
                        ha='center', va='center', xytext=(0, 10), textcoords='offset points', fontsize=14)

        # Setting the labels and title using ax methods
        custom_labels = ["Folha do futebol / Pontuação Série A", 
                         "Dívida / Rec Oper Líquida", 
                         "Folha futebol + Compra jogadores / Rec Oper Líquida"]
        
        def adjust_labels(labels, max_len=18):
            adjusted_labels = []
            for label in labels:
                if len(label) > max_len:
                    # Find the index of the slash in the label
                    slash_index = label.find('/')
                    if slash_index != -1:
                        # Split the label right after the slash and keep the slash at the end of the first line
                        label = label[:slash_index + 1] + '\n' + label[slash_index + 1:]
                adjusted_labels.append(label)
            return adjusted_labels

        # Apply the function to custom_labels
        adjusted_custom_labels = adjust_labels(custom_labels)

        ax.set_xticklabels(adjusted_custom_labels, fontsize=16, rotation=0)
        #ax.set_title('Índices', fontsize=24, fontweight="bold")
        ax.tick_params(axis='y', labelsize=16)
        ax.legend(bbox_to_anchor=(0.5, -0.1), loc='upper center', ncol=5, fontsize=18, frameon=False)
        #ax.set_ylabel('Despesas (em R$ milhões, em moeda constante)', fontsize=18)
        ax.spines['right'].set_visible(False)
        ax.spines['top'].set_visible(False)
        # Adding a note below the graph using the axes
        note_text = "Nota: As variáveis estão, respectivamente, em milhões/ponto conquistado,"
        note_text_2 = "e % da Rec Operacional Líquida nas duas últimas."
        ax.text(0, -0.25, note_text, transform=ax.transAxes, ha="left", fontsize=18, color="black")
        ax.text(0, -0.31, note_text_2, transform=ax.transAxes, ha="left", fontsize=18, color="black")

        # Adjust layout and show plot
        fig.tight_layout()
        st.pyplot(fig)        
######################################################################################################################
######################################################################################################################
######################################################################################################################
######################################################################################################################

    if clube == "Atlético":
        st.markdown("<h4 style='text-align: center;  color: black;'>Histórico de Receitas e Despesas</b></h4>", unsafe_allow_html=True)
        st.markdown("<h5 style='text-align: center;  color: black;'>(em R$ milhões, em moeda constante)<br></b></h5>", unsafe_allow_html=True)
        st.markdown("---")

        # Selecting the rows 1 to 6 and columns 76 to 81
        selected_data = df3.iloc[np.r_[1:5, 8], 6:11]
        selected_data = selected_data.round(0)
        selected_data.columns = [2024, 2023, 2022, 2021, 2020]

        # Create a light range of the 'Greys' colormap
        base_cmap = plt.get_cmap('Greys')
        colors = base_cmap(np.linspace(0.2, 0.8, num=len(selected_data.columns)))

        # Creating a figure and a set of subplots
        fig, ax = plt.subplots(figsize=(15, 10))

        # Plotting using ax
        selected_data.plot(kind='bar', ax=ax, width=0.9, color=colors)

        # Adding value labels on top of each bar
        for p in ax.patches:
            # Format the height as integer
            height = int(p.get_height())  # Convert to integer to avoid decimals
            ax.annotate(f'{height}', (p.get_x() + p.get_width() / 2., p.get_height()),
                        ha='center', va='center', xytext=(0, 10), textcoords='offset points', fontsize=14)

        # Setting the labels and title using ax methods
        custom_labels = ["Transmissão + Premiação", "Publicidade e patrocínio", "Match-Day", 
                 "Sócio-torcedor", "Negociação de atletas"]
        
        # Function to break labels into two lines if longer than a given number of characters
        def adjust_labels(labels, max_len=18):
            adjusted_labels = []
            for label in labels:
                if len(label) > max_len:
                    # Split the label by spaces and attempt to divide into two roughly equal parts
                    words = label.split()
                    midpoint = len(words) // 2
                    label = ' '.join(words[:midpoint]) + '\n' + ' '.join(words[midpoint:])
                adjusted_labels.append(label)
            return adjusted_labels

        # Apply the function to custom_labels
        adjusted_custom_labels = adjust_labels(custom_labels)

        ax.set_xticklabels(adjusted_custom_labels, fontsize=19, rotation=0)
        ax.set_title('Receitas', fontsize=24, fontweight="bold")
        ax.tick_params(axis='y', labelsize=16)
        ax.legend(bbox_to_anchor=(0.5, -0.1), loc='upper center', ncol=5, fontsize=18, frameon=False)
        ax.set_ylabel('Receitas (em R$ milhões, em moeda constante)', fontsize=18)
        ax.spines['right'].set_visible(False)
        ax.spines['top'].set_visible(False)
        note_text = "Notas:"
        note_text_1 = "1. O clube informa a Receita de Premiação em conjunto com a Receita de Transmissão."
        note_text_2 = "2. O clube não informa com clareza a Receita com Licenciamento da Marca."
        ax.text(0, -0.25, note_text, transform=ax.transAxes, ha="left", fontsize=18, color="black")
        ax.text(0, -0.31, note_text_1, transform=ax.transAxes, ha="left", fontsize=18, color="black")
        ax.text(0, -0.37, note_text_2, transform=ax.transAxes, ha="left", fontsize=18, color="black")


        # Adjust layout and show plot
        fig.tight_layout()
        st.pyplot(fig)        

######################################################################################################################
######################################################################################################################
        st.markdown("---")

        # Selecting the rows 1 to 6 and columns 76 to 81
        selected_data = df3.iloc[np.r_[10, 13, 11], 6:11]
        selected_data = selected_data.round(0)
        selected_data.columns = [2024, 2023, 2022, 2021, 2020]

        # Create a light range of the 'Greys' colormap
        base_cmap = plt.get_cmap('Greys')
        colors = base_cmap(np.linspace(0.2, 0.8, num=len(selected_data.columns)))

        # Creating a figure and a set of subplots
        fig, ax = plt.subplots(figsize=(15, 10))

        # Plotting using ax
        selected_data.plot(kind='bar', ax=ax, width=0.9, color=colors)

        # Adding value labels on top of each bar
        for p in ax.patches:
            # Format the height as integer
            height = int(p.get_height())  # Convert to integer to avoid decimals
            ax.annotate(f'{height}', (p.get_x() + p.get_width() / 2., p.get_height()),
                        ha='center', va='center', xytext=(0, 10), textcoords='offset points', fontsize=16)

        # Setting the labels and title using ax methods
        custom_labels = ["Folha do futebol (Pessoal + Imagem)", "Aquisições de atletas", "Resultado"]
        
        # Function to break labels into two lines if longer than a given number of characters
        def adjust_labels(labels, max_len=18):
            adjusted_labels = []
            for label in labels:
                if len(label) > max_len:
                    # Split the label by spaces and attempt to divide into two roughly equal parts
                    words = label.split()
                    midpoint = len(words) // 2
                    label = ' '.join(words[:midpoint]) + '\n' + ' '.join(words[midpoint:])
                adjusted_labels.append(label)
            return adjusted_labels

        # Apply the function to custom_labels
        adjusted_custom_labels = adjust_labels(custom_labels)

        ax.set_xticklabels(adjusted_custom_labels, fontsize=19, rotation=0)
        ax.set_title('Despesas', fontsize=24, fontweight="bold")
        ax.tick_params(axis='y', labelsize=16)
        ax.legend(bbox_to_anchor=(0.5, -0.1), loc='upper center', ncol=5, fontsize=18, frameon=False)
        ax.set_ylabel('Despesas (em R$ milhões, em moeda constante)', fontsize=18)
        ax.spines['right'].set_visible(False)
        ax.spines['top'].set_visible(False)

        # Adjust layout and show plot
        fig.tight_layout()
        st.pyplot(fig)        

######################################################################################################################
######################################################################################################################

        st.markdown("<h4 style='text-align: center;  color: black;'>Histórico de Índices</b></h4>", unsafe_allow_html=True)
        st.markdown("<h5 style='text-align: center;  color: black;'>(em moeda constante)<br></b></h5>", unsafe_allow_html=True)
        st.markdown("---")

        # Selecting the rows 1 to 6 and columns 76 to 81
        selected_data = df3.iloc[np.r_[22, 24, 27], 6:11]
        selected_data = selected_data.round(1)
        selected_data.columns = [2024, 2023, 2022, 2021, 2020]

        # Create a light range of the 'Greys' colormap
        base_cmap = plt.get_cmap('Greys')
        colors = base_cmap(np.linspace(0.2, 0.8, num=len(selected_data.columns)))

        # Creating a figure and a set of subplots
        fig, ax = plt.subplots(figsize=(15, 10))

        # Plotting using ax
        selected_data.plot(kind='bar', ax=ax, width=0.9, color=colors)

        for p in ax.patches:
            # Format the height with one decimal place
            height = p.get_height()
            ax.annotate(f'{height:.1f}', (p.get_x() + p.get_width() / 2., height),
                        ha='center', va='center', xytext=(0, 10), textcoords='offset points', fontsize=16)

        # Setting the labels and title using ax methods
        custom_labels = ["Rec Operacional / Base Torcedores", 
                         "Rec Venda Jogadores / Pontuação Série A",
                         "Rec Operacional / Pontuação Série A"]
        
        def adjust_labels(labels, max_len=18):
            adjusted_labels = []
            for label in labels:
                if len(label) > max_len:
                    # Find the index of the slash in the label
                    slash_index = label.find('/')
                    if slash_index != -1:
                        # Split the label right after the slash and keep the slash at the end of the first line
                        label = label[:slash_index + 1] + '\n' + label[slash_index + 1:]
                adjusted_labels.append(label)
            return adjusted_labels

        # Apply the function to custom_labels
        adjusted_custom_labels = adjust_labels(custom_labels)

        ax.set_xticklabels(adjusted_custom_labels, fontsize=16, rotation=0)
        #ax.set_title('Índices', fontsize=24, fontweight="bold")
        ax.tick_params(axis='y', labelsize=16)
        ax.legend(bbox_to_anchor=(0.5, -0.1), loc='upper center', ncol=5, fontsize=18, frameon=False)
        #ax.set_ylabel('Despesas (em R$ milhões, em moeda constante)', fontsize=18)
        ax.spines['right'].set_visible(False)
        ax.spines['top'].set_visible(False)
        # Adding a note below the graph using the axes
        note_text = "Nota: As variáveis estão, respectivamente, em Reais/torcedor"
        note_text_2 = "e milhões/ponto conquistado nas duas últimas."
        ax.text(0, -0.25, note_text, transform=ax.transAxes, ha="left", fontsize=18, color="black")
        ax.text(0, -0.31, note_text_2, transform=ax.transAxes, ha="left", fontsize=18, color="black")

        # Adjust layout and show plot
        fig.tight_layout()
        st.pyplot(fig)        

######################################################################################################################

        st.markdown("---")

        # Selecting the rows 1 to 6 and columns 76 to 81
        selected_data = df3.iloc[np.r_[26, 31, 33], 6:11]
        selected_data = selected_data.round(2)
        selected_data.columns = [2024, 2023, 2022, 2021, 2020]

        # Create a light range of the 'Greys' colormap
        base_cmap = plt.get_cmap('Greys')
        colors = base_cmap(np.linspace(0.2, 0.8, num=len(selected_data.columns)))

        # Creating a figure and a set of subplots
        fig, ax = plt.subplots(figsize=(15, 10))

        # Plotting using ax
        selected_data.plot(kind='bar', ax=ax, width=0.95, color=colors)

        for p in ax.patches:
            # Format the height with one decimal place
            height = p.get_height()
            ax.annotate(f'{height:.2f}', (p.get_x() + p.get_width() / 2., height),
                        ha='center', va='center', xytext=(0, 10), textcoords='offset points', fontsize=14)

        # Setting the labels and title using ax methods
        custom_labels = ["Folha do futebol / Pontuação Série A", 
                         "Dívida / Rec Operacional", 
                         "Folha futebol + Compra jogadores / Rec Operacional"]
        
        def adjust_labels(labels, max_len=18):
            adjusted_labels = []
            for label in labels:
                if len(label) > max_len:
                    # Find the index of the slash in the label
                    slash_index = label.find('/')
                    if slash_index != -1:
                        # Split the label right after the slash and keep the slash at the end of the first line
                        label = label[:slash_index + 1] + '\n' + label[slash_index + 1:]
                adjusted_labels.append(label)
            return adjusted_labels

        # Apply the function to custom_labels
        adjusted_custom_labels = adjust_labels(custom_labels)

        ax.set_xticklabels(adjusted_custom_labels, fontsize=16, rotation=0)
        #ax.set_title('Índices', fontsize=24, fontweight="bold")
        ax.tick_params(axis='y', labelsize=16)
        ax.legend(bbox_to_anchor=(0.5, -0.1), loc='upper center', ncol=5, fontsize=18, frameon=False)
        #ax.set_ylabel('Despesas (em R$ milhões, em moeda constante)', fontsize=18)
        ax.spines['right'].set_visible(False)
        ax.spines['top'].set_visible(False)
        # Adding a note below the graph using the axes
        note_text = "Nota: As variáveis estão, respectivamente, em % da Folha do futebol, milhões/ponto conquistado,"
        note_text_2 = "e % da Rec Operacional Líquida nas duas últimas."
        ax.text(0, -0.25, note_text, transform=ax.transAxes, ha="left", fontsize=18, color="black")
        ax.text(0, -0.31, note_text_2, transform=ax.transAxes, ha="left", fontsize=18, color="black")

        # Adjust layout and show plot
        fig.tight_layout()
        st.pyplot(fig)        
######################################################################################################################
######################################################################################################################
######################################################################################################################
######################################################################################################################

    if clube == "Athletico":
        st.markdown("<h4 style='text-align: center;  color: black;'>Histórico de Receitas e Despesas</b></h4>", unsafe_allow_html=True)
        st.markdown("<h5 style='text-align: center;  color: black;'>(em R$ milhões, em moeda constante)<br></b></h5>", unsafe_allow_html=True)
        st.markdown("---")

        # Selecting the rows 1 to 6 and columns 76 to 81
        selected_data = df3.iloc[np.r_[1:7, 8], 11:16]
        selected_data = selected_data.round(0)
        selected_data.columns = [2024, 2023, 2022, 2021, 2020]

        # Create a colormap of greens
        cmap = plt.get_cmap('Reds')
        colors = cmap(np.linspace(1, 0.3, num=len(selected_data.columns)))

        # Creating a figure and a set of subplots
        fig, ax = plt.subplots(figsize=(15, 10))

        # Plotting using ax
        selected_data.plot(kind='bar', ax=ax, width=0.9, color=colors)

        # Adding value labels on top of each bar
        for p in ax.patches:
            # Format the height as integer
            height = int(p.get_height())  # Convert to integer to avoid decimals
            ax.annotate(f'{height}', (p.get_x() + p.get_width() / 2., p.get_height()),
                        ha='center', va='center', xytext=(0, 10), textcoords='offset points', fontsize=14)

        # Setting the labels and title using ax methods
        custom_labels = ["Transmissão + Premiação", "Publicidade e patrocínio", "Match-Day", 
                 "Sócio-torcedor", "Premiações", "Licenciamento da marca", "Negociação de atletas"]
        
        # Function to break labels into two lines if longer than a given number of characters
        def adjust_labels(labels, max_len=18):
            adjusted_labels = []
            for label in labels:
                if len(label) > max_len:
                    # Split the label by spaces and attempt to divide into two roughly equal parts
                    words = label.split()
                    midpoint = len(words) // 2
                    label = ' '.join(words[:midpoint]) + '\n' + ' '.join(words[midpoint:])
                adjusted_labels.append(label)
            return adjusted_labels

        # Apply the function to custom_labels
        adjusted_custom_labels = adjust_labels(custom_labels)

        ax.set_xticklabels(adjusted_custom_labels, fontsize=19, rotation=0)
        ax.set_title('Receitas', fontsize=24, fontweight="bold")
        ax.tick_params(axis='y', labelsize=16)
        ax.legend(bbox_to_anchor=(0.5, -0.1), loc='upper center', ncol=5, fontsize=18, frameon=False)
        ax.set_ylabel('Receitas (em R$ milhões, em moeda constante)', fontsize=18)
        ax.spines['right'].set_visible(False)
        ax.spines['top'].set_visible(False)
        note_text = "Nota:"
        note_text_1 = "1. O clube informa a Receita de Premiação em conjunto com a Receita de Transmissão."
        ax.text(0, -0.25, note_text, transform=ax.transAxes, ha="left", fontsize=18, color="black")
        ax.text(0, -0.31, note_text_1, transform=ax.transAxes, ha="left", fontsize=18, color="black")

        # Adjust layout and show plot
        fig.tight_layout()
        st.pyplot(fig)        

######################################################################################################################
######################################################################################################################
        st.markdown("---")

        # Selecting the rows 1 to 6 and columns 76 to 81
        selected_data = df3.iloc[np.r_[10, 13, 11], 11:16]
        selected_data = selected_data.round(0)
        selected_data.columns = [2024, 2023, 2022, 2021, 2020]

        # Create a colormap of reds
        cmap = plt.get_cmap('Reds')
        colors = cmap(np.linspace(1, 0.3, num=len(selected_data.columns)))

        # Creating a figure and a set of subplots
        fig, ax = plt.subplots(figsize=(15, 10))

        # Plotting using ax
        selected_data.plot(kind='bar', ax=ax, width=0.9, color=colors)

        # Adding value labels on top of each bar
        for p in ax.patches:
            # Format the height as integer
            height = int(p.get_height())  # Convert to integer to avoid decimals
            ax.annotate(f'{height}', (p.get_x() + p.get_width() / 2., p.get_height()),
                        ha='center', va='center', xytext=(0, 10), textcoords='offset points', fontsize=16)

        # Setting the labels and title using ax methods
        custom_labels = ["Folha do futebol (Pessoal + Imagem)", "Aquisições de atletas", "Resultado"]
        
        # Function to break labels into two lines if longer than a given number of characters
        def adjust_labels(labels, max_len=18):
            adjusted_labels = []
            for label in labels:
                if len(label) > max_len:
                    # Split the label by spaces and attempt to divide into two roughly equal parts
                    words = label.split()
                    midpoint = len(words) // 2
                    label = ' '.join(words[:midpoint]) + '\n' + ' '.join(words[midpoint:])
                adjusted_labels.append(label)
            return adjusted_labels

        # Apply the function to custom_labels
        adjusted_custom_labels = adjust_labels(custom_labels)

        ax.set_xticklabels(adjusted_custom_labels, fontsize=19, rotation=0)
        ax.set_title('Despesas', fontsize=24, fontweight="bold")
        ax.tick_params(axis='y', labelsize=16)
        ax.legend(bbox_to_anchor=(0.5, -0.1), loc='upper center', ncol=5, fontsize=18, frameon=False)
        ax.set_ylabel('Despesas (em R$ milhões, em moeda constante)', fontsize=18)
        ax.spines['right'].set_visible(False)
        ax.spines['top'].set_visible(False)

        # Adjust layout and show plot
        fig.tight_layout()
        st.pyplot(fig)        

######################################################################################################################
######################################################################################################################

        st.markdown("<h4 style='text-align: center;  color: black;'>Histórico de Índices</b></h4>", unsafe_allow_html=True)
        st.markdown("<h5 style='text-align: center;  color: black;'>(em moeda constante)<br></b></h5>", unsafe_allow_html=True)
        st.markdown("---")

        # Selecting the rows 1 to 6 and columns 76 to 81
        selected_data = df3.iloc[np.r_[22, 24, 27], 11:16]
        selected_data = selected_data.round(1)
        selected_data.columns = [2024, 2023, 2022, 2021, 2020]

        # Create a colormap of reds
        cmap = plt.get_cmap('Reds')
        colors = cmap(np.linspace(1, 0.3, num=len(selected_data.columns)))

        # Creating a figure and a set of subplots
        fig, ax = plt.subplots(figsize=(15, 10))

        # Plotting using ax
        selected_data.plot(kind='bar', ax=ax, width=0.9, color=colors)

        for p in ax.patches:
            # Format the height with one decimal place
            height = p.get_height()
            ax.annotate(f'{height:.1f}', (p.get_x() + p.get_width() / 2., height),
                        ha='center', va='center', xytext=(0, 10), textcoords='offset points', fontsize=16)

        # Setting the labels and title using ax methods
        custom_labels = ["Rec Operacional / Base Torcedores", 
                         "Rec Venda Jogadores / Pontuação Série A",
                         "Rec Operacional / Pontuação Série A"]
        
        def adjust_labels(labels, max_len=18):
            adjusted_labels = []
            for label in labels:
                if len(label) > max_len:
                    # Find the index of the slash in the label
                    slash_index = label.find('/')
                    if slash_index != -1:
                        # Split the label right after the slash and keep the slash at the end of the first line
                        label = label[:slash_index + 1] + '\n' + label[slash_index + 1:]
                adjusted_labels.append(label)
            return adjusted_labels

        # Apply the function to custom_labels
        adjusted_custom_labels = adjust_labels(custom_labels)

        ax.set_xticklabels(adjusted_custom_labels, fontsize=16, rotation=0)
        #ax.set_title('Índices', fontsize=24, fontweight="bold")
        ax.tick_params(axis='y', labelsize=16)
        ax.legend(bbox_to_anchor=(0.5, -0.1), loc='upper center', ncol=5, fontsize=18, frameon=False)
        #ax.set_ylabel('Despesas (em R$ milhões, em moeda constante)', fontsize=18)
        ax.spines['right'].set_visible(False)
        ax.spines['top'].set_visible(False)
        # Adding a note below the graph using the axes
        note_text = "Nota: As variáveis estão, respectivamente, em Reais/torcedor"
        note_text_2 = "e milhões/ponto conquistado nas duas últimas."
        ax.text(0, -0.25, note_text, transform=ax.transAxes, ha="left", fontsize=18, color="black")
        ax.text(0, -0.31, note_text_2, transform=ax.transAxes, ha="left", fontsize=18, color="black")

        # Adjust layout and show plot
        fig.tight_layout()
        st.pyplot(fig)        

######################################################################################################################

        st.markdown("---")

        # Selecting the rows 1 to 6 and columns 76 to 81
        selected_data = df3.iloc[np.r_[25:27, 31, 33], 11:16]
        selected_data = selected_data.round(2)
        selected_data.columns = [2024, 2023, 2022, 2021, 2020]

        # Create a colormap of reds
        cmap = plt.get_cmap('Reds')
        colors = cmap(np.linspace(1, 0.3, num=len(selected_data.columns)))

        # Creating a figure and a set of subplots
        fig, ax = plt.subplots(figsize=(15, 10))

        # Plotting using ax
        selected_data.plot(kind='bar', ax=ax, width=0.95, color=colors)

        for p in ax.patches:
            # Format the height with one decimal place
            height = p.get_height()
            ax.annotate(f'{height:.2f}', (p.get_x() + p.get_width() / 2., height),
                        ha='center', va='center', xytext=(0, 10), textcoords='offset points', fontsize=14)

        # Setting the labels and title using ax methods
        custom_labels = ["Receita com Premiação / Folha do Futebol",
                         "Folha do futebol / Pontuação Série A", 
                         "Dívida / Rec Operacional", 
                         "Folha futebol + Compra jogadores / Rec Operacional"]
        
        def adjust_labels(labels, max_len=18):
            adjusted_labels = []
            for label in labels:
                if len(label) > max_len:
                    # Find the index of the slash in the label
                    slash_index = label.find('/')
                    if slash_index != -1:
                        # Split the label right after the slash and keep the slash at the end of the first line
                        label = label[:slash_index + 1] + '\n' + label[slash_index + 1:]
                adjusted_labels.append(label)
            return adjusted_labels

        # Apply the function to custom_labels
        adjusted_custom_labels = adjust_labels(custom_labels)

        ax.set_xticklabels(adjusted_custom_labels, fontsize=16, rotation=0)
        #ax.set_title('Índices', fontsize=24, fontweight="bold")
        ax.tick_params(axis='y', labelsize=16)
        ax.legend(bbox_to_anchor=(0.5, -0.1), loc='upper center', ncol=5, fontsize=18, frameon=False)
        #ax.set_ylabel('Despesas (em R$ milhões, em moeda constante)', fontsize=18)
        ax.spines['right'].set_visible(False)
        ax.spines['top'].set_visible(False)
        # Adding a note below the graph using the axes
        note_text = "Nota: As variáveis estão, respectivamente, em % da Folha do futebol, milhões/ponto conquistado,"
        note_text_2 = "e % da Rec Operacional Líquida nas duas últimas."
        ax.text(0, -0.25, note_text, transform=ax.transAxes, ha="left", fontsize=18, color="black")
        ax.text(0, -0.31, note_text_2, transform=ax.transAxes, ha="left", fontsize=18, color="black")

        # Adjust layout and show plot
        fig.tight_layout()
        st.pyplot(fig)        

######################################################################################################################
######################################################################################################################
######################################################################################################################
######################################################################################################################

    if clube == "Bahia":
        st.markdown("<h4 style='text-align: center;  color: black;'>Histórico de Receitas e Despesas</b></h4>", unsafe_allow_html=True)
        st.markdown("<h5 style='text-align: center;  color: black;'>(em R$ milhões, em moeda constante)<br></b></h5>", unsafe_allow_html=True)
        st.markdown("---")

        # Selecting the rows 1 to 6 and columns 76 to 81
        selected_data = df3.iloc[np.r_[1:4, 6, 8], 16:21]
        selected_data = selected_data.round(0)
        selected_data.columns = [2024, 2023, 2022, 2021, 2020]

        # Create a colormap of greens
        cmap = plt.get_cmap('Blues')
        colors = cmap(np.linspace(1, 0.3, num=len(selected_data.columns)))

        # Creating a figure and a set of subplots
        fig, ax = plt.subplots(figsize=(15, 10))

        # Plotting using ax
        selected_data.plot(kind='bar', ax=ax, width=0.9, color=colors)

        # Adding value labels on top of each bar
        for p in ax.patches:
            # Format the height as integer
            height = int(p.get_height())  # Convert to integer to avoid decimals
            ax.annotate(f'{height}', (p.get_x() + p.get_width() / 2., p.get_height()),
                        ha='center', va='center', xytext=(0, 10), textcoords='offset points', fontsize=14)

        # Setting the labels and title using ax methods
        custom_labels = ["Transmissão + Premiação", "Publicidade e patrocínio", "Match-Day", 
                 "Licenciamento da marca", "Negociação de atletas"]
        
        # Function to break labels into two lines if longer than a given number of characters
        def adjust_labels(labels, max_len=18):
            adjusted_labels = []
            for label in labels:
                if len(label) > max_len:
                    # Split the label by spaces and attempt to divide into two roughly equal parts
                    words = label.split()
                    midpoint = len(words) // 2
                    label = ' '.join(words[:midpoint]) + '\n' + ' '.join(words[midpoint:])
                adjusted_labels.append(label)
            return adjusted_labels

        # Apply the function to custom_labels
        adjusted_custom_labels = adjust_labels(custom_labels)

        ax.set_xticklabels(adjusted_custom_labels, fontsize=19, rotation=0)
        ax.set_title('Receitas', fontsize=24, fontweight="bold")
        ax.tick_params(axis='y', labelsize=16)
        ax.legend(bbox_to_anchor=(0.5, -0.1), loc='upper center', ncol=5, fontsize=18, frameon=False)
        ax.set_ylabel('Receitas (em R$ milhões, em moeda constante)', fontsize=18)
        ax.spines['right'].set_visible(False)
        ax.spines['top'].set_visible(False)
        note_text = "Notas:"
        note_text_1 = "1. O clube informa a Receita de Premiação em conjunto com a Receita de Transmissão."
        note_text_2 = "2. O clube não informa com clareza a Receita com Sócio-Torcedor."
        note_text_3 = "3. O clube não informa com clareza a Receita com Licenciamento da Marca."
        ax.text(0, -0.25, note_text, transform=ax.transAxes, ha="left", fontsize=18, color="black")
        ax.text(0, -0.31, note_text_1, transform=ax.transAxes, ha="left", fontsize=18, color="black")
        ax.text(0, -0.37, note_text_2, transform=ax.transAxes, ha="left", fontsize=18, color="black")
        ax.text(0, -0.43, note_text_3, transform=ax.transAxes, ha="left", fontsize=18, color="black")

        # Adjust layout and show plot
        fig.tight_layout()
        st.pyplot(fig)        

######################################################################################################################
######################################################################################################################
        st.markdown("---")

        # Selecting the rows 1 to 6 and columns 76 to 81
        selected_data = df3.iloc[np.r_[10, 13, 11], 16:21]
        selected_data = selected_data.round(0)
        selected_data.columns = [2024, 2023, 2022, 2021, 2020]

        # Create a colormap of reds
        cmap = plt.get_cmap('Blues')
        colors = cmap(np.linspace(1, 0.3, num=len(selected_data.columns)))

        # Creating a figure and a set of subplots
        fig, ax = plt.subplots(figsize=(15, 10))

        # Plotting using ax
        selected_data.plot(kind='bar', ax=ax, width=0.9, color=colors)

        # Adding value labels on top of each bar
        for p in ax.patches:
            # Format the height as integer
            height = int(p.get_height())  # Convert to integer to avoid decimals
            ax.annotate(f'{height}', (p.get_x() + p.get_width() / 2., p.get_height()),
                        ha='center', va='center', xytext=(0, 10), textcoords='offset points', fontsize=16)

        # Setting the labels and title using ax methods
        custom_labels = ["Folha do futebol (Pessoal + Imagem)", "Aquisições de atletas", "Resultado"]
        
        # Function to break labels into two lines if longer than a given number of characters
        def adjust_labels(labels, max_len=18):
            adjusted_labels = []
            for label in labels:
                if len(label) > max_len:
                    # Split the label by spaces and attempt to divide into two roughly equal parts
                    words = label.split()
                    midpoint = len(words) // 2
                    label = ' '.join(words[:midpoint]) + '\n' + ' '.join(words[midpoint:])
                adjusted_labels.append(label)
            return adjusted_labels

        # Apply the function to custom_labels
        adjusted_custom_labels = adjust_labels(custom_labels)

        ax.set_xticklabels(adjusted_custom_labels, fontsize=19, rotation=0)
        ax.set_title('Despesas', fontsize=24, fontweight="bold")
        ax.tick_params(axis='y', labelsize=16)
        ax.legend(bbox_to_anchor=(0.5, -0.1), loc='upper center', ncol=5, fontsize=18, frameon=False)
        ax.set_ylabel('Despesas (em R$ milhões, em moeda constante)', fontsize=18)
        ax.spines['right'].set_visible(False)
        ax.spines['top'].set_visible(False)

        # Adjust layout and show plot
        fig.tight_layout()
        st.pyplot(fig)        

######################################################################################################################
######################################################################################################################

        markdown_1 = f"<div style='text-align:center;  color: blue; font-weight: bold; font-size:{fontsize}px'>{clube:}</div>"
        st.markdown("<h4 style='text-align: center;  color: black;'>Histórico de Índices</b></h4>", unsafe_allow_html=True)
        st.markdown("<h5 style='text-align: center;  color: black;'>(em moeda constante)<br></b></h5>", unsafe_allow_html=True)
        st.markdown(markdown_1, unsafe_allow_html=True)
        st.markdown("---")

        # Selecting the rows 1 to 6 and columns 76 to 81
        selected_data = df3.iloc[np.r_[22, 24, 27], 16:21]
        selected_data = selected_data.round(1)
        selected_data.columns = [2024, 2023, 2022, 2021, 2020]

        # Create a colormap of reds
        cmap = plt.get_cmap('Blues')
        colors = cmap(np.linspace(1, 0.3, num=len(selected_data.columns)))

        # Creating a figure and a set of subplots
        fig, ax = plt.subplots(figsize=(15, 10))

        # Plotting using ax
        selected_data.plot(kind='bar', ax=ax, width=0.9, color=colors)

        for p in ax.patches:
            # Format the height with one decimal place
            height = p.get_height()
            ax.annotate(f'{height:.1f}', (p.get_x() + p.get_width() / 2., height),
                        ha='center', va='center', xytext=(0, 10), textcoords='offset points', fontsize=16)

        # Setting the labels and title using ax methods
        custom_labels = ["Rec Oper Líquida / Base Torcedores", 
                         "Rec Venda Jogadores / Pontuação Série A",
                         "Rec Oper Líquida / Pontuação Série A"]
        
        def adjust_labels(labels, max_len=18):
            adjusted_labels = []
            for label in labels:
                if len(label) > max_len:
                    # Find the index of the slash in the label
                    slash_index = label.find('/')
                    if slash_index != -1:
                        # Split the label right after the slash and keep the slash at the end of the first line
                        label = label[:slash_index + 1] + '\n' + label[slash_index + 1:]
                adjusted_labels.append(label)
            return adjusted_labels

        # Apply the function to custom_labels
        adjusted_custom_labels = adjust_labels(custom_labels)

        ax.set_xticklabels(adjusted_custom_labels, fontsize=16, rotation=0)
        #ax.set_title('Índices', fontsize=24, fontweight="bold")
        ax.tick_params(axis='y', labelsize=16)
        ax.legend(bbox_to_anchor=(0.5, -0.1), loc='upper center', ncol=5, fontsize=18, frameon=False)
        #ax.set_ylabel('Despesas (em R$ milhões, em moeda constante)', fontsize=18)
        ax.spines['right'].set_visible(False)
        ax.spines['top'].set_visible(False)
        # Adding a note below the graph using the axes
        note_text = "Nota: As variáveis estão, respectivamente, em Reais/torcedor"
        note_text_2 = "e milhões/ponto conquistado nas duas últimas."
        ax.text(0, -0.25, note_text, transform=ax.transAxes, ha="left", fontsize=18, color="black")
        ax.text(0, -0.31, note_text_2, transform=ax.transAxes, ha="left", fontsize=18, color="black")

        # Adjust layout and show plot
        fig.tight_layout()
        st.pyplot(fig)        

######################################################################################################################

        st.markdown("---")

        # Selecting the rows 1 to 6 and columns 76 to 81
        selected_data = df3.iloc[np.r_[26, 31, 33], 16:21]
        selected_data = selected_data.round(2)
        selected_data.columns = [2024, 2023, 2022, 2021, 2020]

        # Create a colormap of reds
        cmap = plt.get_cmap('Blues')
        colors = cmap(np.linspace(1, 0.3, num=len(selected_data.columns)))

        # Creating a figure and a set of subplots
        fig, ax = plt.subplots(figsize=(15, 10))

        # Plotting using ax
        selected_data.plot(kind='bar', ax=ax, width=0.95, color=colors)

        for p in ax.patches:
            # Format the height with one decimal place
            height = p.get_height()
            ax.annotate(f'{height:.2f}', (p.get_x() + p.get_width() / 2., height),
                        ha='center', va='center', xytext=(0, 10), textcoords='offset points', fontsize=14)

        # Setting the labels and title using ax methods
        custom_labels = ["Folha do futebol / Pontuação Série A", 
                         "Dívida / Rec Operacional", 
                         "Folha futebol + Compra jogadores / Rec Operacional"]
        
        def adjust_labels(labels, max_len=18):
            adjusted_labels = []
            for label in labels:
                if len(label) > max_len:
                    # Find the index of the slash in the label
                    slash_index = label.find('/')
                    if slash_index != -1:
                        # Split the label right after the slash and keep the slash at the end of the first line
                        label = label[:slash_index + 1] + '\n' + label[slash_index + 1:]
                adjusted_labels.append(label)
            return adjusted_labels

        # Apply the function to custom_labels
        adjusted_custom_labels = adjust_labels(custom_labels)

        ax.set_xticklabels(adjusted_custom_labels, fontsize=16, rotation=0)
        #ax.set_title('Índices', fontsize=24, fontweight="bold")
        ax.tick_params(axis='y', labelsize=16)
        ax.legend(bbox_to_anchor=(0.5, -0.1), loc='upper center', ncol=5, fontsize=18, frameon=False)
        #ax.set_ylabel('Despesas (em R$ milhões, em moeda constante)', fontsize=18)
        ax.spines['right'].set_visible(False)
        ax.spines['top'].set_visible(False)
        # Adding a note below the graph using the axes
        note_text = "Nota: As variáveis estão, respectivamente, em % da Folha do futebol, milhões/ponto conquistado,"
        note_text_2 = "e % da Rec Operacional Líquida nas duas últimas."
        ax.text(0, -0.25, note_text, transform=ax.transAxes, ha="left", fontsize=18, color="black")
        ax.text(0, -0.31, note_text_2, transform=ax.transAxes, ha="left", fontsize=18, color="black")

        # Adjust layout and show plot
        fig.tight_layout()
        st.pyplot(fig)        

######################################################################################################################
######################################################################################################################
######################################################################################################################
######################################################################################################################

    if clube == "Botafogo":
        st.markdown("<h4 style='text-align: center;  color: black;'>Histórico de Receitas e Despesas</b></h4>", unsafe_allow_html=True)
        st.markdown("<h5 style='text-align: center;  color: black;'>(em R$ milhões, em moeda constante)<br></b></h5>", unsafe_allow_html=True)
        st.markdown("---")

        # Selecting the rows 1 to 6 and columns 76 to 81
        selected_data = df3.iloc[np.r_[28, 2:7, 8], 21:26]
        selected_data = selected_data.round(0)
        selected_data.columns = [2024, 2023, 2022, 2021, 2020]

        # Create a light range of the 'Greys' colormap
        base_cmap = plt.get_cmap('Greys')
        colors = base_cmap(np.linspace(0.2, 0.8, num=len(selected_data.columns)))

        # Creating a figure and a set of subplots
        fig, ax = plt.subplots(figsize=(15, 10))

        # Plotting using ax
        selected_data.plot(kind='bar', ax=ax, width=0.9, color=colors)

        # Adding value labels on top of each bar
        for p in ax.patches:
            # Format the height as integer
            height = int(p.get_height())  # Convert to integer to avoid decimals
            ax.annotate(f'{height}', (p.get_x() + p.get_width() / 2., p.get_height()),
                        ha='center', va='center', xytext=(0, 10), textcoords='offset points', fontsize=14)

        # Setting the labels and title using ax methods
        custom_labels = ["Transmissão + Premiação", "Publicidade e patrocínio", "Match-Day", 
                 "Sócio-torcedor", "Premiações", "Licenciamento da marca", "Negociação de atletas"]
        
        # Function to break labels into two lines if longer than a given number of characters
        def adjust_labels(labels, max_len=18):
            adjusted_labels = []
            for label in labels:
                if len(label) > max_len:
                    # Split the label by spaces and attempt to divide into two roughly equal parts
                    words = label.split()
                    midpoint = len(words) // 2
                    label = ' '.join(words[:midpoint]) + '\n' + ' '.join(words[midpoint:])
                adjusted_labels.append(label)
            return adjusted_labels

        # Apply the function to custom_labels
        adjusted_custom_labels = adjust_labels(custom_labels)

        ax.set_xticklabels(adjusted_custom_labels, fontsize=19, rotation=0)
        ax.set_title('Receitas', fontsize=24, fontweight="bold")
        ax.tick_params(axis='y', labelsize=16)
        ax.legend(bbox_to_anchor=(0.5, -0.1), loc='upper center', ncol=5, fontsize=18, frameon=False)
        ax.set_ylabel('Receitas (em R$ milhões, em moeda constante)', fontsize=18)
        ax.spines['right'].set_visible(False)
        ax.spines['top'].set_visible(False)
        note_text = "Notas:"
        note_text_1 = "1. O clube não informa com clareza a Receita com Sócio-Torcedor."
        note_text_2 = "2. O clube não informa com clareza a Receita com Licenciamento da Marca."
        ax.text(0, -0.25, note_text, transform=ax.transAxes, ha="left", fontsize=18, color="black")
        ax.text(0, -0.31, note_text_1, transform=ax.transAxes, ha="left", fontsize=18, color="black")
        ax.text(0, -0.37, note_text_2, transform=ax.transAxes, ha="left", fontsize=18, color="black")

        # Adjust layout and show plot
        fig.tight_layout()
        st.pyplot(fig)        

######################################################################################################################
######################################################################################################################
        st.markdown("---")

        # Selecting the rows 1 to 6 and columns 76 to 81
        selected_data = df3.iloc[np.r_[10, 13, 11], 21:26]
        selected_data = selected_data.round(0)
        selected_data.columns = [2024, 2023, 2022, 2021, 2020]

        # Create a light range of the 'Greys' colormap
        base_cmap = plt.get_cmap('Greys')
        colors = base_cmap(np.linspace(0.2, 0.8, num=len(selected_data.columns)))

        # Creating a figure and a set of subplots
        fig, ax = plt.subplots(figsize=(15, 10))

        # Plotting using ax
        selected_data.plot(kind='bar', ax=ax, width=0.9, color=colors)

        # Adding value labels on top of each bar
        for p in ax.patches:
            # Format the height as integer
            height = int(p.get_height())  # Convert to integer to avoid decimals
            ax.annotate(f'{height}', (p.get_x() + p.get_width() / 2., p.get_height()),
                        ha='center', va='center', xytext=(0, 10), textcoords='offset points', fontsize=16)

        # Setting the labels and title using ax methods
        custom_labels = ["Folha do futebol (Pessoal + Imagem)", "Aquisições de atletas", "Resultado"]
        
        # Function to break labels into two lines if longer than a given number of characters
        def adjust_labels(labels, max_len=18):
            adjusted_labels = []
            for label in labels:
                if len(label) > max_len:
                    # Split the label by spaces and attempt to divide into two roughly equal parts
                    words = label.split()
                    midpoint = len(words) // 2
                    label = ' '.join(words[:midpoint]) + '\n' + ' '.join(words[midpoint:])
                adjusted_labels.append(label)
            return adjusted_labels

        # Apply the function to custom_labels
        adjusted_custom_labels = adjust_labels(custom_labels)

        ax.set_xticklabels(adjusted_custom_labels, fontsize=19, rotation=0)
        ax.set_title('Despesas', fontsize=24, fontweight="bold")
        ax.tick_params(axis='y', labelsize=16)
        ax.legend(bbox_to_anchor=(0.5, -0.1), loc='upper center', ncol=5, fontsize=18, frameon=False)
        ax.set_ylabel('Despesas (em R$ milhões, em moeda constante)', fontsize=18)
        ax.spines['right'].set_visible(False)
        ax.spines['top'].set_visible(False)

        # Adjust layout and show plot
        fig.tight_layout()
        st.pyplot(fig)        

######################################################################################################################
######################################################################################################################

        markdown_1 = f"<div style='text-align:center;  color: grey; font-weight: bold; font-size:{fontsize}px'>{clube:}</div>"
        st.markdown("<h4 style='text-align: center;  color: black;'>Histórico de Índices</b></h4>", unsafe_allow_html=True)
        st.markdown("<h5 style='text-align: center;  color: black;'>(em moeda constante)<br></b></h5>", unsafe_allow_html=True)
        st.markdown(markdown_1, unsafe_allow_html=True)
        st.markdown("---")

        # Selecting the rows 1 to 6 and columns 76 to 81
        selected_data = df3.iloc[np.r_[22, 24, 27], 21:26]
        selected_data = selected_data.round(1)
        selected_data.columns = [2024, 2023, 2022, 2021, 2020]

        # Create a light range of the 'Greys' colormap
        base_cmap = plt.get_cmap('Greys')
        colors = base_cmap(np.linspace(0.2, 0.8, num=len(selected_data.columns)))

        # Creating a figure and a set of subplots
        fig, ax = plt.subplots(figsize=(15, 10))

        # Plotting using ax
        selected_data.plot(kind='bar', ax=ax, width=0.9, color=colors)

        for p in ax.patches:
            # Format the height with one decimal place
            height = p.get_height()
            ax.annotate(f'{height:.1f}', (p.get_x() + p.get_width() / 2., height),
                        ha='center', va='center', xytext=(0, 10), textcoords='offset points', fontsize=16)

        # Setting the labels and title using ax methods
        custom_labels = ["Rec Operacional / Base Torcedores", 
                         "Rec Venda Jogadores / Pontuação Série A",
                         "Rec Operacional / Pontuação Série A"]
        
        def adjust_labels(labels, max_len=18):
            adjusted_labels = []
            for label in labels:
                if len(label) > max_len:
                    # Find the index of the slash in the label
                    slash_index = label.find('/')
                    if slash_index != -1:
                        # Split the label right after the slash and keep the slash at the end of the first line
                        label = label[:slash_index + 1] + '\n' + label[slash_index + 1:]
                adjusted_labels.append(label)
            return adjusted_labels

        # Apply the function to custom_labels
        adjusted_custom_labels = adjust_labels(custom_labels)

        ax.set_xticklabels(adjusted_custom_labels, fontsize=16, rotation=0)
        #ax.set_title('Índices', fontsize=24, fontweight="bold")
        ax.tick_params(axis='y', labelsize=16)
        ax.legend(bbox_to_anchor=(0.5, -0.1), loc='upper center', ncol=5, fontsize=18, frameon=False)
        #ax.set_ylabel('Despesas (em R$ milhões, em moeda constante)', fontsize=18)
        ax.spines['right'].set_visible(False)
        ax.spines['top'].set_visible(False)
        # Adding a note below the graph using the axes
        note_text = "Nota: As variáveis estão, respectivamente, em Reais/torcedor"
        note_text_2 = "e milhões/ponto conquistado nas duas últimas."
        ax.text(0, -0.25, note_text, transform=ax.transAxes, ha="left", fontsize=18, color="black")
        ax.text(0, -0.31, note_text_2, transform=ax.transAxes, ha="left", fontsize=18, color="black")

        # Adjust layout and show plot
        fig.tight_layout()
        st.pyplot(fig)        

######################################################################################################################

        st.markdown("---")

        # Selecting the rows 1 to 6 and columns 76 to 81
        selected_data = df3.iloc[np.r_[25:27, 31, 33], 21:26]
        selected_data = selected_data.round(2)
        selected_data.columns = [2024, 2023, 2022, 2021, 2020]

        # Create a light range of the 'Greys' colormap
        base_cmap = plt.get_cmap('Greys')
        colors = base_cmap(np.linspace(0.2, 0.8, num=len(selected_data.columns)))

        # Creating a figure and a set of subplots
        fig, ax = plt.subplots(figsize=(15, 10))

        # Plotting using ax
        selected_data.plot(kind='bar', ax=ax, width=0.95, color=colors)

        for p in ax.patches:
            # Format the height with one decimal place
            height = p.get_height()
            ax.annotate(f'{height:.2f}', (p.get_x() + p.get_width() / 2., height),
                        ha='center', va='center', xytext=(0, 10), textcoords='offset points', fontsize=14)

        # Setting the labels and title using ax methods
        custom_labels = ["Receita com Premiação / Folha do Futebol",
                         "Folha do futebol / Pontuação Série A", 
                         "Dívida / Rec Operacional", 
                         "Folha futebol + Compra jogadores / Rec Operacional"]
        
        def adjust_labels(labels, max_len=18):
            adjusted_labels = []
            for label in labels:
                if len(label) > max_len:
                    # Find the index of the slash in the label
                    slash_index = label.find('/')
                    if slash_index != -1:
                        # Split the label right after the slash and keep the slash at the end of the first line
                        label = label[:slash_index + 1] + '\n' + label[slash_index + 1:]
                adjusted_labels.append(label)
            return adjusted_labels

        # Apply the function to custom_labels
        adjusted_custom_labels = adjust_labels(custom_labels)

        ax.set_xticklabels(adjusted_custom_labels, fontsize=16, rotation=0)
        #ax.set_title('Índices', fontsize=24, fontweight="bold")
        ax.tick_params(axis='y', labelsize=16)
        ax.legend(bbox_to_anchor=(0.5, -0.1), loc='upper center', ncol=5, fontsize=18, frameon=False)
        #ax.set_ylabel('Despesas (em R$ milhões, em moeda constante)', fontsize=18)
        ax.spines['right'].set_visible(False)
        ax.spines['top'].set_visible(False)
        # Adding a note below the graph using the axes
        note_text = "Nota: As variáveis estão, respectivamente, em % da Folha do futebol, milhões/ponto conquistado,"
        note_text_2 = "e % da Rec Operacional Líquida nas duas últimas."
        ax.text(0, -0.25, note_text, transform=ax.transAxes, ha="left", fontsize=18, color="black")
        ax.text(0, -0.31, note_text_2, transform=ax.transAxes, ha="left", fontsize=18, color="black")

        # Adjust layout and show plot
        fig.tight_layout()
        st.pyplot(fig)        

######################################################################################################################
######################################################################################################################
######################################################################################################################
######################################################################################################################

    if clube == "Corinthians":
        st.markdown("<h4 style='text-align: center;  color: black;'>Histórico de Receitas e Despesas</b></h4>", unsafe_allow_html=True)
        st.markdown("<h5 style='text-align: center;  color: black;'>(em R$ milhões, em moeda constante)<br></b></h5>", unsafe_allow_html=True)
        st.markdown("---")

        # Selecting the rows 1 to 6 and columns 76 to 81
        selected_data = df3.iloc[np.r_[1:5, 8], 26:31]
        selected_data = selected_data.round(0)
        selected_data.columns = [2024, 2023, 2022, 2021, 2020]

        # Create a light range of the 'Greys' colormap
        base_cmap = plt.get_cmap('Greys')
        colors = base_cmap(np.linspace(0.2, 0.8, num=len(selected_data.columns)))

        # Creating a figure and a set of subplots
        fig, ax = plt.subplots(figsize=(15, 10))

        # Plotting using ax
        selected_data.plot(kind='bar', ax=ax, width=0.9, color=colors)

        # Adding value labels on top of each bar
        for p in ax.patches:
            # Format the height as integer
            height = int(p.get_height())  # Convert to integer to avoid decimals
            ax.annotate(f'{height}', (p.get_x() + p.get_width() / 2., p.get_height()),
                        ha='center', va='center', xytext=(0, 10), textcoords='offset points', fontsize=14)

        # Setting the labels and title using ax methods
        custom_labels = ["Transmissão + Premiação", "Publicidade e patrocínio", "Match-Day", 
                 "Sócio-torcedor", "Negociação de atletas"]
        
        # Function to break labels into two lines if longer than a given number of characters
        def adjust_labels(labels, max_len=18):
            adjusted_labels = []
            for label in labels:
                if len(label) > max_len:
                    # Split the label by spaces and attempt to divide into two roughly equal parts
                    words = label.split()
                    midpoint = len(words) // 2
                    label = ' '.join(words[:midpoint]) + '\n' + ' '.join(words[midpoint:])
                adjusted_labels.append(label)
            return adjusted_labels

        # Apply the function to custom_labels
        adjusted_custom_labels = adjust_labels(custom_labels)

        ax.set_xticklabels(adjusted_custom_labels, fontsize=19, rotation=0)
        ax.set_title('Receitas', fontsize=24, fontweight="bold")
        ax.tick_params(axis='y', labelsize=16)
        ax.legend(bbox_to_anchor=(0.5, -0.1), loc='upper center', ncol=5, fontsize=18, frameon=False)
        ax.set_ylabel('Receitas (em R$ milhões, em moeda constante)', fontsize=18)
        ax.spines['right'].set_visible(False)
        ax.spines['top'].set_visible(False)
        note_text = "Notas:"
        note_text_1 = "1. O clube informa a Receita de Premiação em conjunto com a Receita de Transmissão."
        note_text_2 = "2. O clube não informa com clareza a Receita com Licenciamento da Marca."
        ax.text(0, -0.25, note_text, transform=ax.transAxes, ha="left", fontsize=18, color="black")
        ax.text(0, -0.31, note_text_1, transform=ax.transAxes, ha="left", fontsize=18, color="black")
        ax.text(0, -0.37, note_text_2, transform=ax.transAxes, ha="left", fontsize=18, color="black")

        # Adjust layout and show plot
        fig.tight_layout()
        st.pyplot(fig)        

######################################################################################################################
######################################################################################################################
        st.markdown("---")

        # Selecting the rows 1 to 6 and columns 76 to 81
        selected_data = df3.iloc[np.r_[10, 13, 11], 26:31]
        selected_data = selected_data.round(0)
        selected_data.columns = [2024, 2023, 2022, 2021, 2020]

        # Create a light range of the 'Greys' colormap
        base_cmap = plt.get_cmap('Greys')
        colors = base_cmap(np.linspace(0.2, 0.8, num=len(selected_data.columns)))

        # Creating a figure and a set of subplots
        fig, ax = plt.subplots(figsize=(15, 10))

        # Plotting using ax
        selected_data.plot(kind='bar', ax=ax, width=0.9, color=colors)

        # Adding value labels on top of each bar
        for p in ax.patches:
            # Format the height as integer
            height = int(p.get_height())  # Convert to integer to avoid decimals
            ax.annotate(f'{height}', (p.get_x() + p.get_width() / 2., p.get_height()),
                        ha='center', va='center', xytext=(0, 10), textcoords='offset points', fontsize=16)

        # Setting the labels and title using ax methods
        custom_labels = ["Folha do futebol (Pessoal + Imagem)", "Aquisições de atletas", "Resultado"]
        
        # Function to break labels into two lines if longer than a given number of characters
        def adjust_labels(labels, max_len=18):
            adjusted_labels = []
            for label in labels:
                if len(label) > max_len:
                    # Split the label by spaces and attempt to divide into two roughly equal parts
                    words = label.split()
                    midpoint = len(words) // 2
                    label = ' '.join(words[:midpoint]) + '\n' + ' '.join(words[midpoint:])
                adjusted_labels.append(label)
            return adjusted_labels

        # Apply the function to custom_labels
        adjusted_custom_labels = adjust_labels(custom_labels)

        ax.set_xticklabels(adjusted_custom_labels, fontsize=19, rotation=0)
        ax.set_title('Despesas', fontsize=24, fontweight="bold")
        ax.tick_params(axis='y', labelsize=16)
        ax.legend(bbox_to_anchor=(0.5, -0.1), loc='upper center', ncol=5, fontsize=18, frameon=False)
        ax.set_ylabel('Despesas (em R$ milhões, em moeda constante)', fontsize=18)
        ax.spines['right'].set_visible(False)
        ax.spines['top'].set_visible(False)

        # Adjust layout and show plot
        fig.tight_layout()
        st.pyplot(fig)        

######################################################################################################################
######################################################################################################################

        markdown_1 = f"<div style='text-align:center;  color: grey; font-weight: bold; font-size:{fontsize}px'>{clube:}</div>"
        st.markdown("<h4 style='text-align: center;  color: black;'>Histórico de Índices</b></h4>", unsafe_allow_html=True)
        st.markdown("<h5 style='text-align: center;  color: black;'>(em moeda constante)<br></b></h5>", unsafe_allow_html=True)
        st.markdown(markdown_1, unsafe_allow_html=True)
        st.markdown("---")

        # Selecting the rows 1 to 6 and columns 76 to 81
        selected_data = df3.iloc[np.r_[22, 24, 27], 26:31]
        selected_data = selected_data.round(1)
        selected_data.columns = [2024, 2023, 2022, 2021, 2020]

        # Create a light range of the 'Greys' colormap
        base_cmap = plt.get_cmap('Greys')
        colors = base_cmap(np.linspace(0.2, 0.8, num=len(selected_data.columns)))

        # Creating a figure and a set of subplots
        fig, ax = plt.subplots(figsize=(15, 10))

        # Plotting using ax
        selected_data.plot(kind='bar', ax=ax, width=0.9, color=colors)

        for p in ax.patches:
            # Format the height with one decimal place
            height = p.get_height()
            ax.annotate(f'{height:.1f}', (p.get_x() + p.get_width() / 2., height),
                        ha='center', va='center', xytext=(0, 10), textcoords='offset points', fontsize=16)

        # Setting the labels and title using ax methods
        custom_labels = ["Rec Operacional / Base Torcedores", 
                         "Rec Venda Jogadores / Pontuação Série A",
                         "Rec Operacional / Pontuação Série A"]
        
        def adjust_labels(labels, max_len=18):
            adjusted_labels = []
            for label in labels:
                if len(label) > max_len:
                    # Find the index of the slash in the label
                    slash_index = label.find('/')
                    if slash_index != -1:
                        # Split the label right after the slash and keep the slash at the end of the first line
                        label = label[:slash_index + 1] + '\n' + label[slash_index + 1:]
                adjusted_labels.append(label)
            return adjusted_labels

        # Apply the function to custom_labels
        adjusted_custom_labels = adjust_labels(custom_labels)

        ax.set_xticklabels(adjusted_custom_labels, fontsize=16, rotation=0)
        #ax.set_title('Índices', fontsize=24, fontweight="bold")
        ax.tick_params(axis='y', labelsize=16)
        ax.legend(bbox_to_anchor=(0.5, -0.1), loc='upper center', ncol=5, fontsize=18, frameon=False)
        #ax.set_ylabel('Despesas (em R$ milhões, em moeda constante)', fontsize=18)
        ax.spines['right'].set_visible(False)
        ax.spines['top'].set_visible(False)
        # Adding a note below the graph using the axes
        note_text = "Nota: As variáveis estão, respectivamente, em Reais/torcedor"
        note_text_2 = "e milhões/ponto conquistado nas duas últimas."
        ax.text(0, -0.25, note_text, transform=ax.transAxes, ha="left", fontsize=18, color="black")
        ax.text(0, -0.31, note_text_2, transform=ax.transAxes, ha="left", fontsize=18, color="black")

        # Adjust layout and show plot
        fig.tight_layout()
        st.pyplot(fig)        

######################################################################################################################

        st.markdown("---")

        # Selecting the rows 1 to 6 and columns 76 to 81
        selected_data = df3.iloc[np.r_[26, 31, 33], 26:31]
        selected_data = selected_data.round(2)
        selected_data.columns = [2024, 2023, 2022, 2021, 2020]

        # Create a light range of the 'Greys' colormap
        base_cmap = plt.get_cmap('Greys')
        colors = base_cmap(np.linspace(0.2, 0.8, num=len(selected_data.columns)))

        # Creating a figure and a set of subplots
        fig, ax = plt.subplots(figsize=(15, 10))

        # Plotting using ax
        selected_data.plot(kind='bar', ax=ax, width=0.95, color=colors)

        for p in ax.patches:
            # Format the height with one decimal place
            height = p.get_height()
            ax.annotate(f'{height:.2f}', (p.get_x() + p.get_width() / 2., height),
                        ha='center', va='center', xytext=(0, 10), textcoords='offset points', fontsize=14)

        # Setting the labels and title using ax methods
        custom_labels = ["Folha do futebol / Pontuação Série A", 
                         "Dívida / Rec Oper Líquida", 
                         "Folha futebol + Compra jogadores / Rec Oper Líquida"]
        
        def adjust_labels(labels, max_len=18):
            adjusted_labels = []
            for label in labels:
                if len(label) > max_len:
                    # Find the index of the slash in the label
                    slash_index = label.find('/')
                    if slash_index != -1:
                        # Split the label right after the slash and keep the slash at the end of the first line
                        label = label[:slash_index + 1] + '\n' + label[slash_index + 1:]
                adjusted_labels.append(label)
            return adjusted_labels

        # Apply the function to custom_labels
        adjusted_custom_labels = adjust_labels(custom_labels)

        ax.set_xticklabels(adjusted_custom_labels, fontsize=16, rotation=0)
        #ax.set_title('Índices', fontsize=24, fontweight="bold")
        ax.tick_params(axis='y', labelsize=16)
        ax.legend(bbox_to_anchor=(0.5, -0.1), loc='upper center', ncol=5, fontsize=18, frameon=False)
        #ax.set_ylabel('Despesas (em R$ milhões, em moeda constante)', fontsize=18)
        ax.spines['right'].set_visible(False)
        ax.spines['top'].set_visible(False)
        # Adding a note below the graph using the axes
        note_text = "Nota: As variáveis estão, respectivamente, em milhões/ponto conquistado,"
        note_text_2 = "e % da Rec Operacional Líquida nas duas últimas."
        ax.text(0, -0.25, note_text, transform=ax.transAxes, ha="left", fontsize=18, color="black")
        ax.text(0, -0.31, note_text_2, transform=ax.transAxes, ha="left", fontsize=18, color="black")

        # Adjust layout and show plot
        fig.tight_layout()
        st.pyplot(fig)        
######################################################################################################################
######################################################################################################################
######################################################################################################################
######################################################################################################################

    if clube == "Vitória":
        st.markdown("<h4 style='text-align: center;  color: black;'>Histórico de Receitas e Despesas</b></h4>", unsafe_allow_html=True)
        st.markdown("<h5 style='text-align: center;  color: black;'>(em R$ milhões, em moeda constante)<br></b></h5>", unsafe_allow_html=True)
        st.markdown("---")

        # Selecting the rows 1 to 6 and columns 76 to 81
        selected_data = df3.iloc[np.r_[1:5, 8], 31:36]
        selected_data = selected_data.round(0)
        selected_data.columns = [2024, 2023, 2022, 2021, 2020]

        # Create a colormap of greens
        cmap = plt.get_cmap('Reds')
        colors = cmap(np.linspace(1, 0.3, num=len(selected_data.columns)))

        # Creating a figure and a set of subplots
        fig, ax = plt.subplots(figsize=(15, 10))

        # Plotting using ax
        selected_data.plot(kind='bar', ax=ax, width=0.9, color=colors)

        # Adding value labels on top of each bar
        for p in ax.patches:
            # Format the height as integer
            height = int(p.get_height())  # Convert to integer to avoid decimals
            ax.annotate(f'{height}', (p.get_x() + p.get_width() / 2., p.get_height()),
                        ha='center', va='center', xytext=(0, 10), textcoords='offset points', fontsize=14)

        # Setting the labels and title using ax methods
        custom_labels = ["Transmissão + Premiação", "Publicidade e patrocínio", "Match-Day", 
                 "Sócio-torcedor", "Negociação de atletas"]
        
        # Function to break labels into two lines if longer than a given number of characters
        def adjust_labels(labels, max_len=18):
            adjusted_labels = []
            for label in labels:
                if len(label) > max_len:
                    # Split the label by spaces and attempt to divide into two roughly equal parts
                    words = label.split()
                    midpoint = len(words) // 2
                    label = ' '.join(words[:midpoint]) + '\n' + ' '.join(words[midpoint:])
                adjusted_labels.append(label)
            return adjusted_labels

        # Apply the function to custom_labels
        adjusted_custom_labels = adjust_labels(custom_labels)

        ax.set_xticklabels(adjusted_custom_labels, fontsize=19, rotation=0)
        ax.set_title('Receitas', fontsize=24, fontweight="bold")
        ax.tick_params(axis='y', labelsize=16)
        ax.legend(bbox_to_anchor=(0.5, -0.1), loc='upper center', ncol=5, fontsize=18, frameon=False)
        ax.set_ylabel('Receitas (em R$ milhões, em moeda constante)', fontsize=18)
        ax.spines['right'].set_visible(False)
        ax.spines['top'].set_visible(False)
        note_text = "Notas:"
        note_text_1 = "1. O clube informa a Receita de Premiação em conjunto com a Receita de Transmissão."
        note_text_2 = "2. O clube não informa com clareza a Receita com Licenciamento da Marca."
        ax.text(0, -0.25, note_text, transform=ax.transAxes, ha="left", fontsize=18, color="black")
        ax.text(0, -0.31, note_text_1, transform=ax.transAxes, ha="left", fontsize=18, color="black")
        ax.text(0, -0.37, note_text_2, transform=ax.transAxes, ha="left", fontsize=18, color="black")

        # Adjust layout and show plot
        fig.tight_layout()
        st.pyplot(fig)        

######################################################################################################################
######################################################################################################################
        st.markdown("---")

        # Selecting the rows 1 to 6 and columns 76 to 81
        selected_data = df3.iloc[np.r_[10, 13, 11], 31:36]
        selected_data = selected_data.round(0)
        selected_data.columns = [2024, 2023, 2022, 2021, 2020]

        # Create a colormap of Greens
        cmap = plt.get_cmap('Reds')
        colors = cmap(np.linspace(1, 0.3, num=len(selected_data.columns)))

        # Creating a figure and a set of subplots
        fig, ax = plt.subplots(figsize=(15, 10))

        # Plotting using ax
        selected_data.plot(kind='bar', ax=ax, width=0.9, color=colors)

        # Adding value labels on top of each bar
        for p in ax.patches:
            # Format the height as integer
            height = int(p.get_height())  # Convert to integer to avoid decimals
            ax.annotate(f'{height}', (p.get_x() + p.get_width() / 2., p.get_height()),
                        ha='center', va='center', xytext=(0, 10), textcoords='offset points', fontsize=16)

        # Setting the labels and title using ax methods
        custom_labels = ["Folha do futebol (Pessoal + Imagem)", "Aquisições de atletas", "Resultado"]
        
        # Function to break labels into two lines if longer than a given number of characters
        def adjust_labels(labels, max_len=18):
            adjusted_labels = []
            for label in labels:
                if len(label) > max_len:
                    # Split the label by spaces and attempt to divide into two roughly equal parts
                    words = label.split()
                    midpoint = len(words) // 2
                    label = ' '.join(words[:midpoint]) + '\n' + ' '.join(words[midpoint:])
                adjusted_labels.append(label)
            return adjusted_labels

        # Apply the function to custom_labels
        adjusted_custom_labels = adjust_labels(custom_labels)

        ax.set_xticklabels(adjusted_custom_labels, fontsize=19, rotation=0)
        ax.set_title('Despesas', fontsize=24, fontweight="bold")
        ax.tick_params(axis='y', labelsize=16)
        ax.legend(bbox_to_anchor=(0.5, -0.1), loc='upper center', ncol=5, fontsize=18, frameon=False)
        ax.set_ylabel('Despesas (em R$ milhões, em moeda constante)', fontsize=18)
        ax.spines['right'].set_visible(False)
        ax.spines['top'].set_visible(False)

        # Adjust layout and show plot
        fig.tight_layout()
        st.pyplot(fig)        

######################################################################################################################
######################################################################################################################

        st.markdown("<h4 style='text-align: center;  color: black;'>Histórico de Índices</b></h4>", unsafe_allow_html=True)
        st.markdown("<h5 style='text-align: center;  color: black;'>(em moeda constante)<br></b></h5>", unsafe_allow_html=True)
        st.markdown("---")

        # Selecting the rows 1 to 6 and columns 76 to 81
        selected_data = df3.iloc[np.r_[22, 24, 27], 31:36]
        selected_data = selected_data.round(1)
        selected_data.columns = [2024, 2023, 2022, 2021, 2020]

        # Create a colormap of Greens
        cmap = plt.get_cmap('Reds')
        colors = cmap(np.linspace(1, 0.3, num=len(selected_data.columns)))

        # Creating a figure and a set of subplots
        fig, ax = plt.subplots(figsize=(15, 10))

        # Plotting using ax
        selected_data.plot(kind='bar', ax=ax, width=0.9, color=colors)

        for p in ax.patches:
            # Format the height with one decimal place
            height = p.get_height()
            ax.annotate(f'{height:.1f}', (p.get_x() + p.get_width() / 2., height),
                        ha='center', va='center', xytext=(0, 10), textcoords='offset points', fontsize=16)

        # Setting the labels and title using ax methods
        custom_labels = ["Rec Operacional / Base Torcedores", 
                         "Rec Venda Jogadores / Pontuação Série A",
                         "Rec Operacional / Pontuação Série A"]
        
        def adjust_labels(labels, max_len=18):
            adjusted_labels = []
            for label in labels:
                if len(label) > max_len:
                    # Find the index of the slash in the label
                    slash_index = label.find('/')
                    if slash_index != -1:
                        # Split the label right after the slash and keep the slash at the end of the first line
                        label = label[:slash_index + 1] + '\n' + label[slash_index + 1:]
                adjusted_labels.append(label)
            return adjusted_labels

        # Apply the function to custom_labels
        adjusted_custom_labels = adjust_labels(custom_labels)

        ax.set_xticklabels(adjusted_custom_labels, fontsize=16, rotation=0)
        #ax.set_title('Índices', fontsize=24, fontweight="bold")
        ax.tick_params(axis='y', labelsize=16)
        ax.legend(bbox_to_anchor=(0.5, -0.1), loc='upper center', ncol=5, fontsize=18, frameon=False)
        #ax.set_ylabel('Despesas (em R$ milhões, em moeda constante)', fontsize=18)
        ax.spines['right'].set_visible(False)
        ax.spines['top'].set_visible(False)
        # Adding a note below the graph using the axes
        note_text = "Nota: As variáveis estão, respectivamente, em Reais/torcedor"
        note_text_2 = "e milhões/ponto conquistado nas duas últimas."
        ax.text(0, -0.25, note_text, transform=ax.transAxes, ha="left", fontsize=18, color="black")
        ax.text(0, -0.31, note_text_2, transform=ax.transAxes, ha="left", fontsize=18, color="black")

        # Adjust layout and show plot
        fig.tight_layout()
        st.pyplot(fig)        

######################################################################################################################

        st.markdown("---")

        # Selecting the rows 1 to 6 and columns 76 to 81
        selected_data = df3.iloc[np.r_[26, 31, 33], 31:36]
        selected_data = selected_data.round(2)
        selected_data.columns = [2024, 2023, 2022, 2021, 2020]

        # Create a colormap of Greens
        cmap = plt.get_cmap('Reds')
        colors = cmap(np.linspace(1, 0.3, num=len(selected_data.columns)))

        # Creating a figure and a set of subplots
        fig, ax = plt.subplots(figsize=(15, 10))

        # Plotting using ax
        selected_data.plot(kind='bar', ax=ax, width=0.95, color=colors)

        for p in ax.patches:
            # Format the height with one decimal place
            height = p.get_height()
            ax.annotate(f'{height:.2f}', (p.get_x() + p.get_width() / 2., height),
                        ha='center', va='center', xytext=(0, 10), textcoords='offset points', fontsize=14)

        # Setting the labels and title using ax methods
        custom_labels = ["Folha do futebol / Pontuação Série A", 
                         "Dívida / Rec Oper Líquida", 
                         "Folha futebol + Compra jogadores / Rec Oper Líquida"]
        
        def adjust_labels(labels, max_len=18):
            adjusted_labels = []
            for label in labels:
                if len(label) > max_len:
                    # Find the index of the slash in the label
                    slash_index = label.find('/')
                    if slash_index != -1:
                        # Split the label right after the slash and keep the slash at the end of the first line
                        label = label[:slash_index + 1] + '\n' + label[slash_index + 1:]
                adjusted_labels.append(label)
            return adjusted_labels

        # Apply the function to custom_labels
        adjusted_custom_labels = adjust_labels(custom_labels)

        ax.set_xticklabels(adjusted_custom_labels, fontsize=16, rotation=0)
        #ax.set_title('Índices', fontsize=24, fontweight="bold")
        ax.tick_params(axis='y', labelsize=16)
        ax.legend(bbox_to_anchor=(0.5, -0.1), loc='upper center', ncol=5, fontsize=18, frameon=False)
        #ax.set_ylabel('Despesas (em R$ milhões, em moeda constante)', fontsize=18)
        ax.spines['right'].set_visible(False)
        ax.spines['top'].set_visible(False)
        # Adding a note below the graph using the axes
        note_text = "Nota: As variáveis estão, respectivamente, em milhões/ponto conquistado,"
        note_text_2 = "e % da Rec Operacional Líquida nas duas últimas."
        ax.text(0, -0.25, note_text, transform=ax.transAxes, ha="left", fontsize=18, color="black")
        ax.text(0, -0.31, note_text_2, transform=ax.transAxes, ha="left", fontsize=18, color="black")

        # Adjust layout and show plot
        fig.tight_layout()
        st.pyplot(fig)        
######################################################################################################################
######################################################################################################################
######################################################################################################################
######################################################################################################################

    if clube == "Cruzeiro":
        st.markdown("<h4 style='text-align: center;  color: black;'>Histórico de Receitas e Despesas</b></h4>", unsafe_allow_html=True)
        st.markdown("<h5 style='text-align: center;  color: black;'>(em R$ milhões, em moeda constante)<br></b></h5>", unsafe_allow_html=True)
        st.markdown("---")

        # Selecting the rows 1 to 6 and columns 76 to 81
        selected_data = df3.iloc[np.r_[1:5, 6, 8], 36:41]
        selected_data = selected_data.round(0)
        selected_data.columns = [2024, 2023, 2022, 2021, 2020]

        # Create a colormap of greens
        cmap = plt.get_cmap('Blues')
        colors = cmap(np.linspace(1, 0.3, num=len(selected_data.columns)))

        # Creating a figure and a set of subplots
        fig, ax = plt.subplots(figsize=(15, 10))

        # Plotting using ax
        selected_data.plot(kind='bar', ax=ax, width=0.9, color=colors)

        # Adding value labels on top of each bar
        for p in ax.patches:
            # Format the height as integer
            height = int(p.get_height())  # Convert to integer to avoid decimals
            ax.annotate(f'{height}', (p.get_x() + p.get_width() / 2., p.get_height()),
                        ha='center', va='center', xytext=(0, 10), textcoords='offset points', fontsize=14)

        # Setting the labels and title using ax methods
        custom_labels = ["Transmissão + Premiação", "Publicidade e patrocínio", "Match-Day", 
                 "Sócio-torcedor", "Licenciamento da marca", "Negociação de atletas"]
        
        # Function to break labels into two lines if longer than a given number of characters
        def adjust_labels(labels, max_len=18):
            adjusted_labels = []
            for label in labels:
                if len(label) > max_len:
                    # Split the label by spaces and attempt to divide into two roughly equal parts
                    words = label.split()
                    midpoint = len(words) // 2
                    label = ' '.join(words[:midpoint]) + '\n' + ' '.join(words[midpoint:])
                adjusted_labels.append(label)
            return adjusted_labels

        # Apply the function to custom_labels
        adjusted_custom_labels = adjust_labels(custom_labels)

        ax.set_xticklabels(adjusted_custom_labels, fontsize=19, rotation=0)
        ax.set_title('Receitas', fontsize=24, fontweight="bold")
        ax.tick_params(axis='y', labelsize=16)
        ax.legend(bbox_to_anchor=(0.5, -0.1), loc='upper center', ncol=5, fontsize=18, frameon=False)
        ax.set_ylabel('Receitas (em R$ milhões, em moeda constante)', fontsize=18)
        ax.spines['right'].set_visible(False)
        ax.spines['top'].set_visible(False)
        note_text = "Notas:"
        note_text_1 = "1. O clube informa a Receita de Premiação em conjunto com a Receita de Transmissão."
        ax.text(0, -0.25, note_text, transform=ax.transAxes, ha="left", fontsize=18, color="black")
        ax.text(0, -0.31, note_text_1, transform=ax.transAxes, ha="left", fontsize=18, color="black")

        # Adjust layout and show plot
        fig.tight_layout()
        st.pyplot(fig)        

######################################################################################################################
######################################################################################################################
        st.markdown("---")

        # Selecting the rows 1 to 6 and columns 76 to 81
        selected_data = df3.iloc[np.r_[10, 13, 11], 36:41]
        selected_data = selected_data.round(0)
        selected_data.columns = [2024, 2023, 2022, 2021, 2020]

        # Create a colormap of Blues
        cmap = plt.get_cmap('Blues')
        colors = cmap(np.linspace(1, 0.3, num=len(selected_data.columns)))

        # Creating a figure and a set of subplots
        fig, ax = plt.subplots(figsize=(15, 10))

        # Plotting using ax
        selected_data.plot(kind='bar', ax=ax, width=0.9, color=colors)

        # Adding value labels on top of each bar
        for p in ax.patches:
            # Format the height as integer
            height = int(p.get_height())  # Convert to integer to avoid decimals
            ax.annotate(f'{height}', (p.get_x() + p.get_width() / 2., p.get_height()),
                        ha='center', va='center', xytext=(0, 10), textcoords='offset points', fontsize=16)

        # Setting the labels and title using ax methods
        custom_labels = ["Folha do futebol (Pessoal + Imagem)", "Aquisições de atletas", "Resultado"]
        
        # Function to break labels into two lines if longer than a given number of characters
        def adjust_labels(labels, max_len=18):
            adjusted_labels = []
            for label in labels:
                if len(label) > max_len:
                    # Split the label by spaces and attempt to divide into two roughly equal parts
                    words = label.split()
                    midpoint = len(words) // 2
                    label = ' '.join(words[:midpoint]) + '\n' + ' '.join(words[midpoint:])
                adjusted_labels.append(label)
            return adjusted_labels

        # Apply the function to custom_labels
        adjusted_custom_labels = adjust_labels(custom_labels)

        ax.set_xticklabels(adjusted_custom_labels, fontsize=19, rotation=0)
        ax.set_title('Despesas', fontsize=24, fontweight="bold")
        ax.tick_params(axis='y', labelsize=16)
        ax.legend(bbox_to_anchor=(0.5, -0.1), loc='upper center', ncol=5, fontsize=18, frameon=False)
        ax.set_ylabel('Despesas (em R$ milhões, em moeda constante)', fontsize=18)
        ax.spines['right'].set_visible(False)
        ax.spines['top'].set_visible(False)

        # Adjust layout and show plot
        fig.tight_layout()
        st.pyplot(fig)        

######################################################################################################################
######################################################################################################################

        st.markdown("<h4 style='text-align: center;  color: black;'>Histórico de Índices</b></h4>", unsafe_allow_html=True)
        st.markdown("<h5 style='text-align: center;  color: black;'>(em moeda constante)<br></b></h5>", unsafe_allow_html=True)
        st.markdown("---")

        # Selecting the rows 1 to 6 and columns 76 to 81
        selected_data = df3.iloc[np.r_[22, 24, 27], 36:41]
        selected_data = selected_data.round(1)
        selected_data.columns = [2024, 2023, 2022, 2021, 2020]

        # Create a colormap of Blues
        cmap = plt.get_cmap('Blues')
        colors = cmap(np.linspace(1, 0.3, num=len(selected_data.columns)))

        # Creating a figure and a set of subplots
        fig, ax = plt.subplots(figsize=(15, 10))

        # Plotting using ax
        selected_data.plot(kind='bar', ax=ax, width=0.9, color=colors)

        for p in ax.patches:
            # Format the height with one decimal place
            height = p.get_height()
            ax.annotate(f'{height:.1f}', (p.get_x() + p.get_width() / 2., height),
                        ha='center', va='center', xytext=(0, 10), textcoords='offset points', fontsize=16)

        # Setting the labels and title using ax methods
        custom_labels = ["Rec Operacional / Base Torcedores", 
                         "Rec Venda Jogadores / Pontuação Série A",
                         "Rec Operacional / Pontuação Série A"]
        
        def adjust_labels(labels, max_len=18):
            adjusted_labels = []
            for label in labels:
                if len(label) > max_len:
                    # Find the index of the slash in the label
                    slash_index = label.find('/')
                    if slash_index != -1:
                        # Split the label right after the slash and keep the slash at the end of the first line
                        label = label[:slash_index + 1] + '\n' + label[slash_index + 1:]
                adjusted_labels.append(label)
            return adjusted_labels

        # Apply the function to custom_labels
        adjusted_custom_labels = adjust_labels(custom_labels)

        ax.set_xticklabels(adjusted_custom_labels, fontsize=16, rotation=0)
        #ax.set_title('Índices', fontsize=24, fontweight="bold")
        ax.tick_params(axis='y', labelsize=16)
        ax.legend(bbox_to_anchor=(0.5, -0.1), loc='upper center', ncol=5, fontsize=18, frameon=False)
        #ax.set_ylabel('Despesas (em R$ milhões, em moeda constante)', fontsize=18)
        ax.spines['right'].set_visible(False)
        ax.spines['top'].set_visible(False)
        # Adding a note below the graph using the axes
        note_text = "Nota: As variáveis estão, respectivamente, em Reais/torcedor"
        note_text_2 = "e milhões/ponto conquistado nas duas últimas."
        ax.text(0, -0.25, note_text, transform=ax.transAxes, ha="left", fontsize=18, color="black")
        ax.text(0, -0.31, note_text_2, transform=ax.transAxes, ha="left", fontsize=18, color="black")

        # Adjust layout and show plot
        fig.tight_layout()
        st.pyplot(fig)        

######################################################################################################################

        st.markdown("---")

        # Selecting the rows 1 to 6 and columns 76 to 81
        selected_data = df3.iloc[np.r_[26, 31, 33], 36:41]
        selected_data = selected_data.round(2)
        selected_data.columns = [2024, 2023, 2022, 2021, 2020]

        # Create a colormap of Blues
        cmap = plt.get_cmap('Blues')
        colors = cmap(np.linspace(1, 0.3, num=len(selected_data.columns)))

        # Creating a figure and a set of subplots
        fig, ax = plt.subplots(figsize=(15, 10))

        # Plotting using ax
        selected_data.plot(kind='bar', ax=ax, width=0.95, color=colors)

        for p in ax.patches:
            # Format the height with one decimal place
            height = p.get_height()
            ax.annotate(f'{height:.2f}', (p.get_x() + p.get_width() / 2., height),
                        ha='center', va='center', xytext=(0, 10), textcoords='offset points', fontsize=14)

        # Setting the labels and title using ax methods
        custom_labels = ["Folha do futebol / Pontuação Série A", 
                         "Dívida / Rec Operacional", 
                         "Folha futebol + Compra jogadores / Rec Operacional"]
        
        def adjust_labels(labels, max_len=18):
            adjusted_labels = []
            for label in labels:
                if len(label) > max_len:
                    # Find the index of the slash in the label
                    slash_index = label.find('/')
                    if slash_index != -1:
                        # Split the label right after the slash and keep the slash at the end of the first line
                        label = label[:slash_index + 1] + '\n' + label[slash_index + 1:]
                adjusted_labels.append(label)
            return adjusted_labels

        # Apply the function to custom_labels
        adjusted_custom_labels = adjust_labels(custom_labels)

        ax.set_xticklabels(adjusted_custom_labels, fontsize=16, rotation=0)
        #ax.set_title('Índices', fontsize=24, fontweight="bold")
        ax.tick_params(axis='y', labelsize=16)
        ax.legend(bbox_to_anchor=(0.5, -0.1), loc='upper center', ncol=5, fontsize=18, frameon=False)
        #ax.set_ylabel('Despesas (em R$ milhões, em moeda constante)', fontsize=18)
        ax.spines['right'].set_visible(False)
        ax.spines['top'].set_visible(False)
        # Adding a note below the graph using the axes
        note_text = "Nota: As variáveis estão, respectivamente, em milhões/ponto conquistado,"
        note_text_2 = "e % da Rec Operacional Líquida nas duas últimas."
        ax.text(0, -0.25, note_text, transform=ax.transAxes, ha="left", fontsize=18, color="black")
        ax.text(0, -0.31, note_text_2, transform=ax.transAxes, ha="left", fontsize=18, color="black")

        # Adjust layout and show plot
        fig.tight_layout()
        st.pyplot(fig)        

######################################################################################################################
######################################################################################################################
######################################################################################################################
######################################################################################################################

    if clube == "Cuiabá":
        st.markdown("<h4 style='text-align: center;  color: black;'>Histórico de Receitas e Despesas</b></h4>", unsafe_allow_html=True)
        st.markdown("<h5 style='text-align: center;  color: black;'>(em R$ milhões, em moeda constante)<br></b></h5>", unsafe_allow_html=True)
        st.markdown("---")

        # Selecting the rows 1 to 6 and columns 76 to 81
        selected_data = df3.iloc[np.r_[1:4], 41:46]
        selected_data = selected_data.round(0)
        selected_data.columns = [2024, 2023, 2022, 2021, 2020]

        # Create a colormap of greens
        cmap = plt.get_cmap('Wistia')
        colors = cmap(np.linspace(1, 0.3, num=len(selected_data.columns)))

        # Creating a figure and a set of subplots
        fig, ax = plt.subplots(figsize=(15, 10))

        # Plotting using ax
        selected_data.plot(kind='bar', ax=ax, width=0.9, color=colors)

        # Adding value labels on top of each bar
        for p in ax.patches:
            # Format the height as integer
            height = int(p.get_height())  # Convert to integer to avoid decimals
            ax.annotate(f'{height}', (p.get_x() + p.get_width() / 2., p.get_height()),
                        ha='center', va='center', xytext=(0, 10), textcoords='offset points', fontsize=14)

        # Setting the labels and title using ax methods
        custom_labels = ["Transmissão + Premiação", "Publicidade e patrocínio", "Match-Day", 
                 ]
        
        # Function to break labels into two lines if longer than a given number of characters
        def adjust_labels(labels, max_len=18):
            adjusted_labels = []
            for label in labels:
                if len(label) > max_len:
                    # Split the label by spaces and attempt to divide into two roughly equal parts
                    words = label.split()
                    midpoint = len(words) // 2
                    label = ' '.join(words[:midpoint]) + '\n' + ' '.join(words[midpoint:])
                adjusted_labels.append(label)
            return adjusted_labels

        # Apply the function to custom_labels
        adjusted_custom_labels = adjust_labels(custom_labels)

        ax.set_xticklabels(adjusted_custom_labels, fontsize=19, rotation=0)
        ax.set_title('Receitas', fontsize=24, fontweight="bold")
        ax.tick_params(axis='y', labelsize=16)
        ax.legend(bbox_to_anchor=(0.5, -0.1), loc='upper center', ncol=5, fontsize=18, frameon=False)
        ax.set_ylabel('Receitas (em R$ milhões, em moeda constante)', fontsize=18)
        ax.spines['right'].set_visible(False)
        ax.spines['top'].set_visible(False)
        note_text = "Notas:"
        note_text_1 = "1. O clube informa a Receita de Premiação em conjunto com a Receita de Transmissão."
        note_text_2 = "2. O clube não informa com clareza a Receita com Sócio-Torcedor."
        note_text_3 = "3. O clube não informa com clareza a Receita com Licenciamento da Marca."
        note_text_4 = "4. O clube não informa com clareza a Receita com Negociação de Atletas."
        ax.text(0, -0.25, note_text, transform=ax.transAxes, ha="left", fontsize=18, color="black")
        ax.text(0, -0.31, note_text_1, transform=ax.transAxes, ha="left", fontsize=18, color="black")
        ax.text(0, -0.37, note_text_2, transform=ax.transAxes, ha="left", fontsize=18, color="black")
        ax.text(0, -0.43, note_text_3, transform=ax.transAxes, ha="left", fontsize=18, color="black")
        ax.text(0, -0.49, note_text_4, transform=ax.transAxes, ha="left", fontsize=18, color="black")

        # Adjust layout and show plot
        fig.tight_layout()
        st.pyplot(fig)        

######################################################################################################################
######################################################################################################################
        st.markdown("---")

        # Selecting the rows 1 to 6 and columns 76 to 81
        selected_data = df3.iloc[np.r_[10, 13, 11], 41:46]
        selected_data = selected_data.round(0)
        selected_data.columns = [2024, 2023, 2022, 2021, 2020]

        # Create a colormap of Blues
        cmap = plt.get_cmap('Wistia')
        colors = cmap(np.linspace(1, 0.3, num=len(selected_data.columns)))

        # Creating a figure and a set of subplots
        fig, ax = plt.subplots(figsize=(15, 10))

        # Plotting using ax
        selected_data.plot(kind='bar', ax=ax, width=0.9, color=colors)

        # Adding value labels on top of each bar
        for p in ax.patches:
            # Format the height as integer
            height = int(p.get_height())  # Convert to integer to avoid decimals
            ax.annotate(f'{height}', (p.get_x() + p.get_width() / 2., p.get_height()),
                        ha='center', va='center', xytext=(0, 10), textcoords='offset points', fontsize=16)

        # Setting the labels and title using ax methods
        custom_labels = ["Folha do futebol (Pessoal + Imagem)", "Aquisições de atletas", "Resultado"]
        
        # Function to break labels into two lines if longer than a given number of characters
        def adjust_labels(labels, max_len=18):
            adjusted_labels = []
            for label in labels:
                if len(label) > max_len:
                    # Split the label by spaces and attempt to divide into two roughly equal parts
                    words = label.split()
                    midpoint = len(words) // 2
                    label = ' '.join(words[:midpoint]) + '\n' + ' '.join(words[midpoint:])
                adjusted_labels.append(label)
            return adjusted_labels

        # Apply the function to custom_labels
        adjusted_custom_labels = adjust_labels(custom_labels)

        ax.set_xticklabels(adjusted_custom_labels, fontsize=19, rotation=0)
        ax.set_title('Despesas', fontsize=24, fontweight="bold")
        ax.tick_params(axis='y', labelsize=16)
        ax.legend(bbox_to_anchor=(0.5, -0.1), loc='upper center', ncol=5, fontsize=18, frameon=False)
        ax.set_ylabel('Despesas (em R$ milhões, em moeda constante)', fontsize=18)
        ax.spines['right'].set_visible(False)
        ax.spines['top'].set_visible(False)
        note_text = "Notas:"
        note_text_1 = "1. O clube não informa com clareza a Aquisição de Atletas."
        ax.text(0, -0.25, note_text, transform=ax.transAxes, ha="left", fontsize=18, color="black")
        ax.text(0, -0.31, note_text_1, transform=ax.transAxes, ha="left", fontsize=18, color="black")

        # Adjust layout and show plot
        fig.tight_layout()
        st.pyplot(fig)        

######################################################################################################################
######################################################################################################################

        st.markdown("<h4 style='text-align: center;  color: black;'>Histórico de Índices</b></h4>", unsafe_allow_html=True)
        st.markdown("<h5 style='text-align: center;  color: black;'>(em moeda constante)<br></b></h5>", unsafe_allow_html=True)
        st.markdown("---")

        # Selecting the rows 1 to 6 and columns 76 to 81
        selected_data = df3.iloc[np.r_[22, 24, 27], 41:46]
        selected_data = selected_data.round(1)
        selected_data.columns = [2024, 2023, 2022, 2021, 2020]

        # Create a colormap of Blues
        cmap = plt.get_cmap('Wistia')
        colors = cmap(np.linspace(1, 0.3, num=len(selected_data.columns)))

        # Creating a figure and a set of subplots
        fig, ax = plt.subplots(figsize=(15, 10))

        # Plotting using ax
        selected_data.plot(kind='bar', ax=ax, width=0.9, color=colors)

        for p in ax.patches:
            # Format the height with one decimal place
            height = p.get_height()
            ax.annotate(f'{height:.1f}', (p.get_x() + p.get_width() / 2., height),
                        ha='center', va='center', xytext=(0, 10), textcoords='offset points', fontsize=16)

        # Setting the labels and title using ax methods
        custom_labels = ["Rec Operacional / Base Torcedores", 
                         "Rec Venda Jogadores / Pontuação Série A",
                         "Rec Operacional / Pontuação Série A"]
        
        def adjust_labels(labels, max_len=18):
            adjusted_labels = []
            for label in labels:
                if len(label) > max_len:
                    # Find the index of the slash in the label
                    slash_index = label.find('/')
                    if slash_index != -1:
                        # Split the label right after the slash and keep the slash at the end of the first line
                        label = label[:slash_index + 1] + '\n' + label[slash_index + 1:]
                adjusted_labels.append(label)
            return adjusted_labels

        # Apply the function to custom_labels
        adjusted_custom_labels = adjust_labels(custom_labels)

        ax.set_xticklabels(adjusted_custom_labels, fontsize=16, rotation=0)
        #ax.set_title('Índices', fontsize=24, fontweight="bold")
        ax.tick_params(axis='y', labelsize=16)
        ax.legend(bbox_to_anchor=(0.5, -0.1), loc='upper center', ncol=5, fontsize=18, frameon=False)
        #ax.set_ylabel('Despesas (em R$ milhões, em moeda constante)', fontsize=18)
        ax.spines['right'].set_visible(False)
        ax.spines['top'].set_visible(False)
        # Adding a note below the graph using the axes
        note_text = "Nota: As variáveis estão, respectivamente, em Reais/torcedor"
        note_text_2 = "e milhões/ponto conquistado nas duas últimas."
        ax.text(0, -0.25, note_text, transform=ax.transAxes, ha="left", fontsize=18, color="black")
        ax.text(0, -0.31, note_text_2, transform=ax.transAxes, ha="left", fontsize=18, color="black")

        # Adjust layout and show plot
        fig.tight_layout()
        st.pyplot(fig)        

######################################################################################################################

        st.markdown("---")

        # Selecting the rows 1 to 6 and columns 76 to 81
        selected_data = df3.iloc[np.r_[26, 31, 33], 41:46]
        selected_data = selected_data.round(2)
        selected_data.columns = [2024, 2023, 2022, 2021, 2020]

        # Create a colormap of Blues
        cmap = plt.get_cmap('Wistia')
        colors = cmap(np.linspace(1, 0.3, num=len(selected_data.columns)))

        # Creating a figure and a set of subplots
        fig, ax = plt.subplots(figsize=(15, 10))

        # Plotting using ax
        selected_data.plot(kind='bar', ax=ax, width=0.95, color=colors)

        for p in ax.patches:
            # Format the height with one decimal place
            height = p.get_height()
            ax.annotate(f'{height:.2f}', (p.get_x() + p.get_width() / 2., height),
                        ha='center', va='center', xytext=(0, 10), textcoords='offset points', fontsize=14)

        # Setting the labels and title using ax methods
        custom_labels = ["Folha do futebol / Pontuação Série A", 
                         "Dívida / Rec Operacional", 
                         "Folha futebol + Compra jogadores / Rec Operacional"]
        
        def adjust_labels(labels, max_len=18):
            adjusted_labels = []
            for label in labels:
                if len(label) > max_len:
                    # Find the index of the slash in the label
                    slash_index = label.find('/')
                    if slash_index != -1:
                        # Split the label right after the slash and keep the slash at the end of the first line
                        label = label[:slash_index + 1] + '\n' + label[slash_index + 1:]
                adjusted_labels.append(label)
            return adjusted_labels

        # Apply the function to custom_labels
        adjusted_custom_labels = adjust_labels(custom_labels)

        ax.set_xticklabels(adjusted_custom_labels, fontsize=16, rotation=0)
        #ax.set_title('Índices', fontsize=24, fontweight="bold")
        ax.tick_params(axis='y', labelsize=16)
        ax.legend(bbox_to_anchor=(0.5, -0.1), loc='upper center', ncol=5, fontsize=18, frameon=False)
        #ax.set_ylabel('Despesas (em R$ milhões, em moeda constante)', fontsize=18)
        ax.spines['right'].set_visible(False)
        ax.spines['top'].set_visible(False)
        # Adding a note below the graph using the axes
        note_text = "Nota: As variáveis estão, respectivamente, em milhões/ponto conquistado,"
        note_text_2 = "e % da Rec Operacional Líquida nas duas últimas."
        ax.text(0, -0.25, note_text, transform=ax.transAxes, ha="left", fontsize=18, color="black")
        ax.text(0, -0.31, note_text_2, transform=ax.transAxes, ha="left", fontsize=18, color="black")

        # Adjust layout and show plot
        fig.tight_layout()
        st.pyplot(fig)        

######################################################################################################################
######################################################################################################################
######################################################################################################################
######################################################################################################################

    if clube == "Flamengo":
        st.markdown("<h4 style='text-align: center;  color: black;'>Histórico de Receitas e Despesas</b></h4>", unsafe_allow_html=True)
        st.markdown("<h5 style='text-align: center;  color: black;'>(em R$ milhões, em moeda constante)<br></b></h5>", unsafe_allow_html=True)
        st.markdown("---")

        # Selecting the rows 1 to 6 and columns 76 to 81
        selected_data = df3.iloc[np.r_[28, 2:7, 8], 46:51]
        selected_data = selected_data.round(0)
        selected_data.columns = [2024, 2023, 2022, 2021, 2020]

        # Create a colormap of reds
        cmap = plt.get_cmap('Reds')
        colors = cmap(np.linspace(1, 0.3, num=len(selected_data.columns)))

        # Creating a figure and a set of subplots
        fig, ax = plt.subplots(figsize=(15, 10))

        # Plotting using ax
        selected_data.plot(kind='bar', ax=ax, width=0.9, color=colors)

        # Adding value labels on top of each bar
        for p in ax.patches:
            # Format the height as integer
            height = int(p.get_height())  # Convert to integer to avoid decimals
            ax.annotate(f'{height}', (p.get_x() + p.get_width() / 2., p.get_height()),
                        ha='center', va='center', xytext=(0, 10), textcoords='offset points', fontsize=14)

        # Setting the labels and title using ax methods
        custom_labels = ["Direitos de transmissão", "Publicidade e patrocínio", "Match-Day", 
                 "Sócio-torcedor", "Premiações", "Licenciamento da marca", "Negociação de atletas"]
        
        # Function to break labels into two lines if longer than a given number of characters
        def adjust_labels(labels, max_len=18):
            adjusted_labels = []
            for label in labels:
                if len(label) > max_len:
                    # Split the label by spaces and attempt to divide into two roughly equal parts
                    words = label.split()
                    midpoint = len(words) // 2
                    label = ' '.join(words[:midpoint]) + '\n' + ' '.join(words[midpoint:])
                adjusted_labels.append(label)
            return adjusted_labels

        # Apply the function to custom_labels
        adjusted_custom_labels = adjust_labels(custom_labels)

        ax.set_xticklabels(adjusted_custom_labels, fontsize=19, rotation=0)
        ax.set_title('Receitas', fontsize=24, fontweight="bold")
        ax.tick_params(axis='y', labelsize=16)
        ax.legend(bbox_to_anchor=(0.5, -0.1), loc='upper center', ncol=5, fontsize=18, frameon=False)
        ax.set_ylabel('Receitas (em R$ milhões, em moeda constante)', fontsize=18)
        ax.spines['right'].set_visible(False)
        ax.spines['top'].set_visible(False)

        # Adjust layout and show plot
        fig.tight_layout()
        st.pyplot(fig)        

######################################################################################################################
######################################################################################################################
        st.markdown("---")

        # Selecting the rows 1 to 6 and columns 76 to 81
        selected_data = df3.iloc[np.r_[10, 13, 11], 46:51]
        selected_data = selected_data.round(0)
        selected_data.columns = [2024, 2023, 2022, 2021, 2020]

        # Create a colormap of reds
        cmap = plt.get_cmap('Reds')
        colors = cmap(np.linspace(1, 0.3, num=len(selected_data.columns)))

        # Creating a figure and a set of subplots
        fig, ax = plt.subplots(figsize=(15, 10))

        # Plotting using ax
        selected_data.plot(kind='bar', ax=ax, width=0.9, color=colors)

        # Adding value labels on top of each bar
        for p in ax.patches:
            # Format the height as integer
            height = int(p.get_height())  # Convert to integer to avoid decimals
            ax.annotate(f'{height}', (p.get_x() + p.get_width() / 2., p.get_height()),
                        ha='center', va='center', xytext=(0, 10), textcoords='offset points', fontsize=16)

        # Setting the labels and title using ax methods
        custom_labels = ["Folha do futebol (Pessoal + Imagem)", "Aquisições de atletas", "Resultado"]
        
        # Function to break labels into two lines if longer than a given number of characters
        def adjust_labels(labels, max_len=18):
            adjusted_labels = []
            for label in labels:
                if len(label) > max_len:
                    # Split the label by spaces and attempt to divide into two roughly equal parts
                    words = label.split()
                    midpoint = len(words) // 2
                    label = ' '.join(words[:midpoint]) + '\n' + ' '.join(words[midpoint:])
                adjusted_labels.append(label)
            return adjusted_labels

        # Apply the function to custom_labels
        adjusted_custom_labels = adjust_labels(custom_labels)

        ax.set_xticklabels(adjusted_custom_labels, fontsize=19, rotation=0)
        ax.set_title('Despesas', fontsize=24, fontweight="bold")
        ax.tick_params(axis='y', labelsize=16)
        ax.legend(bbox_to_anchor=(0.5, -0.1), loc='upper center', ncol=5, fontsize=18, frameon=False)
        ax.set_ylabel('Despesas (em R$ milhões, em moeda constante)', fontsize=18)
        ax.spines['right'].set_visible(False)
        ax.spines['top'].set_visible(False)

        # Adjust layout and show plot
        fig.tight_layout()
        st.pyplot(fig)        

######################################################################################################################
######################################################################################################################

        st.markdown("<h4 style='text-align: center;  color: black;'>Histórico de Índices</b></h4>", unsafe_allow_html=True)
        st.markdown("<h5 style='text-align: center;  color: black;'>(em moeda constante)<br></b></h5>", unsafe_allow_html=True)
        st.markdown("---")

        # Selecting the rows 1 to 6 and columns 76 to 81
        selected_data = df3.iloc[np.r_[22, 24, 27], 46:51]
        selected_data = selected_data.round(1)
        selected_data.columns = [2024, 2023, 2022, 2021, 2020]

        # Create a colormap of reds
        cmap = plt.get_cmap('Reds')
        colors = cmap(np.linspace(1, 0.3, num=len(selected_data.columns)))

        # Creating a figure and a set of subplots
        fig, ax = plt.subplots(figsize=(15, 10))

        # Plotting using ax
        selected_data.plot(kind='bar', ax=ax, width=0.9, color=colors)

        for p in ax.patches:
            # Format the height with one decimal place
            height = p.get_height()
            ax.annotate(f'{height:.1f}', (p.get_x() + p.get_width() / 2., height),
                        ha='center', va='center', xytext=(0, 10), textcoords='offset points', fontsize=16)

        # Setting the labels and title using ax methods
        custom_labels = ["Rec Operacional / Base Torcedores", 
                         "Rec Venda Jogadores / Pontuação Série A",
                         "Rec Operacional / Pontuação Série A"]
        
        def adjust_labels(labels, max_len=18):
            adjusted_labels = []
            for label in labels:
                if len(label) > max_len:
                    # Find the index of the slash in the label
                    slash_index = label.find('/')
                    if slash_index != -1:
                        # Split the label right after the slash and keep the slash at the end of the first line
                        label = label[:slash_index + 1] + '\n' + label[slash_index + 1:]
                adjusted_labels.append(label)
            return adjusted_labels

        # Apply the function to custom_labels
        adjusted_custom_labels = adjust_labels(custom_labels)

        ax.set_xticklabels(adjusted_custom_labels, fontsize=16, rotation=0)
        #ax.set_title('Índices', fontsize=24, fontweight="bold")
        ax.tick_params(axis='y', labelsize=16)
        ax.legend(bbox_to_anchor=(0.5, -0.1), loc='upper center', ncol=5, fontsize=18, frameon=False)
        #ax.set_ylabel('Despesas (em R$ milhões, em moeda constante)', fontsize=18)
        ax.spines['right'].set_visible(False)
        ax.spines['top'].set_visible(False)
        # Adding a note below the graph using the axes
        note_text = "Nota: As variáveis estão, respectivamente, em Reais/torcedor"
        note_text_2 = "e milhões/ponto conquistado nas duas últimas."
        ax.text(0, -0.25, note_text, transform=ax.transAxes, ha="left", fontsize=18, color="black")
        ax.text(0, -0.31, note_text_2, transform=ax.transAxes, ha="left", fontsize=18, color="black")

        # Adjust layout and show plot
        fig.tight_layout()
        st.pyplot(fig)        

######################################################################################################################

        st.markdown("---")

        # Selecting the rows 1 to 6 and columns 76 to 81
        selected_data = df3.iloc[np.r_[25:27, 31, 33], 46:51]
        selected_data = selected_data.round(2)
        selected_data.columns = [2024, 2023, 2022, 2021, 2020]

        # Create a colormap of reds
        cmap = plt.get_cmap('Reds')
        colors = cmap(np.linspace(1, 0.3, num=len(selected_data.columns)))

        # Creating a figure and a set of subplots
        fig, ax = plt.subplots(figsize=(15, 10))

        # Plotting using ax
        selected_data.plot(kind='bar', ax=ax, width=0.95, color=colors)

        for p in ax.patches:
            # Format the height with one decimal place
            height = p.get_height()
            ax.annotate(f'{height:.2f}', (p.get_x() + p.get_width() / 2., height),
                        ha='center', va='center', xytext=(0, 10), textcoords='offset points', fontsize=14)

        # Setting the labels and title using ax methods
        custom_labels = ["Receita com Premiação / Folha do Futebol",
                         "Folha do futebol / Pontuação Série A", 
                         "Dívida / Rec Operacional", 
                         "Folha futebol + Compra jogadores / Rec Operacional"]
        
        def adjust_labels(labels, max_len=18):
            adjusted_labels = []
            for label in labels:
                if len(label) > max_len:
                    # Find the index of the slash in the label
                    slash_index = label.find('/')
                    if slash_index != -1:
                        # Split the label right after the slash and keep the slash at the end of the first line
                        label = label[:slash_index + 1] + '\n' + label[slash_index + 1:]
                adjusted_labels.append(label)
            return adjusted_labels

        # Apply the function to custom_labels
        adjusted_custom_labels = adjust_labels(custom_labels)

        ax.set_xticklabels(adjusted_custom_labels, fontsize=16, rotation=0)
        #ax.set_title('Índices', fontsize=24, fontweight="bold")
        ax.tick_params(axis='y', labelsize=16)
        ax.legend(bbox_to_anchor=(0.5, -0.1), loc='upper center', ncol=5, fontsize=18, frameon=False)
        #ax.set_ylabel('Despesas (em R$ milhões, em moeda constante)', fontsize=18)
        ax.spines['right'].set_visible(False)
        ax.spines['top'].set_visible(False)
        # Adding a note below the graph using the axes
        note_text = "Nota: As variáveis estão, respectivamente, em % da Folha do futebol, milhões/ponto conquistado,"
        note_text_2 = "e % da Rec Operacional Líquida nas duas últimas."
        ax.text(0, -0.25, note_text, transform=ax.transAxes, ha="left", fontsize=18, color="black")
        ax.text(0, -0.31, note_text_2, transform=ax.transAxes, ha="left", fontsize=18, color="black")

        # Adjust layout and show plot
        fig.tight_layout()
        st.pyplot(fig)        

######################################################################################################################
######################################################################################################################
######################################################################################################################
######################################################################################################################

    if clube == "Fluminense":
        st.markdown("<h4 style='text-align: center;  color: black;'>Histórico de Receitas e Despesas</b></h4>", unsafe_allow_html=True)
        st.markdown("<h5 style='text-align: center;  color: black;'>(em R$ milhões, em moeda constante)<br></b></h5>", unsafe_allow_html=True)
        st.markdown("---")

        # Selecting the rows 1 to 6 and columns 76 to 81
        selected_data = df3.iloc[np.r_[1:5, 8], 51:56]
        selected_data = selected_data.round(0)
        selected_data.columns = [2024, 2023, 2022, 2021, 2020]

        # Create a colormap of reds
        cmap = plt.get_cmap('Reds')
        colors = cmap(np.linspace(1, 0.3, num=len(selected_data.columns)))

        # Creating a figure and a set of subplots
        fig, ax = plt.subplots(figsize=(15, 10))

        # Plotting using ax
        selected_data.plot(kind='bar', ax=ax, width=0.9, color=colors)

        # Adding value labels on top of each bar
        for p in ax.patches:
            # Format the height as integer
            height = int(p.get_height())  # Convert to integer to avoid decimals
            ax.annotate(f'{height}', (p.get_x() + p.get_width() / 2., p.get_height()),
                        ha='center', va='center', xytext=(0, 10), textcoords='offset points', fontsize=14)

        # Setting the labels and title using ax methods
        custom_labels = ["Transmissão + Premiação", "Publicidade e patrocínio", "Match-Day", 
                 "Sócio-torcedor", "Negociação de atletas"]
        
        # Function to break labels into two lines if longer than a given number of characters
        def adjust_labels(labels, max_len=18):
            adjusted_labels = []
            for label in labels:
                if len(label) > max_len:
                    # Split the label by spaces and attempt to divide into two roughly equal parts
                    words = label.split()
                    midpoint = len(words) // 2
                    label = ' '.join(words[:midpoint]) + '\n' + ' '.join(words[midpoint:])
                adjusted_labels.append(label)
            return adjusted_labels

        # Apply the function to custom_labels
        adjusted_custom_labels = adjust_labels(custom_labels)

        ax.set_xticklabels(adjusted_custom_labels, fontsize=19, rotation=0)
        ax.set_title('Receitas', fontsize=24, fontweight="bold")
        ax.tick_params(axis='y', labelsize=16)
        ax.legend(bbox_to_anchor=(0.5, -0.1), loc='upper center', ncol=5, fontsize=18, frameon=False)
        ax.set_ylabel('Receitas (em R$ milhões, em moeda constante)', fontsize=18)
        ax.spines['right'].set_visible(False)
        ax.spines['top'].set_visible(False)
        note_text = "Notas:"
        note_text_1 = "1. O clube informa a Receita de Premiação em conjunto com a Receita de Transmissão."
        note_text_2 = "2. O clube não informa com clareza a Receita com Licenciamento da Marca."
        ax.text(0, -0.25, note_text, transform=ax.transAxes, ha="left", fontsize=18, color="black")
        ax.text(0, -0.31, note_text_1, transform=ax.transAxes, ha="left", fontsize=18, color="black")
        ax.text(0, -0.37, note_text_2, transform=ax.transAxes, ha="left", fontsize=18, color="black")

        # Adjust layout and show plot
        fig.tight_layout()
        st.pyplot(fig)        

######################################################################################################################
######################################################################################################################
        st.markdown("---")

        # Selecting the rows 1 to 6 and columns 76 to 81
        selected_data = df3.iloc[np.r_[10, 13, 11], 51:56]
        selected_data = selected_data.round(0)
        selected_data.columns = [2024, 2023, 2022, 2021, 2020]

        # Create a colormap of Reds
        cmap = plt.get_cmap('Reds')
        colors = cmap(np.linspace(1, 0.3, num=len(selected_data.columns)))

        # Creating a figure and a set of subplots
        fig, ax = plt.subplots(figsize=(15, 10))

        # Plotting using ax
        selected_data.plot(kind='bar', ax=ax, width=0.9, color=colors)

        # Adding value labels on top of each bar
        for p in ax.patches:
            # Format the height as integer
            height = int(p.get_height())  # Convert to integer to avoid decimals
            ax.annotate(f'{height}', (p.get_x() + p.get_width() / 2., p.get_height()),
                        ha='center', va='center', xytext=(0, 10), textcoords='offset points', fontsize=16)

        # Setting the labels and title using ax methods
        custom_labels = ["Folha do futebol (Pessoal + Imagem)", "Aquisições de atletas", "Resultado"]
        
        # Function to break labels into two lines if longer than a given number of characters
        def adjust_labels(labels, max_len=18):
            adjusted_labels = []
            for label in labels:
                if len(label) > max_len:
                    # Split the label by spaces and attempt to divide into two roughly equal parts
                    words = label.split()
                    midpoint = len(words) // 2
                    label = ' '.join(words[:midpoint]) + '\n' + ' '.join(words[midpoint:])
                adjusted_labels.append(label)
            return adjusted_labels

        # Apply the function to custom_labels
        adjusted_custom_labels = adjust_labels(custom_labels)

        ax.set_xticklabels(adjusted_custom_labels, fontsize=19, rotation=0)
        ax.set_title('Despesas', fontsize=24, fontweight="bold")
        ax.tick_params(axis='y', labelsize=16)
        ax.legend(bbox_to_anchor=(0.5, -0.1), loc='upper center', ncol=5, fontsize=18, frameon=False)
        ax.set_ylabel('Despesas (em R$ milhões, em moeda constante)', fontsize=18)
        ax.spines['right'].set_visible(False)
        ax.spines['top'].set_visible(False)

        # Adjust layout and show plot
        fig.tight_layout()
        st.pyplot(fig)        

######################################################################################################################
######################################################################################################################

        st.markdown("<h4 style='text-align: center;  color: black;'>Histórico de Índices</b></h4>", unsafe_allow_html=True)
        st.markdown("<h5 style='text-align: center;  color: black;'>(em moeda constante)<br></b></h5>", unsafe_allow_html=True)
        st.markdown("---")

        # Selecting the rows 1 to 6 and columns 76 to 81
        selected_data = df3.iloc[np.r_[22, 24, 27], 51:56]
        selected_data = selected_data.round(1)
        selected_data.columns = [2024, 2023, 2022, 2021, 2020]

        # Create a colormap of Reds
        cmap = plt.get_cmap('Reds')
        colors = cmap(np.linspace(1, 0.3, num=len(selected_data.columns)))

        # Creating a figure and a set of subplots
        fig, ax = plt.subplots(figsize=(15, 10))

        # Plotting using ax
        selected_data.plot(kind='bar', ax=ax, width=0.9, color=colors)

        for p in ax.patches:
            # Format the height with one decimal place
            height = p.get_height()
            ax.annotate(f'{height:.1f}', (p.get_x() + p.get_width() / 2., height),
                        ha='center', va='center', xytext=(0, 10), textcoords='offset points', fontsize=16)

        # Setting the labels and title using ax methods
        custom_labels = ["Rec Operacional / Base Torcedores", 
                         "Rec Venda Jogadores / Pontuação Série A",
                         "Rec Operacional / Pontuação Série A"]
        
        def adjust_labels(labels, max_len=18):
            adjusted_labels = []
            for label in labels:
                if len(label) > max_len:
                    # Find the index of the slash in the label
                    slash_index = label.find('/')
                    if slash_index != -1:
                        # Split the label right after the slash and keep the slash at the end of the first line
                        label = label[:slash_index + 1] + '\n' + label[slash_index + 1:]
                adjusted_labels.append(label)
            return adjusted_labels

        # Apply the function to custom_labels
        adjusted_custom_labels = adjust_labels(custom_labels)

        ax.set_xticklabels(adjusted_custom_labels, fontsize=16, rotation=0)
        #ax.set_title('Índices', fontsize=24, fontweight="bold")
        ax.tick_params(axis='y', labelsize=16)
        ax.legend(bbox_to_anchor=(0.5, -0.1), loc='upper center', ncol=5, fontsize=18, frameon=False)
        #ax.set_ylabel('Despesas (em R$ milhões, em moeda constante)', fontsize=18)
        ax.spines['right'].set_visible(False)
        ax.spines['top'].set_visible(False)
        # Adding a note below the graph using the axes
        note_text = "Nota: As variáveis estão, respectivamente, em Reais/torcedor"
        note_text_2 = "e milhões/ponto conquistado nas duas últimas."
        ax.text(0, -0.25, note_text, transform=ax.transAxes, ha="left", fontsize=18, color="black")
        ax.text(0, -0.31, note_text_2, transform=ax.transAxes, ha="left", fontsize=18, color="black")

        # Adjust layout and show plot
        fig.tight_layout()
        st.pyplot(fig)        

######################################################################################################################

        st.markdown("---")

        # Selecting the rows 1 to 6 and columns 76 to 81
        selected_data = df3.iloc[np.r_[26, 31, 33], 51:56]
        selected_data = selected_data.round(2)
        selected_data.columns = [2024, 2023, 2022, 2021, 2020]

        # Create a colormap of Reds
        cmap = plt.get_cmap('Reds')
        colors = cmap(np.linspace(1, 0.3, num=len(selected_data.columns)))

        # Creating a figure and a set of subplots
        fig, ax = plt.subplots(figsize=(15, 10))

        # Plotting using ax
        selected_data.plot(kind='bar', ax=ax, width=0.95, color=colors)

        for p in ax.patches:
            # Format the height with one decimal place
            height = p.get_height()
            ax.annotate(f'{height:.2f}', (p.get_x() + p.get_width() / 2., height),
                        ha='center', va='center', xytext=(0, 10), textcoords='offset points', fontsize=14)

        # Setting the labels and title using ax methods
        custom_labels = ["Folha do futebol / Pontuação Série A", 
                         "Dívida / Rec Operacional", 
                         "Folha futebol + Compra jogadores / Rec Operacional"]
        
        def adjust_labels(labels, max_len=18):
            adjusted_labels = []
            for label in labels:
                if len(label) > max_len:
                    # Find the index of the slash in the label
                    slash_index = label.find('/')
                    if slash_index != -1:
                        # Split the label right after the slash and keep the slash at the end of the first line
                        label = label[:slash_index + 1] + '\n' + label[slash_index + 1:]
                adjusted_labels.append(label)
            return adjusted_labels

        # Apply the function to custom_labels
        adjusted_custom_labels = adjust_labels(custom_labels)

        ax.set_xticklabels(adjusted_custom_labels, fontsize=16, rotation=0)
        #ax.set_title('Índices', fontsize=24, fontweight="bold")
        ax.tick_params(axis='y', labelsize=16)
        ax.legend(bbox_to_anchor=(0.5, -0.1), loc='upper center', ncol=5, fontsize=18, frameon=False)
        #ax.set_ylabel('Despesas (em R$ milhões, em moeda constante)', fontsize=18)
        ax.spines['right'].set_visible(False)
        ax.spines['top'].set_visible(False)
        # Adding a note below the graph using the axes
        note_text = "Nota: As variáveis estão, respectivamente, em % da Folha do futebol, milhões/ponto conquistado,"
        note_text_2 = "e % da Rec Operacional Líquida nas duas últimas."
        ax.text(0, -0.25, note_text, transform=ax.transAxes, ha="left", fontsize=18, color="black")
        ax.text(0, -0.31, note_text_2, transform=ax.transAxes, ha="left", fontsize=18, color="black")

        # Adjust layout and show plot
        fig.tight_layout()
        st.pyplot(fig)        

######################################################################################################################
######################################################################################################################
######################################################################################################################
######################################################################################################################

    if clube == "Fortaleza":
        st.markdown("<h4 style='text-align: center;  color: black;'>Histórico de Receitas e Despesas</b></h4>", unsafe_allow_html=True)
        st.markdown("<h5 style='text-align: center;  color: black;'>(em R$ milhões, em moeda constante)<br></b></h5>", unsafe_allow_html=True)
        st.markdown("---")

        # Selecting the rows 1 to 6 and columns 76 to 81
        selected_data = df3.iloc[np.r_[28, 2:6, 8], 56:61]
        selected_data = selected_data.round(0)
        selected_data.columns = [2024, 2023, 2022, 2021, 2020]

        # Create a colormap of reds
        cmap = plt.get_cmap('Blues')
        colors = cmap(np.linspace(1, 0.3, num=len(selected_data.columns)))

        # Creating a figure and a set of subplots
        fig, ax = plt.subplots(figsize=(15, 10))

        # Plotting using ax
        selected_data.plot(kind='bar', ax=ax, width=0.9, color=colors)

        # Adding value labels on top of each bar
        for p in ax.patches:
            # Format the height as integer
            height = int(p.get_height())  # Convert to integer to avoid decimals
            ax.annotate(f'{height}', (p.get_x() + p.get_width() / 2., p.get_height()),
                        ha='center', va='center', xytext=(0, 10), textcoords='offset points', fontsize=14)

        # Setting the labels and title using ax methods
        custom_labels = ["Direitos de transmissão", "Publicidade e patrocínio", "Match-Day", 
                 "Sócio-torcedor", "Premiações", "Negociação de atletas"]
        
        # Function to break labels into two lines if longer than a given number of characters
        def adjust_labels(labels, max_len=18):
            adjusted_labels = []
            for label in labels:
                if len(label) > max_len:
                    # Split the label by spaces and attempt to divide into two roughly equal parts
                    words = label.split()
                    midpoint = len(words) // 2
                    label = ' '.join(words[:midpoint]) + '\n' + ' '.join(words[midpoint:])
                adjusted_labels.append(label)
            return adjusted_labels

        # Apply the function to custom_labels
        adjusted_custom_labels = adjust_labels(custom_labels)

        ax.set_xticklabels(adjusted_custom_labels, fontsize=19, rotation=0)
        ax.set_title('Receitas', fontsize=24, fontweight="bold")
        ax.tick_params(axis='y', labelsize=16)
        ax.legend(bbox_to_anchor=(0.5, -0.1), loc='upper center', ncol=5, fontsize=18, frameon=False)
        ax.set_ylabel('Receitas (em R$ milhões, em moeda constante)', fontsize=18)
        ax.spines['right'].set_visible(False)
        ax.spines['top'].set_visible(False)
        note_text = "Notas:"
        note_text_1 = "1. O clube não informa com clareza a Receita com Licenciamento da Marca."
        ax.text(0, -0.25, note_text, transform=ax.transAxes, ha="left", fontsize=18, color="black")
        ax.text(0, -0.31, note_text_1, transform=ax.transAxes, ha="left", fontsize=18, color="black")

        # Adjust layout and show plot
        fig.tight_layout()
        st.pyplot(fig)        

######################################################################################################################
######################################################################################################################
        st.markdown("---")

        # Selecting the rows 1 to 6 and columns 76 to 81
        selected_data = df3.iloc[np.r_[10, 13, 11], 56:61]
        selected_data = selected_data.round(0)
        selected_data.columns = [2024, 2023, 2022, 2021, 2020]

        # Create a colormap of Blues
        cmap = plt.get_cmap('Blues')
        colors = cmap(np.linspace(1, 0.3, num=len(selected_data.columns)))

        # Creating a figure and a set of subplots
        fig, ax = plt.subplots(figsize=(15, 10))

        # Plotting using ax
        selected_data.plot(kind='bar', ax=ax, width=0.9, color=colors)

        # Adding value labels on top of each bar
        for p in ax.patches:
            # Format the height as integer
            height = int(p.get_height())  # Convert to integer to avoid decimals
            ax.annotate(f'{height}', (p.get_x() + p.get_width() / 2., p.get_height()),
                        ha='center', va='center', xytext=(0, 10), textcoords='offset points', fontsize=16)

        # Setting the labels and title using ax methods
        custom_labels = ["Folha do futebol (Pessoal + Imagem)", "Aquisições de atletas", "Resultado"]
        
        # Function to break labels into two lines if longer than a given number of characters
        def adjust_labels(labels, max_len=18):
            adjusted_labels = []
            for label in labels:
                if len(label) > max_len:
                    # Split the label by spaces and attempt to divide into two roughly equal parts
                    words = label.split()
                    midpoint = len(words) // 2
                    label = ' '.join(words[:midpoint]) + '\n' + ' '.join(words[midpoint:])
                adjusted_labels.append(label)
            return adjusted_labels

        # Apply the function to custom_labels
        adjusted_custom_labels = adjust_labels(custom_labels)

        ax.set_xticklabels(adjusted_custom_labels, fontsize=19, rotation=0)
        ax.set_title('Despesas', fontsize=24, fontweight="bold")
        ax.tick_params(axis='y', labelsize=16)
        ax.legend(bbox_to_anchor=(0.5, -0.1), loc='upper center', ncol=5, fontsize=18, frameon=False)
        ax.set_ylabel('Despesas (em R$ milhões, em moeda constante)', fontsize=18)
        ax.spines['right'].set_visible(False)
        ax.spines['top'].set_visible(False)

        # Adjust layout and show plot
        fig.tight_layout()
        st.pyplot(fig)        

######################################################################################################################
######################################################################################################################

        st.markdown("<h4 style='text-align: center;  color: black;'>Histórico de Índices</b></h4>", unsafe_allow_html=True)
        st.markdown("<h5 style='text-align: center;  color: black;'>(em moeda constante)<br></b></h5>", unsafe_allow_html=True)
        st.markdown("---")

        # Selecting the rows 1 to 6 and columns 76 to 81
        selected_data = df3.iloc[np.r_[22, 24, 27], 56:61]
        selected_data = selected_data.round(1)
        selected_data.columns = [2024, 2023, 2022, 2021, 2020]

        # Create a colormap of Blues
        cmap = plt.get_cmap('Blues')
        colors = cmap(np.linspace(1, 0.3, num=len(selected_data.columns)))

        # Creating a figure and a set of subplots
        fig, ax = plt.subplots(figsize=(15, 10))

        # Plotting using ax
        selected_data.plot(kind='bar', ax=ax, width=0.9, color=colors)

        for p in ax.patches:
            # Format the height with one decimal place
            height = p.get_height()
            ax.annotate(f'{height:.1f}', (p.get_x() + p.get_width() / 2., height),
                        ha='center', va='center', xytext=(0, 10), textcoords='offset points', fontsize=16)

        # Setting the labels and title using ax methods
        custom_labels = ["Rec Operacional / Base Torcedores", 
                         "Rec Venda Jogadores / Pontuação Série A",
                         "Rec Operacional / Pontuação Série A"]
        
        def adjust_labels(labels, max_len=18):
            adjusted_labels = []
            for label in labels:
                if len(label) > max_len:
                    # Find the index of the slash in the label
                    slash_index = label.find('/')
                    if slash_index != -1:
                        # Split the label right after the slash and keep the slash at the end of the first line
                        label = label[:slash_index + 1] + '\n' + label[slash_index + 1:]
                adjusted_labels.append(label)
            return adjusted_labels

        # Apply the function to custom_labels
        adjusted_custom_labels = adjust_labels(custom_labels)

        ax.set_xticklabels(adjusted_custom_labels, fontsize=16, rotation=0)
        #ax.set_title('Índices', fontsize=24, fontweight="bold")
        ax.tick_params(axis='y', labelsize=16)
        ax.legend(bbox_to_anchor=(0.5, -0.1), loc='upper center', ncol=5, fontsize=18, frameon=False)
        #ax.set_ylabel('Despesas (em R$ milhões, em moeda constante)', fontsize=18)
        ax.spines['right'].set_visible(False)
        ax.spines['top'].set_visible(False)
        # Adding a note below the graph using the axes
        note_text = "Nota: As variáveis estão, respectivamente, em Reais/torcedor"
        note_text_2 = "e milhões/ponto conquistado nas duas últimas."
        ax.text(0, -0.25, note_text, transform=ax.transAxes, ha="left", fontsize=18, color="black")
        ax.text(0, -0.31, note_text_2, transform=ax.transAxes, ha="left", fontsize=18, color="black")

        # Adjust layout and show plot
        fig.tight_layout()
        st.pyplot(fig)        

######################################################################################################################

        st.markdown("---")

        # Selecting the rows 1 to 6 and columns 76 to 81
        selected_data = df3.iloc[np.r_[25:27, 31, 33], 56:61]
        selected_data = selected_data.round(2)
        selected_data.columns = [2024, 2023, 2022, 2021, 2020]

        # Create a colormap of Blues
        cmap = plt.get_cmap('Blues')
        colors = cmap(np.linspace(1, 0.3, num=len(selected_data.columns)))

        # Creating a figure and a set of subplots
        fig, ax = plt.subplots(figsize=(15, 10))

        # Plotting using ax
        selected_data.plot(kind='bar', ax=ax, width=0.95, color=colors)

        for p in ax.patches:
            # Format the height with one decimal place
            height = p.get_height()
            ax.annotate(f'{height:.2f}', (p.get_x() + p.get_width() / 2., height),
                        ha='center', va='center', xytext=(0, 10), textcoords='offset points', fontsize=14)

        # Setting the labels and title using ax methods
        custom_labels = ["Receita com Premiação / Folha do Futebol",
                         "Folha do futebol / Pontuação Série A", 
                         "Dívida / Rec Operacional", 
                         "Folha futebol + Compra jogadores / Rec Operacional"]
        
        def adjust_labels(labels, max_len=18):
            adjusted_labels = []
            for label in labels:
                if len(label) > max_len:
                    # Find the index of the slash in the label
                    slash_index = label.find('/')
                    if slash_index != -1:
                        # Split the label right after the slash and keep the slash at the end of the first line
                        label = label[:slash_index + 1] + '\n' + label[slash_index + 1:]
                adjusted_labels.append(label)
            return adjusted_labels

        # Apply the function to custom_labels
        adjusted_custom_labels = adjust_labels(custom_labels)

        ax.set_xticklabels(adjusted_custom_labels, fontsize=16, rotation=0)
        #ax.set_title('Índices', fontsize=24, fontweight="bold")
        ax.tick_params(axis='y', labelsize=16)
        ax.legend(bbox_to_anchor=(0.5, -0.1), loc='upper center', ncol=5, fontsize=18, frameon=False)
        #ax.set_ylabel('Despesas (em R$ milhões, em moeda constante)', fontsize=18)
        ax.spines['right'].set_visible(False)
        ax.spines['top'].set_visible(False)
        # Adding a note below the graph using the axes
        note_text = "Nota: As variáveis estão, respectivamente, em % da Folha do futebol, milhões/ponto conquistado,"
        note_text_2 = "e % da Rec Operacional Líquida nas duas últimas."
        ax.text(0, -0.25, note_text, transform=ax.transAxes, ha="left", fontsize=18, color="black")
        ax.text(0, -0.31, note_text_2, transform=ax.transAxes, ha="left", fontsize=18, color="black")

        # Adjust layout and show plot
        fig.tight_layout()
        st.pyplot(fig)        

######################################################################################################################
######################################################################################################################
######################################################################################################################
######################################################################################################################

    if clube == "Grêmio":
        st.markdown("<h4 style='text-align: center;  color: black;'>Histórico de Receitas e Despesas</b></h4>", unsafe_allow_html=True)
        st.markdown("<h5 style='text-align: center;  color: black;'>(em R$ milhões, em moeda constante)<br></b></h5>", unsafe_allow_html=True)
        st.markdown("---")

        # Selecting the rows 1 to 6 and columns 76 to 81
        selected_data = df3.iloc[np.r_[1:7, 8], 61:66]
        selected_data = selected_data.round(0)
        selected_data.columns = [2024, 2023, 2022, 2021, 2020]

        # Create a colormap of reds
        cmap = plt.get_cmap('Blues')
        colors = cmap(np.linspace(1, 0.3, num=len(selected_data.columns)))

        # Creating a figure and a set of subplots
        fig, ax = plt.subplots(figsize=(15, 10))

        # Plotting using ax
        selected_data.plot(kind='bar', ax=ax, width=0.9, color=colors)

        # Adding value labels on top of each bar
        for p in ax.patches:
            # Format the height as integer
            height = int(p.get_height())  # Convert to integer to avoid decimals
            ax.annotate(f'{height}', (p.get_x() + p.get_width() / 2., p.get_height()),
                        ha='center', va='center', xytext=(0, 10), textcoords='offset points', fontsize=14)

        # Setting the labels and title using ax methods
        custom_labels = ["Transmissão + Premiação", "Publicidade e patrocínio", "Match-Day", 
                 "Sócio-torcedor", "Premiações", "Licenciamento da marca", "Negociação de atletas"]
        
        # Function to break labels into two lines if longer than a given number of characters
        def adjust_labels(labels, max_len=18):
            adjusted_labels = []
            for label in labels:
                if len(label) > max_len:
                    # Split the label by spaces and attempt to divide into two roughly equal parts
                    words = label.split()
                    midpoint = len(words) // 2
                    label = ' '.join(words[:midpoint]) + '\n' + ' '.join(words[midpoint:])
                adjusted_labels.append(label)
            return adjusted_labels

        # Apply the function to custom_labels
        adjusted_custom_labels = adjust_labels(custom_labels)

        ax.set_xticklabels(adjusted_custom_labels, fontsize=19, rotation=0)
        ax.set_title('Receitas', fontsize=24, fontweight="bold")
        ax.tick_params(axis='y', labelsize=16)
        ax.legend(bbox_to_anchor=(0.5, -0.1), loc='upper center', ncol=5, fontsize=18, frameon=False)
        ax.set_ylabel('Receitas (em R$ milhões, em moeda constante)', fontsize=18)
        ax.spines['right'].set_visible(False)
        ax.spines['top'].set_visible(False)
        note_text = "Notas:"
        note_text_1 = "1. O clube informa a Receita de Premiação em conjunto com a Receita de Transmissão."
        note_text_2 = "2. O clube não informa com clareza a Receita com Match-Day."
        note_text_3 = "3. O clube não informa com clareza a Receita com Sócio-Torcedor (Rec Patrimoniais)."
        ax.text(0, -0.25, note_text, transform=ax.transAxes, ha="left", fontsize=18, color="black")
        ax.text(0, -0.31, note_text_1, transform=ax.transAxes, ha="left", fontsize=18, color="black")
        ax.text(0, -0.37, note_text_2, transform=ax.transAxes, ha="left", fontsize=18, color="black")
        ax.text(0, -0.43, note_text_3, transform=ax.transAxes, ha="left", fontsize=18, color="black")


        # Adjust layout and show plot
        fig.tight_layout()
        st.pyplot(fig)        

######################################################################################################################
######################################################################################################################
        st.markdown("---")

        # Selecting the rows 1 to 6 and columns 76 to 81
        selected_data = df3.iloc[np.r_[10, 13, 11], 61:66]
        selected_data = selected_data.round(0)
        selected_data.columns = [2024, 2023, 2022, 2021, 2020]

        # Create a colormap of Blues
        cmap = plt.get_cmap('Blues')
        colors = cmap(np.linspace(1, 0.3, num=len(selected_data.columns)))

        # Creating a figure and a set of subplots
        fig, ax = plt.subplots(figsize=(15, 10))

        # Plotting using ax
        selected_data.plot(kind='bar', ax=ax, width=0.9, color=colors)

        # Adding value labels on top of each bar
        for p in ax.patches:
            # Format the height as integer
            height = int(p.get_height())  # Convert to integer to avoid decimals
            ax.annotate(f'{height}', (p.get_x() + p.get_width() / 2., p.get_height()),
                        ha='center', va='center', xytext=(0, 10), textcoords='offset points', fontsize=16)

        # Setting the labels and title using ax methods
        custom_labels = ["Folha do futebol (Pessoal + Imagem)", "Aquisições de atletas", "Resultado"]
        
        # Function to break labels into two lines if longer than a given number of characters
        def adjust_labels(labels, max_len=18):
            adjusted_labels = []
            for label in labels:
                if len(label) > max_len:
                    # Split the label by spaces and attempt to divide into two roughly equal parts
                    words = label.split()
                    midpoint = len(words) // 2
                    label = ' '.join(words[:midpoint]) + '\n' + ' '.join(words[midpoint:])
                adjusted_labels.append(label)
            return adjusted_labels

        # Apply the function to custom_labels
        adjusted_custom_labels = adjust_labels(custom_labels)

        ax.set_xticklabels(adjusted_custom_labels, fontsize=19, rotation=0)
        ax.set_title('Despesas', fontsize=24, fontweight="bold")
        ax.tick_params(axis='y', labelsize=16)
        ax.legend(bbox_to_anchor=(0.5, -0.1), loc='upper center', ncol=5, fontsize=18, frameon=False)
        ax.set_ylabel('Despesas (em R$ milhões, em moeda constante)', fontsize=18)
        ax.spines['right'].set_visible(False)
        ax.spines['top'].set_visible(False)

        # Adjust layout and show plot
        fig.tight_layout()
        st.pyplot(fig)        

######################################################################################################################
######################################################################################################################

        st.markdown("<h4 style='text-align: center;  color: black;'>Histórico de Índices</b></h4>", unsafe_allow_html=True)
        st.markdown("<h5 style='text-align: center;  color: black;'>(em moeda constante)<br></b></h5>", unsafe_allow_html=True)
        st.markdown("---")

        # Selecting the rows 1 to 6 and columns 76 to 81
        selected_data = df3.iloc[np.r_[22, 24, 27], 61:66]
        selected_data = selected_data.round(1)
        selected_data.columns = [2024, 2023, 2022, 2021, 2020]

        # Create a colormap of Blues
        cmap = plt.get_cmap('Blues')
        colors = cmap(np.linspace(1, 0.3, num=len(selected_data.columns)))

        # Creating a figure and a set of subplots
        fig, ax = plt.subplots(figsize=(15, 10))

        # Plotting using ax
        selected_data.plot(kind='bar', ax=ax, width=0.9, color=colors)

        for p in ax.patches:
            # Format the height with one decimal place
            height = p.get_height()
            ax.annotate(f'{height:.1f}', (p.get_x() + p.get_width() / 2., height),
                        ha='center', va='center', xytext=(0, 10), textcoords='offset points', fontsize=16)

        # Setting the labels and title using ax methods
        custom_labels = ["Rec Operacional / Base Torcedores", 
                         "Rec Venda Jogadores / Pontuação Série A",
                         "Rec Operacional / Pontuação Série A"]
        
        def adjust_labels(labels, max_len=18):
            adjusted_labels = []
            for label in labels:
                if len(label) > max_len:
                    # Find the index of the slash in the label
                    slash_index = label.find('/')
                    if slash_index != -1:
                        # Split the label right after the slash and keep the slash at the end of the first line
                        label = label[:slash_index + 1] + '\n' + label[slash_index + 1:]
                adjusted_labels.append(label)
            return adjusted_labels

        # Apply the function to custom_labels
        adjusted_custom_labels = adjust_labels(custom_labels)

        ax.set_xticklabels(adjusted_custom_labels, fontsize=16, rotation=0)
        #ax.set_title('Índices', fontsize=24, fontweight="bold")
        ax.tick_params(axis='y', labelsize=16)
        ax.legend(bbox_to_anchor=(0.5, -0.1), loc='upper center', ncol=5, fontsize=18, frameon=False)
        #ax.set_ylabel('Despesas (em R$ milhões, em moeda constante)', fontsize=18)
        ax.spines['right'].set_visible(False)
        ax.spines['top'].set_visible(False)
        # Adding a note below the graph using the axes
        note_text = "Nota: As variáveis estão, respectivamente, em Reais/torcedor"
        note_text_2 = "e milhões/ponto conquistado nas duas últimas."
        ax.text(0, -0.25, note_text, transform=ax.transAxes, ha="left", fontsize=18, color="black")
        ax.text(0, -0.31, note_text_2, transform=ax.transAxes, ha="left", fontsize=18, color="black")

        # Adjust layout and show plot
        fig.tight_layout()
        st.pyplot(fig)        

######################################################################################################################

        st.markdown("---")

        # Selecting the rows 1 to 6 and columns 76 to 81
        selected_data = df3.iloc[np.r_[26, 31, 33], 61:66]
        selected_data = selected_data.round(2)
        selected_data.columns = [2024, 2023, 2022, 2021, 2020]

        # Create a colormap of Blues
        cmap = plt.get_cmap('Blues')
        colors = cmap(np.linspace(1, 0.3, num=len(selected_data.columns)))

        # Creating a figure and a set of subplots
        fig, ax = plt.subplots(figsize=(15, 10))

        # Plotting using ax
        selected_data.plot(kind='bar', ax=ax, width=0.95, color=colors)

        for p in ax.patches:
            # Format the height with one decimal place
            height = p.get_height()
            ax.annotate(f'{height:.2f}', (p.get_x() + p.get_width() / 2., height),
                        ha='center', va='center', xytext=(0, 10), textcoords='offset points', fontsize=14)

        # Setting the labels and title using ax methods
        custom_labels = ["Folha do futebol / Pontuação Série A", 
                         "Dívida / Rec Operacional", 
                         "Folha futebol + Compra jogadores / Rec Operacional"]
        
        def adjust_labels(labels, max_len=18):
            adjusted_labels = []
            for label in labels:
                if len(label) > max_len:
                    # Find the index of the slash in the label
                    slash_index = label.find('/')
                    if slash_index != -1:
                        # Split the label right after the slash and keep the slash at the end of the first line
                        label = label[:slash_index + 1] + '\n' + label[slash_index + 1:]
                adjusted_labels.append(label)
            return adjusted_labels

        # Apply the function to custom_labels
        adjusted_custom_labels = adjust_labels(custom_labels)

        ax.set_xticklabels(adjusted_custom_labels, fontsize=16, rotation=0)
        #ax.set_title('Índices', fontsize=24, fontweight="bold")
        ax.tick_params(axis='y', labelsize=16)
        ax.legend(bbox_to_anchor=(0.5, -0.1), loc='upper center', ncol=5, fontsize=18, frameon=False)
        #ax.set_ylabel('Despesas (em R$ milhões, em moeda constante)', fontsize=18)
        ax.spines['right'].set_visible(False)
        ax.spines['top'].set_visible(False)
        # Adding a note below the graph using the axes
        note_text = "Nota: As variáveis estão, respectivamente, em % da Folha do futebol, milhões/ponto conquistado,"
        note_text_1 = "e % da Rec Operacional Líquida nas duas últimas."
        ax.text(0, -0.25, note_text, transform=ax.transAxes, ha="left", fontsize=18, color="black")
        ax.text(0, -0.31, note_text_1, transform=ax.transAxes, ha="left", fontsize=18, color="black")

        # Adjust layout and show plot
        fig.tight_layout()
        st.pyplot(fig)        

######################################################################################################################
######################################################################################################################
######################################################################################################################
######################################################################################################################

    if clube == "Criciúma":
        st.markdown("<h4 style='text-align: center;  color: black;'>Histórico de Receitas e Despesas</b></h4>", unsafe_allow_html=True)
        st.markdown("<h5 style='text-align: center;  color: black;'>(em R$ milhões, em moeda constante)<br></b></h5>", unsafe_allow_html=True)
        st.markdown("---")

        # Selecting the rows 1 to 6 and columns 76 to 81
        selected_data = df3.iloc[np.r_[1:5, 6, 8], 66:71]
        selected_data = selected_data.round(0)
        selected_data.columns = [2024, 2023, 2022, 2021, 2020]

        # Create a colormap of reds
        cmap = plt.get_cmap('Wistia')
        colors = cmap(np.linspace(1, 0.3, num=len(selected_data.columns)))

        # Creating a figure and a set of subplots
        fig, ax = plt.subplots(figsize=(15, 10))

        # Plotting using ax
        selected_data.plot(kind='bar', ax=ax, width=0.9, color=colors)

        # Adding value labels on top of each bar
        for p in ax.patches:
            # Format the height as integer
            height = int(p.get_height())  # Convert to integer to avoid decimals
            ax.annotate(f'{height}', (p.get_x() + p.get_width() / 2., p.get_height()),
                        ha='center', va='center', xytext=(0, 10), textcoords='offset points', fontsize=14)

        # Setting the labels and title using ax methods
        custom_labels = ["Transmissão + Premiação", "Publicidade e patrocínio", "Match-Day", 
                 "Sócio-torcedor", "Licenciamento da marca", "Negociação de atletas"]
        
        # Function to break labels into two lines if longer than a given number of characters
        def adjust_labels(labels, max_len=18):
            adjusted_labels = []
            for label in labels:
                if len(label) > max_len:
                    # Split the label by spaces and attempt to divide into two roughly equal parts
                    words = label.split()
                    midpoint = len(words) // 2
                    label = ' '.join(words[:midpoint]) + '\n' + ' '.join(words[midpoint:])
                adjusted_labels.append(label)
            return adjusted_labels

        # Apply the function to custom_labels
        adjusted_custom_labels = adjust_labels(custom_labels)

        ax.set_xticklabels(adjusted_custom_labels, fontsize=19, rotation=0)
        ax.set_title('Receitas', fontsize=24, fontweight="bold")
        ax.tick_params(axis='y', labelsize=16)
        ax.legend(bbox_to_anchor=(0.5, -0.1), loc='upper center', ncol=5, fontsize=18, frameon=False)
        ax.set_ylabel('Receitas (em R$ milhões, em moeda constante)', fontsize=18)
        ax.spines['right'].set_visible(False)
        ax.spines['top'].set_visible(False)
        note_text = "Notas:"
        note_text_1 = "1. O clube informa a Receita de Premiação em conjunto com a Receita de Transmissão."
        ax.text(0, -0.25, note_text, transform=ax.transAxes, ha="left", fontsize=18, color="black")
        ax.text(0, -0.31, note_text_1, transform=ax.transAxes, ha="left", fontsize=18, color="black")

        # Adjust layout and show plot
        fig.tight_layout()
        st.pyplot(fig)        

######################################################################################################################
######################################################################################################################
        st.markdown("---")

        # Selecting the rows 1 to 6 and columns 76 to 81
        selected_data = df3.iloc[np.r_[10, 13, 11], 66:71]
        selected_data = selected_data.round(0)
        selected_data.columns = [2024, 2023, 2022, 2021, 2020]

        # Create a colormap of Greens
        cmap = plt.get_cmap('Wistia')
        colors = cmap(np.linspace(1, 0.3, num=len(selected_data.columns)))

        # Creating a figure and a set of subplots
        fig, ax = plt.subplots(figsize=(15, 10))

        # Plotting using ax
        selected_data.plot(kind='bar', ax=ax, width=0.9, color=colors)

        # Adding value labels on top of each bar
        for p in ax.patches:
            # Format the height as integer
            height = int(p.get_height())  # Convert to integer to avoid decimals
            ax.annotate(f'{height}', (p.get_x() + p.get_width() / 2., p.get_height()),
                        ha='center', va='center', xytext=(0, 10), textcoords='offset points', fontsize=16)

        # Setting the labels and title using ax methods
        custom_labels = ["Folha do futebol (Pessoal + Imagem)", "Aquisições de atletas", "Resultado"]
        
        # Function to break labels into two lines if longer than a given number of characters
        def adjust_labels(labels, max_len=18):
            adjusted_labels = []
            for label in labels:
                if len(label) > max_len:
                    # Split the label by spaces and attempt to divide into two roughly equal parts
                    words = label.split()
                    midpoint = len(words) // 2
                    label = ' '.join(words[:midpoint]) + '\n' + ' '.join(words[midpoint:])
                adjusted_labels.append(label)
            return adjusted_labels

        # Apply the function to custom_labels
        adjusted_custom_labels = adjust_labels(custom_labels)

        ax.set_xticklabels(adjusted_custom_labels, fontsize=19, rotation=0)
        ax.set_title('Despesas', fontsize=24, fontweight="bold")
        ax.tick_params(axis='y', labelsize=16)
        ax.legend(bbox_to_anchor=(0.5, -0.1), loc='upper center', ncol=5, fontsize=18, frameon=False)
        ax.set_ylabel('Despesas (em R$ milhões, em moeda constante)', fontsize=18)
        ax.spines['right'].set_visible(False)
        ax.spines['top'].set_visible(False)

        # Adjust layout and show plot
        fig.tight_layout()
        st.pyplot(fig)        

######################################################################################################################
######################################################################################################################

        st.markdown("<h4 style='text-align: center;  color: black;'>Histórico de Índices</b></h4>", unsafe_allow_html=True)
        st.markdown("<h5 style='text-align: center;  color: black;'>(em moeda constante)<br></b></h5>", unsafe_allow_html=True)
        st.markdown("---")

        # Selecting the rows 1 to 6 and columns 76 to 81
        selected_data = df3.iloc[np.r_[22, 24, 27], 66:71]
        selected_data = selected_data.round(1)
        selected_data.columns = [2024, 2023, 2022, 2021, 2020]

        # Create a colormap of Greens
        cmap = plt.get_cmap('Wistia')
        colors = cmap(np.linspace(1, 0.3, num=len(selected_data.columns)))

        # Creating a figure and a set of subplots
        fig, ax = plt.subplots(figsize=(15, 10))

        # Plotting using ax
        selected_data.plot(kind='bar', ax=ax, width=0.9, color=colors)

        for p in ax.patches:
            # Format the height with one decimal place
            height = p.get_height()
            ax.annotate(f'{height:.1f}', (p.get_x() + p.get_width() / 2., height),
                        ha='center', va='center', xytext=(0, 10), textcoords='offset points', fontsize=16)

        # Setting the labels and title using ax methods
        custom_labels = ["Rec Oper Líquida / Base Torcedores", 
                         "Rec Venda Jogadores / Pontuação Série A",
                         "Rec Oper Líquida / Pontuação Série A"]
        
        def adjust_labels(labels, max_len=18):
            adjusted_labels = []
            for label in labels:
                if len(label) > max_len:
                    # Find the index of the slash in the label
                    slash_index = label.find('/')
                    if slash_index != -1:
                        # Split the label right after the slash and keep the slash at the end of the first line
                        label = label[:slash_index + 1] + '\n' + label[slash_index + 1:]
                adjusted_labels.append(label)
            return adjusted_labels

        # Apply the function to custom_labels
        adjusted_custom_labels = adjust_labels(custom_labels)

        ax.set_xticklabels(adjusted_custom_labels, fontsize=16, rotation=0)
        #ax.set_title('Índices', fontsize=24, fontweight="bold")
        ax.tick_params(axis='y', labelsize=16)
        ax.legend(bbox_to_anchor=(0.5, -0.1), loc='upper center', ncol=5, fontsize=18, frameon=False)
        #ax.set_ylabel('Despesas (em R$ milhões, em moeda constante)', fontsize=18)
        ax.spines['right'].set_visible(False)
        ax.spines['top'].set_visible(False)
        # Adding a note below the graph using the axes
        note_text = "Nota: As variáveis estão, respectivamente, em Reais/torcedor"
        note_text_2 = "e milhões/ponto conquistado nas duas últimas."
        ax.text(0, -0.25, note_text, transform=ax.transAxes, ha="left", fontsize=18, color="black")
        ax.text(0, -0.31, note_text_2, transform=ax.transAxes, ha="left", fontsize=18, color="black")

        # Adjust layout and show plot
        fig.tight_layout()
        st.pyplot(fig)        

######################################################################################################################

        st.markdown("---")

        # Selecting the rows 1 to 6 and columns 76 to 81
        selected_data = df3.iloc[np.r_[26, 31, 33], 66:71]
        selected_data = selected_data.round(2)
        selected_data.columns = [2024, 2023, 2022, 2021, 2020]

        # Create a colormap of Greens
        cmap = plt.get_cmap('Wistia')
        colors = cmap(np.linspace(1, 0.3, num=len(selected_data.columns)))

        # Creating a figure and a set of subplots
        fig, ax = plt.subplots(figsize=(15, 10))

        # Plotting using ax
        selected_data.plot(kind='bar', ax=ax, width=0.95, color=colors)

        for p in ax.patches:
            # Format the height with one decimal place
            height = p.get_height()
            ax.annotate(f'{height:.2f}', (p.get_x() + p.get_width() / 2., height),
                        ha='center', va='center', xytext=(0, 10), textcoords='offset points', fontsize=14)

        # Setting the labels and title using ax methods
        custom_labels = ["Folha do futebol / Pontuação Série A", 
                         "Dívida / Rec Oper Líquida", 
                         "Folha futebol + Compra jogadores / Rec Oper Líquida"]
        
        def adjust_labels(labels, max_len=18):
            adjusted_labels = []
            for label in labels:
                if len(label) > max_len:
                    # Find the index of the slash in the label
                    slash_index = label.find('/')
                    if slash_index != -1:
                        # Split the label right after the slash and keep the slash at the end of the first line
                        label = label[:slash_index + 1] + '\n' + label[slash_index + 1:]
                adjusted_labels.append(label)
            return adjusted_labels

        # Apply the function to custom_labels
        adjusted_custom_labels = adjust_labels(custom_labels)

        ax.set_xticklabels(adjusted_custom_labels, fontsize=16, rotation=0)
        #ax.set_title('Índices', fontsize=24, fontweight="bold")
        ax.tick_params(axis='y', labelsize=16)
        ax.legend(bbox_to_anchor=(0.5, -0.1), loc='upper center', ncol=5, fontsize=18, frameon=False)
        #ax.set_ylabel('Despesas (em R$ milhões, em moeda constante)', fontsize=18)
        ax.spines['right'].set_visible(False)
        ax.spines['top'].set_visible(False)
        # Adding a note below the graph using the axes
        note_text = "Nota: As variáveis estão, respectivamente, em milhões/ponto conquistado,"
        note_text_2 = "e % da Rec Operacional Líquida nas duas últimas."
        ax.text(0, -0.25, note_text, transform=ax.transAxes, ha="left", fontsize=18, color="black")
        ax.text(0, -0.31, note_text_2, transform=ax.transAxes, ha="left", fontsize=18, color="black")

        # Adjust layout and show plot
        fig.tight_layout()
        st.pyplot(fig)        

######################################################################################################################
######################################################################################################################
######################################################################################################################
######################################################################################################################

    if clube == "Internacional":
        st.markdown("<h4 style='text-align: center;  color: black;'>Histórico de Receitas e Despesas</b></h4>", unsafe_allow_html=True)
        st.markdown("<h5 style='text-align: center;  color: black;'>(em R$ milhões, em moeda constante)<br></b></h5>", unsafe_allow_html=True)
        st.markdown("---")

        # Selecting the rows 1 to 6 and columns 76 to 81
        selected_data = df3.iloc[np.r_[28, 2:7, 8], 71:76]
        selected_data = selected_data.round(0)
        selected_data.columns = [2024, 2023, 2022, 2021, 2020]

        # Create a colormap of reds
        cmap = plt.get_cmap('Reds')
        colors = cmap(np.linspace(1, 0.3, num=len(selected_data.columns)))

        # Creating a figure and a set of subplots
        fig, ax = plt.subplots(figsize=(15, 10))

        # Plotting using ax
        selected_data.plot(kind='bar', ax=ax, width=0.9, color=colors)

        # Adding value labels on top of each bar
        for p in ax.patches:
            # Format the height as integer
            height = int(p.get_height())  # Convert to integer to avoid decimals
            ax.annotate(f'{height}', (p.get_x() + p.get_width() / 2., p.get_height()),
                        ha='center', va='center', xytext=(0, 10), textcoords='offset points', fontsize=14)

        # Setting the labels and title using ax methods
        custom_labels = ["Direitos de transmissão", "Publicidade e patrocínio", "Match-Day", 
                 "Sócio-torcedor", "Premiações", "Licenciamento da marca", "Negociação de atletas"]
        
        # Function to break labels into two lines if longer than a given number of characters
        def adjust_labels(labels, max_len=18):
            adjusted_labels = []
            for label in labels:
                if len(label) > max_len:
                    # Split the label by spaces and attempt to divide into two roughly equal parts
                    words = label.split()
                    midpoint = len(words) // 2
                    label = ' '.join(words[:midpoint]) + '\n' + ' '.join(words[midpoint:])
                adjusted_labels.append(label)
            return adjusted_labels

        # Apply the function to custom_labels
        adjusted_custom_labels = adjust_labels(custom_labels)

        ax.set_xticklabels(adjusted_custom_labels, fontsize=18, rotation=0)
        ax.set_title('Receitas', fontsize=24, fontweight="bold")
        ax.tick_params(axis='y', labelsize=16)
        ax.legend(bbox_to_anchor=(0.5, -0.1), loc='upper center', ncol=5, fontsize=18, frameon=False)
        ax.set_ylabel('Receitas (em R$ milhões, em moeda constante)', fontsize=18)
        ax.spines['right'].set_visible(False)
        ax.spines['top'].set_visible(False)
        note_text = "Notas:"
        note_text_1 = "1. O clube informa a Receita com Sócio-Torcedor em conjunto com a Receita de Sócios Patrimoniais."
        ax.text(0, -0.25, note_text, transform=ax.transAxes, ha="left", fontsize=18, color="black")
        ax.text(0, -0.31, note_text_1, transform=ax.transAxes, ha="left", fontsize=18, color="black")

        # Adjust layout and show plot
        fig.tight_layout()
        st.pyplot(fig)        

######################################################################################################################
######################################################################################################################
        st.markdown("---")

        # Selecting the rows 1 to 6 and columns 76 to 81
        selected_data = df3.iloc[np.r_[10, 13, 11], 71:76]
        selected_data = selected_data.round(0)
        selected_data.columns = [2024, 2023, 2022, 2021, 2020]

        # Create a colormap of Reds
        cmap = plt.get_cmap('Reds')
        colors = cmap(np.linspace(1, 0.3, num=len(selected_data.columns)))

        # Creating a figure and a set of subplots
        fig, ax = plt.subplots(figsize=(15, 10))

        # Plotting using ax
        selected_data.plot(kind='bar', ax=ax, width=0.9, color=colors)

        # Adding value labels on top of each bar
        for p in ax.patches:
            # Format the height as integer
            height = int(p.get_height())  # Convert to integer to avoid decimals
            ax.annotate(f'{height}', (p.get_x() + p.get_width() / 2., p.get_height()),
                        ha='center', va='center', xytext=(0, 10), textcoords='offset points', fontsize=16)

        # Setting the labels and title using ax methods
        custom_labels = ["Folha do futebol (Pessoal + Imagem)", "Aquisições de atletas", "Resultado"]
        
        # Function to break labels into two lines if longer than a given number of characters
        def adjust_labels(labels, max_len=18):
            adjusted_labels = []
            for label in labels:
                if len(label) > max_len:
                    # Split the label by spaces and attempt to divide into two roughly equal parts
                    words = label.split()
                    midpoint = len(words) // 2
                    label = ' '.join(words[:midpoint]) + '\n' + ' '.join(words[midpoint:])
                adjusted_labels.append(label)
            return adjusted_labels

        # Apply the function to custom_labels
        adjusted_custom_labels = adjust_labels(custom_labels)

        ax.set_xticklabels(adjusted_custom_labels, fontsize=19, rotation=0)
        ax.set_title('Despesas', fontsize=24, fontweight="bold")
        ax.tick_params(axis='y', labelsize=16)
        ax.legend(bbox_to_anchor=(0.5, -0.1), loc='upper center', ncol=5, fontsize=18, frameon=False)
        ax.set_ylabel('Despesas (em R$ milhões, em moeda constante)', fontsize=18)
        ax.spines['right'].set_visible(False)
        ax.spines['top'].set_visible(False)

        # Adjust layout and show plot
        fig.tight_layout()
        st.pyplot(fig)        

######################################################################################################################
######################################################################################################################

        st.markdown("<h4 style='text-align: center;  color: black;'>Histórico de Índices</b></h4>", unsafe_allow_html=True)
        st.markdown("<h5 style='text-align: center;  color: black;'>(em moeda constante)<br></b></h5>", unsafe_allow_html=True)
        st.markdown("---")

        # Selecting the rows 1 to 6 and columns 76 to 81
        selected_data = df3.iloc[np.r_[22, 24, 27], 71:76]
        selected_data = selected_data.round(1)
        selected_data.columns = [2024, 2023, 2022, 2021, 2020]

        # Create a colormap of Reds
        cmap = plt.get_cmap('Reds')
        colors = cmap(np.linspace(1, 0.3, num=len(selected_data.columns)))

        # Creating a figure and a set of subplots
        fig, ax = plt.subplots(figsize=(15, 10))

        # Plotting using ax
        selected_data.plot(kind='bar', ax=ax, width=0.9, color=colors)

        for p in ax.patches:
            # Format the height with one decimal place
            height = p.get_height()
            ax.annotate(f'{height:.1f}', (p.get_x() + p.get_width() / 2., height),
                        ha='center', va='center', xytext=(0, 10), textcoords='offset points', fontsize=16)

        # Setting the labels and title using ax methods
        custom_labels = ["Rec Operacional / Base Torcedores", 
                         "Rec Venda Jogadores / Pontuação Série A",
                         "Rec Operacional / Pontuação Série A"]
        
        def adjust_labels(labels, max_len=18):
            adjusted_labels = []
            for label in labels:
                if len(label) > max_len:
                    # Find the index of the slash in the label
                    slash_index = label.find('/')
                    if slash_index != -1:
                        # Split the label right after the slash and keep the slash at the end of the first line
                        label = label[:slash_index + 1] + '\n' + label[slash_index + 1:]
                adjusted_labels.append(label)
            return adjusted_labels

        # Apply the function to custom_labels
        adjusted_custom_labels = adjust_labels(custom_labels)

        ax.set_xticklabels(adjusted_custom_labels, fontsize=16, rotation=0)
        #ax.set_title('Índices', fontsize=24, fontweight="bold")
        ax.tick_params(axis='y', labelsize=16)
        ax.legend(bbox_to_anchor=(0.5, -0.1), loc='upper center', ncol=5, fontsize=18, frameon=False)
        #ax.set_ylabel('Despesas (em R$ milhões, em moeda constante)', fontsize=18)
        ax.spines['right'].set_visible(False)
        ax.spines['top'].set_visible(False)
        # Adding a note below the graph using the axes
        note_text = "Nota: As variáveis estão, respectivamente, em Reais/torcedor"
        note_text_2 = "e milhões/ponto conquistado nas duas últimas."
        ax.text(0, -0.25, note_text, transform=ax.transAxes, ha="left", fontsize=18, color="black")
        ax.text(0, -0.31, note_text_2, transform=ax.transAxes, ha="left", fontsize=18, color="black")

        # Adjust layout and show plot
        fig.tight_layout()
        st.pyplot(fig)        

######################################################################################################################

        st.markdown("---")

        # Selecting the rows 1 to 6 and columns 76 to 81
        selected_data = df3.iloc[np.r_[25:27, 31, 33], 71:76]
        selected_data = selected_data.round(2)
        selected_data.columns = [2024, 2023, 2022, 2021, 2020]

        # Create a colormap of Reds
        cmap = plt.get_cmap('Reds')
        colors = cmap(np.linspace(1, 0.3, num=len(selected_data.columns)))

        # Creating a figure and a set of subplots
        fig, ax = plt.subplots(figsize=(15, 10))

        # Plotting using ax
        selected_data.plot(kind='bar', ax=ax, width=0.95, color=colors)

        for p in ax.patches:
            # Format the height with one decimal place
            height = p.get_height()
            ax.annotate(f'{height:.2f}', (p.get_x() + p.get_width() / 2., height),
                        ha='center', va='center', xytext=(0, 10), textcoords='offset points', fontsize=14)

        # Setting the labels and title using ax methods
        custom_labels = ["Receita com Premiação / Folha do Futebol",
                         "Folha do futebol / Pontuação Série A", 
                         "Dívida / Rec Oper Líquida", 
                         "Folha futebol + Compra jogadores / Rec Oper Líquida"]
        
        def adjust_labels(labels, max_len=18):
            adjusted_labels = []
            for label in labels:
                if len(label) > max_len:
                    # Find the index of the slash in the label
                    slash_index = label.find('/')
                    if slash_index != -1:
                        # Split the label right after the slash and keep the slash at the end of the first line
                        label = label[:slash_index + 1] + '\n' + label[slash_index + 1:]
                adjusted_labels.append(label)
            return adjusted_labels

        # Apply the function to custom_labels
        adjusted_custom_labels = adjust_labels(custom_labels)

        ax.set_xticklabels(adjusted_custom_labels, fontsize=16, rotation=0)
        #ax.set_title('Índices', fontsize=24, fontweight="bold")
        ax.tick_params(axis='y', labelsize=16)
        ax.legend(bbox_to_anchor=(0.5, -0.1), loc='upper center', ncol=5, fontsize=18, frameon=False)
        #ax.set_ylabel('Despesas (em R$ milhões, em moeda constante)', fontsize=18)
        ax.spines['right'].set_visible(False)
        ax.spines['top'].set_visible(False)
        # Adding a note below the graph using the axes
        note_text = "Nota: As variáveis estão, respectivamente, em % da Folha do futebol, milhões/ponto conquistado,"
        note_text_2 = "e % da Rec Operacional Líquida nas duas últimas."
        ax.text(0, -0.25, note_text, transform=ax.transAxes, ha="left", fontsize=18, color="black")
        ax.text(0, -0.31, note_text_2, transform=ax.transAxes, ha="left", fontsize=18, color="black")

        # Adjust layout and show plot
        fig.tight_layout()
        st.pyplot(fig)        

######################################################################################################################
######################################################################################################################
######################################################################################################################
######################################################################################################################

    if clube == "Palmeiras":
        st.markdown("<h4 style='text-align: center;  color: black;'>Histórico de Receitas e Despesas</b></h4>", unsafe_allow_html=True)
        st.markdown("<h5 style='text-align: center;  color: black;'>(em R$ milhões, em moeda constante)<br></b></h5>", unsafe_allow_html=True)
        st.markdown("---")

        # Selecting the rows 1 to 6 and columns 76 to 81
        selected_data = df3.iloc[np.r_[28, 2:7, 8], 76:81]
        selected_data = selected_data.round(0)
        selected_data.columns = [2024, 2023, 2022, 2021, 2020]

        # Create a colormap of greens
        cmap = plt.get_cmap('Greens')
        colors = cmap(np.linspace(1, 0.3, num=len(selected_data.columns)))

        # Creating a figure and a set of subplots
        fig, ax = plt.subplots(figsize=(15, 10))

        # Plotting using ax
        selected_data.plot(kind='bar', ax=ax, width=0.9, color=colors)

        # Adding value labels on top of each bar
        for p in ax.patches:
            # Format the height as integer
            height = int(p.get_height())  # Convert to integer to avoid decimals
            ax.annotate(f'{height}', (p.get_x() + p.get_width() / 2., p.get_height()),
                        ha='center', va='center', xytext=(0, 10), textcoords='offset points', fontsize=14)

        # Setting the labels and title using ax methods
        custom_labels = ["Direitos de transmissão", "Publicidade e patrocínio", "Match-Day", 
                 "Sócio-torcedor", "Premiações", "Licenciamento da marca", "Negociação de atletas"]
        
        # Function to break labels into two lines if longer than a given number of characters
        def adjust_labels(labels, max_len=18):
            adjusted_labels = []
            for label in labels:
                if len(label) > max_len:
                    # Split the label by spaces and attempt to divide into two roughly equal parts
                    words = label.split()
                    midpoint = len(words) // 2
                    label = ' '.join(words[:midpoint]) + '\n' + ' '.join(words[midpoint:])
                adjusted_labels.append(label)
            return adjusted_labels

        # Apply the function to custom_labels
        adjusted_custom_labels = adjust_labels(custom_labels)

        ax.set_xticklabels(adjusted_custom_labels, fontsize=19, rotation=0)
        ax.set_title('Receitas', fontsize=24, fontweight="bold")
        ax.tick_params(axis='y', labelsize=16)
        ax.legend(bbox_to_anchor=(0.5, -0.1), loc='upper center', ncol=5, fontsize=18, frameon=False)
        ax.set_ylabel('Receitas (em R$ milhões, em moeda constante)', fontsize=18)
        ax.spines['right'].set_visible(False)
        ax.spines['top'].set_visible(False)

        # Adjust layout and show plot
        fig.tight_layout()
        st.pyplot(fig)        

######################################################################################################################
######################################################################################################################
        st.markdown("---")

        # Selecting the rows 1 to 6 and columns 76 to 81
        selected_data = df3.iloc[np.r_[10, 13, 11], 76:81]
        selected_data = selected_data.round(0)
        selected_data.columns = [2024, 2023, 2022, 2021, 2020]

        # Create a colormap of Blues
        cmap = plt.get_cmap('Greens')
        colors = cmap(np.linspace(1, 0.3, num=len(selected_data.columns)))

        # Creating a figure and a set of subplots
        fig, ax = plt.subplots(figsize=(15, 10))

        # Plotting using ax
        selected_data.plot(kind='bar', ax=ax, width=0.9, color=colors)

        # Adding value labels on top of each bar
        for p in ax.patches:
            # Format the height as integer
            height = int(p.get_height())  # Convert to integer to avoid decimals
            ax.annotate(f'{height}', (p.get_x() + p.get_width() / 2., p.get_height()),
                        ha='center', va='center', xytext=(0, 10), textcoords='offset points', fontsize=16)

        # Setting the labels and title using ax methods
        custom_labels = ["Folha do futebol (Pessoal + Imagem)", "Aquisições de atletas", "Resultado"]
        
        # Function to break labels into two lines if longer than a given number of characters
        def adjust_labels(labels, max_len=18):
            adjusted_labels = []
            for label in labels:
                if len(label) > max_len:
                    # Split the label by spaces and attempt to divide into two roughly equal parts
                    words = label.split()
                    midpoint = len(words) // 2
                    label = ' '.join(words[:midpoint]) + '\n' + ' '.join(words[midpoint:])
                adjusted_labels.append(label)
            return adjusted_labels

        # Apply the function to custom_labels
        adjusted_custom_labels = adjust_labels(custom_labels)

        ax.set_xticklabels(adjusted_custom_labels, fontsize=19, rotation=0)
        ax.set_title('Despesas', fontsize=24, fontweight="bold")
        ax.tick_params(axis='y', labelsize=16)
        ax.legend(bbox_to_anchor=(0.5, -0.1), loc='upper center', ncol=5, fontsize=18, frameon=False)
        ax.set_ylabel('Despesas (em R$ milhões, em moeda constante)', fontsize=18)
        ax.spines['right'].set_visible(False)
        ax.spines['top'].set_visible(False)

        # Adjust layout and show plot
        fig.tight_layout()
        st.pyplot(fig)        

######################################################################################################################
######################################################################################################################

        st.markdown("<h4 style='text-align: center;  color: black;'>Histórico de Índices</b></h4>", unsafe_allow_html=True)
        st.markdown("<h5 style='text-align: center;  color: black;'>(em moeda constante)<br></b></h5>", unsafe_allow_html=True)
        st.markdown("---")

        # Selecting the rows 1 to 6 and columns 76 to 81
        selected_data = df3.iloc[np.r_[22, 24, 27], 76:81]
        selected_data = selected_data.round(1)
        selected_data.columns = [2024, 2023, 2022, 2021, 2020]

        # Create a colormap of reds
        cmap = plt.get_cmap('Greens')
        colors = cmap(np.linspace(1, 0.3, num=len(selected_data.columns)))

        # Creating a figure and a set of subplots
        fig, ax = plt.subplots(figsize=(15, 10))

        # Plotting using ax
        selected_data.plot(kind='bar', ax=ax, width=0.9, color=colors)

        for p in ax.patches:
            # Format the height with one decimal place
            height = p.get_height()
            ax.annotate(f'{height:.1f}', (p.get_x() + p.get_width() / 2., height),
                        ha='center', va='center', xytext=(0, 10), textcoords='offset points', fontsize=16)

        # Setting the labels and title using ax methods
        custom_labels = ["Rec Operacional / Base Torcedores", 
                         "Rec Venda Jogadores / Pontuação Série A",
                         "Rec Operacional / Pontuação Série A"]
        
        def adjust_labels(labels, max_len=18):
            adjusted_labels = []
            for label in labels:
                if len(label) > max_len:
                    # Find the index of the slash in the label
                    slash_index = label.find('/')
                    if slash_index != -1:
                        # Split the label right after the slash and keep the slash at the end of the first line
                        label = label[:slash_index + 1] + '\n' + label[slash_index + 1:]
                adjusted_labels.append(label)
            return adjusted_labels

        # Apply the function to custom_labels
        adjusted_custom_labels = adjust_labels(custom_labels)

        ax.set_xticklabels(adjusted_custom_labels, fontsize=16, rotation=0)
        #ax.set_title('Índices', fontsize=24, fontweight="bold")
        ax.tick_params(axis='y', labelsize=16)
        ax.legend(bbox_to_anchor=(0.5, -0.1), loc='upper center', ncol=5, fontsize=18, frameon=False)
        #ax.set_ylabel('Despesas (em R$ milhões, em moeda constante)', fontsize=18)
        ax.spines['right'].set_visible(False)
        ax.spines['top'].set_visible(False)
        # Adding a note below the graph using the axes
        note_text = "Nota: As variáveis estão, respectivamente, em Reais/torcedor"
        note_text_2 = "e milhões/ponto conquistado nas duas últimas."
        ax.text(0, -0.25, note_text, transform=ax.transAxes, ha="left", fontsize=18, color="black")
        ax.text(0, -0.31, note_text_2, transform=ax.transAxes, ha="left", fontsize=18, color="black")

        # Adjust layout and show plot
        fig.tight_layout()
        st.pyplot(fig)        

######################################################################################################################

        st.markdown("---")

        # Selecting the rows 1 to 6 and columns 76 to 81
        selected_data = df3.iloc[np.r_[25:27, 31, 33], 76:81]
        selected_data = selected_data.round(2)
        selected_data.columns = [2024, 2023, 2022, 2021, 2020]

        # Create a colormap of reds
        cmap = plt.get_cmap('Greens')
        colors = cmap(np.linspace(1, 0.3, num=len(selected_data.columns)))

        # Creating a figure and a set of subplots
        fig, ax = plt.subplots(figsize=(15, 10))

        # Plotting using ax
        selected_data.plot(kind='bar', ax=ax, width=0.95, color=colors)

        for p in ax.patches:
            # Format the height with one decimal place
            height = p.get_height()
            ax.annotate(f'{height:.2f}', (p.get_x() + p.get_width() / 2., height),
                        ha='center', va='center', xytext=(0, 10), textcoords='offset points', fontsize=14)

        # Setting the labels and title using ax methods
        custom_labels = ["Receita com Premiação / Folha do Futebol",
                         "Folha do futebol / Pontuação Série A", 
                         "Dívida / Rec Operacional", 
                         "Folha futebol + Compra jogadores / Rec Operacional"]
        
        def adjust_labels(labels, max_len=18):
            adjusted_labels = []
            for label in labels:
                if len(label) > max_len:
                    # Find the index of the slash in the label
                    slash_index = label.find('/')
                    if slash_index != -1:
                        # Split the label right after the slash and keep the slash at the end of the first line
                        label = label[:slash_index + 1] + '\n' + label[slash_index + 1:]
                adjusted_labels.append(label)
            return adjusted_labels

        # Apply the function to custom_labels
        adjusted_custom_labels = adjust_labels(custom_labels)

        ax.set_xticklabels(adjusted_custom_labels, fontsize=16, rotation=0)
        #ax.set_title('Índices', fontsize=24, fontweight="bold")
        ax.tick_params(axis='y', labelsize=16)
        ax.legend(bbox_to_anchor=(0.5, -0.1), loc='upper center', ncol=5, fontsize=18, frameon=False)
        #ax.set_ylabel('Despesas (em R$ milhões, em moeda constante)', fontsize=18)
        ax.spines['right'].set_visible(False)
        ax.spines['top'].set_visible(False)
        # Adding a note below the graph using the axes
        note_text = "Nota: As variáveis estão, respectivamente, em % da Folha do futebol, milhões/ponto conquistado,"
        note_text_2 = "e % da Rec Operacional Líquida nas duas últimas."
        ax.text(0, -0.25, note_text, transform=ax.transAxes, ha="left", fontsize=18, color="black")
        ax.text(0, -0.31, note_text_2, transform=ax.transAxes, ha="left", fontsize=18, color="black")

        # Adjust layout and show plot
        fig.tight_layout()
        st.pyplot(fig)        
######################################################################################################################
######################################################################################################################
######################################################################################################################
######################################################################################################################

    if clube == "Juventude":
        st.markdown("<h4 style='text-align: center;  color: black;'>Histórico de Receitas e Despesas</b></h4>", unsafe_allow_html=True)
        st.markdown("<h5 style='text-align: center;  color: black;'>(em R$ milhões, em moeda constante)<br></b></h5>", unsafe_allow_html=True)
        st.markdown("---")

        # Selecting the rows 1 to 6 and columns 76 to 81
        selected_data = df3.iloc[np.r_[1:7, 8], 81:86]
        selected_data = selected_data.round(0)
        selected_data.columns = [2024, 2023, 2022, 2021, 2020]

        # Create a colormap of Greys
        cmap = plt.get_cmap('Greys')
        colors = cmap(np.linspace(1, 0.3, num=len(selected_data.columns)))

        # Creating a figure and a set of subplots
        fig, ax = plt.subplots(figsize=(15, 10))

        # Plotting using ax
        selected_data.plot(kind='bar', ax=ax, width=0.9, color=colors)

        # Adding value labels on top of each bar
        for p in ax.patches:
            # Format the height as integer
            height = int(p.get_height())  # Convert to integer to avoid decimals
            ax.annotate(f'{height}', (p.get_x() + p.get_width() / 2., p.get_height()),
                        ha='center', va='center', xytext=(0, 10), textcoords='offset points', fontsize=14)

        # Setting the labels and title using ax methods
        custom_labels = ["Transmissão + Premiação", "Publicidade e patrocínio", "Match-Day", 
                 "Sócio-torcedor", "Premiações", "Licenciamento da marca", "Negociação de atletas"]
        
        # Function to break labels into two lines if longer than a given number of characters
        def adjust_labels(labels, max_len=18):
            adjusted_labels = []
            for label in labels:
                if len(label) > max_len:
                    # Split the label by spaces and attempt to divide into two roughly equal parts
                    words = label.split()
                    midpoint = len(words) // 2
                    label = ' '.join(words[:midpoint]) + '\n' + ' '.join(words[midpoint:])
                adjusted_labels.append(label)
            return adjusted_labels

        # Apply the function to custom_labels
        adjusted_custom_labels = adjust_labels(custom_labels)

        ax.set_xticklabels(adjusted_custom_labels, fontsize=19, rotation=0)
        ax.set_title('Receitas', fontsize=24, fontweight="bold")
        ax.tick_params(axis='y', labelsize=16)
        ax.legend(bbox_to_anchor=(0.5, -0.1), loc='upper center', ncol=5, fontsize=18, frameon=False)
        ax.set_ylabel('Receitas (em R$ milhões, em moeda constante)', fontsize=18)
        ax.spines['right'].set_visible(False)
        ax.spines['top'].set_visible(False)
        note_text = "Notas:"
        note_text_1 = "1. O clube informa a Receita de Premiação em conjunto com a Receita de Transmissão."
        note_text_2 = "2. O clube não informa com clareza a Receita com Sócio-Torcedor."
        note_text_3 = "3. O clube não informa com clareza a Receita com Licenciamento da Marca."
        ax.text(0, -0.25, note_text, transform=ax.transAxes, ha="left", fontsize=18, color="black")
        ax.text(0, -0.31, note_text_1, transform=ax.transAxes, ha="left", fontsize=18, color="black")
        ax.text(0, -0.37, note_text_2, transform=ax.transAxes, ha="left", fontsize=18, color="black")
        ax.text(0, -0.43, note_text_3, transform=ax.transAxes, ha="left", fontsize=18, color="black")

        # Adjust layout and show plot
        fig.tight_layout()
        st.pyplot(fig)        

######################################################################################################################
######################################################################################################################
        st.markdown("---")

        # Selecting the rows 1 to 6 and columns 76 to 81
        selected_data = df3.iloc[np.r_[10, 13:15], 81:86]
        selected_data = selected_data.round(0)
        selected_data.columns = [2024, 2023, 2022, 2021, 2020]

        # Create a colormap of Blues
        cmap = plt.get_cmap('Greys')
        colors = cmap(np.linspace(1, 0.3, num=len(selected_data.columns)))

        # Creating a figure and a set of subplots
        fig, ax = plt.subplots(figsize=(15, 10))

        # Plotting using ax
        selected_data.plot(kind='bar', ax=ax, width=0.9, color=colors)

        # Adding value labels on top of each bar
        for p in ax.patches:
            # Format the height as integer
            height = int(p.get_height())  # Convert to integer to avoid decimals
            ax.annotate(f'{height}', (p.get_x() + p.get_width() / 2., p.get_height()),
                        ha='center', va='center', xytext=(0, 10), textcoords='offset points', fontsize=16)

        # Setting the labels and title using ax methods
        custom_labels = ["Folha do futebol (Pessoal + Imagem)", "Aquisições de atletas", "Gastos com a Base"]
        
        # Function to break labels into two lines if longer than a given number of characters
        def adjust_labels(labels, max_len=18):
            adjusted_labels = []
            for label in labels:
                if len(label) > max_len:
                    # Split the label by spaces and attempt to divide into two roughly equal parts
                    words = label.split()
                    midpoint = len(words) // 2
                    label = ' '.join(words[:midpoint]) + '\n' + ' '.join(words[midpoint:])
                adjusted_labels.append(label)
            return adjusted_labels

        # Apply the function to custom_labels
        adjusted_custom_labels = adjust_labels(custom_labels)

        ax.set_xticklabels(adjusted_custom_labels, fontsize=19, rotation=0)
        ax.set_title('Despesas', fontsize=24, fontweight="bold")
        ax.tick_params(axis='y', labelsize=16)
        ax.legend(bbox_to_anchor=(0.5, -0.1), loc='upper center', ncol=5, fontsize=18, frameon=False)
        ax.set_ylabel('Despesas (em R$ milhões, em moeda constante)', fontsize=18)
        ax.spines['right'].set_visible(False)
        ax.spines['top'].set_visible(False)

        # Adjust layout and show plot
        fig.tight_layout()
        st.pyplot(fig)        

######################################################################################################################
######################################################################################################################

        st.markdown("<h4 style='text-align: center;  color: black;'>Histórico de Índices</b></h4>", unsafe_allow_html=True)
        st.markdown("<h5 style='text-align: center;  color: black;'>(em moeda constante)<br></b></h5>", unsafe_allow_html=True)
        st.markdown("---")

        # Selecting the rows 1 to 6 and columns 76 to 81
        selected_data = df3.iloc[np.r_[22:25, 27], 81:86]
        selected_data = selected_data.round(1)
        selected_data.columns = [2024, 2023, 2022, 2021, 2020]

        # Create a colormap of reds
        cmap = plt.get_cmap('Greys')
        colors = cmap(np.linspace(1, 0.3, num=len(selected_data.columns)))

        # Creating a figure and a set of subplots
        fig, ax = plt.subplots(figsize=(15, 10))

        # Plotting using ax
        selected_data.plot(kind='bar', ax=ax, width=0.9, color=colors)

        for p in ax.patches:
            # Format the height with one decimal place
            height = p.get_height()
            ax.annotate(f'{height:.1f}', (p.get_x() + p.get_width() / 2., height),
                        ha='center', va='center', xytext=(0, 10), textcoords='offset points', fontsize=16)

        # Setting the labels and title using ax methods
        custom_labels = ["Rec Oper Líquida / Base Torcedores", 
                         "Rec Venda Jogadores / Gastos Base", 
                         "Rec Venda Jogadores / Pontuação Série A",
                         "Rec Oper Líquida / Pontuação Série A"]
        
        def adjust_labels(labels, max_len=18):
            adjusted_labels = []
            for label in labels:
                if len(label) > max_len:
                    # Find the index of the slash in the label
                    slash_index = label.find('/')
                    if slash_index != -1:
                        # Split the label right after the slash and keep the slash at the end of the first line
                        label = label[:slash_index + 1] + '\n' + label[slash_index + 1:]
                adjusted_labels.append(label)
            return adjusted_labels

        # Apply the function to custom_labels
        adjusted_custom_labels = adjust_labels(custom_labels)

        ax.set_xticklabels(adjusted_custom_labels, fontsize=16, rotation=0)
        #ax.set_title('Índices', fontsize=24, fontweight="bold")
        ax.tick_params(axis='y', labelsize=16)
        ax.legend(bbox_to_anchor=(0.5, -0.1), loc='upper center', ncol=5, fontsize=18, frameon=False)
        #ax.set_ylabel('Despesas (em R$ milhões, em moeda constante)', fontsize=18)
        ax.spines['right'].set_visible(False)
        ax.spines['top'].set_visible(False)
        # Adding a note below the graph using the axes
        note_text = "Nota: As variáveis estão, respectivamente, em Reais/torcedor"
        note_text_2 = "e milhões/ponto conquistado nas duas últimas."
        ax.text(0, -0.25, note_text, transform=ax.transAxes, ha="left", fontsize=18, color="black")
        ax.text(0, -0.31, note_text_2, transform=ax.transAxes, ha="left", fontsize=18, color="black")

        # Adjust layout and show plot
        fig.tight_layout()
        st.pyplot(fig)        

######################################################################################################################

        st.markdown("---")

        # Selecting the rows 1 to 6 and columns 76 to 81
        selected_data = df3.iloc[np.r_[25:27, 31, 33], 81:86]
        selected_data = selected_data.round(2)
        selected_data.columns = [2024, 2023, 2022, 2021, 2020]

        # Create a colormap of reds
        cmap = plt.get_cmap('Greys')
        colors = cmap(np.linspace(1, 0.3, num=len(selected_data.columns)))

        # Creating a figure and a set of subplots
        fig, ax = plt.subplots(figsize=(15, 10))

        # Plotting using ax
        selected_data.plot(kind='bar', ax=ax, width=0.95, color=colors)

        for p in ax.patches:
            # Format the height with one decimal place
            height = p.get_height()
            ax.annotate(f'{height:.2f}', (p.get_x() + p.get_width() / 2., height),
                        ha='center', va='center', xytext=(0, 10), textcoords='offset points', fontsize=14)

        # Setting the labels and title using ax methods
        custom_labels = ["Receita com Premiação / Folha do Futebol",
                         "Folha do futebol / Pontuação Série A", 
                         "Dívida / Rec Oper Líquida", 
                         "Folha futebol + Compra jogadores / Rec Oper Líquida"]
        
        def adjust_labels(labels, max_len=18):
            adjusted_labels = []
            for label in labels:
                if len(label) > max_len:
                    # Find the index of the slash in the label
                    slash_index = label.find('/')
                    if slash_index != -1:
                        # Split the label right after the slash and keep the slash at the end of the first line
                        label = label[:slash_index + 1] + '\n' + label[slash_index + 1:]
                adjusted_labels.append(label)
            return adjusted_labels

        # Apply the function to custom_labels
        adjusted_custom_labels = adjust_labels(custom_labels)

        ax.set_xticklabels(adjusted_custom_labels, fontsize=16, rotation=0)
        #ax.set_title('Índices', fontsize=24, fontweight="bold")
        ax.tick_params(axis='y', labelsize=16)
        ax.legend(bbox_to_anchor=(0.5, -0.1), loc='upper center', ncol=5, fontsize=18, frameon=False)
        #ax.set_ylabel('Despesas (em R$ milhões, em moeda constante)', fontsize=18)
        ax.spines['right'].set_visible(False)
        ax.spines['top'].set_visible(False)
        # Adding a note below the graph using the axes
        note_text = "Nota: As variáveis estão, respectivamente, em % da Folha do futebol, milhões/ponto conquistado,"
        note_text_2 = "e % da Rec Operacional Líquida nas duas últimas."
        ax.text(0, -0.25, note_text, transform=ax.transAxes, ha="left", fontsize=18, color="black")
        ax.text(0, -0.31, note_text_2, transform=ax.transAxes, ha="left", fontsize=18, color="black")

        # Adjust layout and show plot
        fig.tight_layout()
        st.pyplot(fig)        
######################################################################################################################
######################################################################################################################
######################################################################################################################
######################################################################################################################

    if clube == "São Paulo":
        st.markdown("<h4 style='text-align: center;  color: black;'>Histórico de Receitas e Despesas</b></h4>", unsafe_allow_html=True)
        st.markdown("<h5 style='text-align: center;  color: black;'>(em R$ milhões, em moeda constante)<br></b></h5>", unsafe_allow_html=True)
        st.markdown("---")

        # Selecting the rows 1 to 6 and columns 76 to 81
        selected_data = df3.iloc[np.r_[1:5, 6, 8], 86:91]
        selected_data = selected_data.round(0)
        selected_data.columns = [2024, 2023, 2022, 2021, 2020]

        # Create a colormap of Greys
        cmap = plt.get_cmap('Reds')
        colors = cmap(np.linspace(1, 0.3, num=len(selected_data.columns)))

        # Creating a figure and a set of subplots
        fig, ax = plt.subplots(figsize=(15, 10))

        # Plotting using ax
        selected_data.plot(kind='bar', ax=ax, width=0.9, color=colors)

        # Adding value labels on top of each bar
        for p in ax.patches:
            # Format the height as integer
            height = int(p.get_height())  # Convert to integer to avoid decimals
            ax.annotate(f'{height}', (p.get_x() + p.get_width() / 2., p.get_height()),
                        ha='center', va='center', xytext=(0, 10), textcoords='offset points', fontsize=14)

        # Setting the labels and title using ax methods
        custom_labels = ["Transmissão + Premiação", "Publicidade e patrocínio", "Match-Day", 
                 "Sócio-torcedor", "Licenciamento da marca", "Negociação de atletas"]
        
        # Function to break labels into two lines if longer than a given number of characters
        def adjust_labels(labels, max_len=18):
            adjusted_labels = []
            for label in labels:
                if len(label) > max_len:
                    # Split the label by spaces and attempt to divide into two roughly equal parts
                    words = label.split()
                    midpoint = len(words) // 2
                    label = ' '.join(words[:midpoint]) + '\n' + ' '.join(words[midpoint:])
                adjusted_labels.append(label)
            return adjusted_labels

        # Apply the function to custom_labels
        adjusted_custom_labels = adjust_labels(custom_labels)

        ax.set_xticklabels(adjusted_custom_labels, fontsize=19, rotation=0)
        ax.set_title('Receitas', fontsize=24, fontweight="bold")
        ax.tick_params(axis='y', labelsize=16)
        ax.legend(bbox_to_anchor=(0.5, -0.1), loc='upper center', ncol=5, fontsize=18, frameon=False)
        ax.set_ylabel('Receitas (em R$ milhões, em moeda constante)', fontsize=18)
        ax.spines['right'].set_visible(False)
        ax.spines['top'].set_visible(False)
        note_text = "Nota: Em 2023, o São Paulo informou a Receita c/ Direitos de Transmissão em conjunto com a"
        note_text_2 = "Receita c/ Premiações."
        ax.text(0, -0.25, note_text, transform=ax.transAxes, ha="left", fontsize=18, color="black")
        ax.text(0, -0.31, note_text_2, transform=ax.transAxes, ha="left", fontsize=18, color="black")


        # Adjust layout and show plot
        fig.tight_layout()
        st.pyplot(fig)        

######################################################################################################################
######################################################################################################################
        st.markdown("---")

        # Selecting the rows 1 to 6 and columns 76 to 81
        selected_data = df3.iloc[np.r_[10, 13, 11], 86:91]
        selected_data = selected_data.round(0)
        selected_data.columns = [2024, 2023, 2022, 2021, 2020]

        # Create a colormap of Blues
        cmap = plt.get_cmap('Reds')
        colors = cmap(np.linspace(1, 0.3, num=len(selected_data.columns)))

        # Creating a figure and a set of subplots
        fig, ax = plt.subplots(figsize=(15, 10))

        # Plotting using ax
        selected_data.plot(kind='bar', ax=ax, width=0.9, color=colors)

        # Adding value labels on top of each bar
        for p in ax.patches:
            # Format the height as integer
            height = int(p.get_height())  # Convert to integer to avoid decimals
            ax.annotate(f'{height}', (p.get_x() + p.get_width() / 2., p.get_height()),
                        ha='center', va='center', xytext=(0, 10), textcoords='offset points', fontsize=16)

        # Setting the labels and title using ax methods
        custom_labels = ["Folha do futebol (Pessoal + Imagem)", "Aquisições de atletas", "Resultado"]
        
        # Function to break labels into two lines if longer than a given number of characters
        def adjust_labels(labels, max_len=18):
            adjusted_labels = []
            for label in labels:
                if len(label) > max_len:
                    # Split the label by spaces and attempt to divide into two roughly equal parts
                    words = label.split()
                    midpoint = len(words) // 2
                    label = ' '.join(words[:midpoint]) + '\n' + ' '.join(words[midpoint:])
                adjusted_labels.append(label)
            return adjusted_labels

        # Apply the function to custom_labels
        adjusted_custom_labels = adjust_labels(custom_labels)

        ax.set_xticklabels(adjusted_custom_labels, fontsize=19, rotation=0)
        ax.set_title('Despesas', fontsize=24, fontweight="bold")
        ax.tick_params(axis='y', labelsize=16)
        ax.legend(bbox_to_anchor=(0.5, -0.1), loc='upper center', ncol=5, fontsize=18, frameon=False)
        ax.set_ylabel('Despesas (em R$ milhões, em moeda constante)', fontsize=18)
        ax.spines['right'].set_visible(False)
        ax.spines['top'].set_visible(False)

        # Adjust layout and show plot
        fig.tight_layout()
        st.pyplot(fig)        

######################################################################################################################
######################################################################################################################

        markdown_1 = f"<div style='text-align:center;  color: red; font-weight: bold; font-size:{fontsize}px'>{clube:}</div>"
        st.markdown("<h4 style='text-align: center;  color: black;'>Histórico de Índices</b></h4>", unsafe_allow_html=True)
        st.markdown("<h5 style='text-align: center;  color: black;'>(em moeda constante)<br></b></h5>", unsafe_allow_html=True)
        st.markdown(markdown_1, unsafe_allow_html=True)
        st.markdown("---")

        # Selecting the rows 1 to 6 and columns 76 to 81
        selected_data = df3.iloc[np.r_[22, 24, 27], 86:91]
        selected_data = selected_data.round(1)
        selected_data.columns = [2024, 2023, 2022, 2021, 2020]

        # Create a colormap of reds
        cmap = plt.get_cmap('Reds')
        colors = cmap(np.linspace(1, 0.3, num=len(selected_data.columns)))

        # Creating a figure and a set of subplots
        fig, ax = plt.subplots(figsize=(15, 10))

        # Plotting using ax
        selected_data.plot(kind='bar', ax=ax, width=0.9, color=colors)

        for p in ax.patches:
            # Format the height with one decimal place
            height = p.get_height()
            ax.annotate(f'{height:.1f}', (p.get_x() + p.get_width() / 2., height),
                        ha='center', va='center', xytext=(0, 10), textcoords='offset points', fontsize=16)

        # Setting the labels and title using ax methods
        custom_labels = ["Rec Operacional / Base Torcedores", 
                         "Rec Venda Jogadores / Pontuação Série A",
                         "Rec Operacional / Pontuação Série A"]
        
        def adjust_labels(labels, max_len=18):
            adjusted_labels = []
            for label in labels:
                if len(label) > max_len:
                    # Find the index of the slash in the label
                    slash_index = label.find('/')
                    if slash_index != -1:
                        # Split the label right after the slash and keep the slash at the end of the first line
                        label = label[:slash_index + 1] + '\n' + label[slash_index + 1:]
                adjusted_labels.append(label)
            return adjusted_labels

        # Apply the function to custom_labels
        adjusted_custom_labels = adjust_labels(custom_labels)

        ax.set_xticklabels(adjusted_custom_labels, fontsize=16, rotation=0)
        #ax.set_title('Índices', fontsize=24, fontweight="bold")
        ax.tick_params(axis='y', labelsize=16)
        ax.legend(bbox_to_anchor=(0.5, -0.1), loc='upper center', ncol=5, fontsize=18, frameon=False)
        #ax.set_ylabel('Despesas (em R$ milhões, em moeda constante)', fontsize=18)
        ax.spines['right'].set_visible(False)
        ax.spines['top'].set_visible(False)
        # Adding a note below the graph using the axes
        note_text = "Nota: As variáveis estão, respectivamente, em Reais/torcedor"
        note_text_2 = "e milhões/ponto conquistado nas duas últimas."
        ax.text(0, -0.25, note_text, transform=ax.transAxes, ha="left", fontsize=18, color="black")
        ax.text(0, -0.31, note_text_2, transform=ax.transAxes, ha="left", fontsize=18, color="black")

        # Adjust layout and show plot
        fig.tight_layout()
        st.pyplot(fig)        

######################################################################################################################

        st.markdown("---")

        # Selecting the rows 1 to 6 and columns 76 to 81
        selected_data = df3.iloc[np.r_[26, 31, 33], 86:91]
        selected_data = selected_data.round(2)
        selected_data.columns = [2024, 2023, 2022, 2021, 2020]

        # Create a colormap of reds
        cmap = plt.get_cmap('Reds')
        colors = cmap(np.linspace(1, 0.3, num=len(selected_data.columns)))

        # Creating a figure and a set of subplots
        fig, ax = plt.subplots(figsize=(15, 10))

        # Plotting using ax
        selected_data.plot(kind='bar', ax=ax, width=0.95, color=colors)

        for p in ax.patches:
            # Format the height with one decimal place
            height = p.get_height()
            ax.annotate(f'{height:.2f}', (p.get_x() + p.get_width() / 2., height),
                        ha='center', va='center', xytext=(0, 10), textcoords='offset points', fontsize=14)

        # Setting the labels and title using ax methods
        custom_labels = ["Folha do futebol / Pontuação Série A", 
                         "Dívida / Rec Operacional", 
                         "Folha futebol + Compra jogadores / Rec Operacional"]
        
        def adjust_labels(labels, max_len=18):
            adjusted_labels = []
            for label in labels:
                if len(label) > max_len:
                    # Find the index of the slash in the label
                    slash_index = label.find('/')
                    if slash_index != -1:
                        # Split the label right after the slash and keep the slash at the end of the first line
                        label = label[:slash_index + 1] + '\n' + label[slash_index + 1:]
                adjusted_labels.append(label)
            return adjusted_labels

        # Apply the function to custom_labels
        adjusted_custom_labels = adjust_labels(custom_labels)

        ax.set_xticklabels(adjusted_custom_labels, fontsize=16, rotation=0)
        #ax.set_title('Índices', fontsize=24, fontweight="bold")
        ax.tick_params(axis='y', labelsize=16)
        ax.legend(bbox_to_anchor=(0.5, -0.1), loc='upper center', ncol=5, fontsize=18, frameon=False)
        #ax.set_ylabel('Despesas (em R$ milhões, em moeda constante)', fontsize=18)
        ax.spines['right'].set_visible(False)
        ax.spines['top'].set_visible(False)
        # Adding a note below the graph using the axes
        note_text = "Nota: As variáveis estão, respectivamente, em  milhões/ponto conquistado,"
        note_text_2 = "e % da Rec Operacional Líquida nas duas últimas."
        ax.text(0, -0.25, note_text, transform=ax.transAxes, ha="left", fontsize=18, color="black")
        ax.text(0, -0.31, note_text_2, transform=ax.transAxes, ha="left", fontsize=18, color="black")

        # Adjust layout and show plot
        fig.tight_layout()
        st.pyplot(fig)        
######################################################################################################################
######################################################################################################################
######################################################################################################################
######################################################################################################################

    if clube == "Vasco":
        st.markdown("<h4 style='text-align: center;  color: black;'>Histórico de Receitas e Despesas</b></h4>", unsafe_allow_html=True)
        st.markdown("<h5 style='text-align: center;  color: black;'>(em R$ milhões, em moeda constante)<br></b></h5>", unsafe_allow_html=True)

        # Selecting the rows 1 to 6 and columns 76 to 81
        selected_data = df3.iloc[np.r_[28, 2:7, 8], 91:96]
        selected_data = selected_data.round(0)
        selected_data.columns = [2024, 2023, 2022, 2021, 2020]

        # Create a light range of the 'Greys' colormap
        base_cmap = plt.get_cmap('Greys')
        colors = base_cmap(np.linspace(0.2, 0.8, num=len(selected_data.columns)))

        # Creating a figure and a set of subplots
        fig, ax = plt.subplots(figsize=(15, 10))

        # Plotting using ax
        selected_data.plot(kind='bar', ax=ax, width=0.9, color=colors)

        # Adding value labels on top of each bar
        for p in ax.patches:
            # Format the height as integer
            height = int(p.get_height())  # Convert to integer to avoid decimals
            ax.annotate(f'{height}', (p.get_x() + p.get_width() / 2., p.get_height()),
                        ha='center', va='center', xytext=(0, 10), textcoords='offset points', fontsize=14)

        # Setting the labels and title using ax methods
        custom_labels = ["Direitos de transmissão", "Publicidade e patrocínio", "Match-Day", 
                 "Sócio-torcedor", "Premiações", "Licenciamento da marca", "Negociação de atletas"]
        
        # Function to break labels into two lines if longer than a given number of characters
        def adjust_labels(labels, max_len=18):
            adjusted_labels = []
            for label in labels:
                if len(label) > max_len:
                    # Split the label by spaces and attempt to divide into two roughly equal parts
                    words = label.split()
                    midpoint = len(words) // 2
                    label = ' '.join(words[:midpoint]) + '\n' + ' '.join(words[midpoint:])
                adjusted_labels.append(label)
            return adjusted_labels

        # Apply the function to custom_labels
        adjusted_custom_labels = adjust_labels(custom_labels)

        ax.set_xticklabels(adjusted_custom_labels, fontsize=19, rotation=0)
        ax.set_title('Receitas', fontsize=24, fontweight="bold")
        ax.tick_params(axis='y', labelsize=16)
        ax.legend(bbox_to_anchor=(0.5, -0.1), loc='upper center', ncol=5, fontsize=18, frameon=False)
        ax.set_ylabel('Receitas (em R$ milhões, em moeda constante)', fontsize=18)
        ax.spines['right'].set_visible(False)
        ax.spines['top'].set_visible(False)

        # Adjust layout and show plot
        fig.tight_layout()
        st.pyplot(fig)        

######################################################################################################################
######################################################################################################################
        st.markdown("---")

        # Selecting the rows 1 to 6 and columns 76 to 81
        selected_data = df3.iloc[np.r_[10, 13, 11], 91:96]
        selected_data = selected_data.round(0)
        selected_data.columns = [2024, 2023, 2022, 2021, 2020]

        # Create a light range of the 'Greys' colormap
        base_cmap = plt.get_cmap('Greys')
        colors = base_cmap(np.linspace(0.2, 0.8, num=len(selected_data.columns)))

        # Creating a figure and a set of subplots
        fig, ax = plt.subplots(figsize=(15, 10))

        # Plotting using ax
        selected_data.plot(kind='bar', ax=ax, width=0.9, color=colors)

        # Adding value labels on top of each bar
        for p in ax.patches:
            # Format the height as integer
            height = int(p.get_height())  # Convert to integer to avoid decimals
            ax.annotate(f'{height}', (p.get_x() + p.get_width() / 2., p.get_height()),
                        ha='center', va='center', xytext=(0, 10), textcoords='offset points', fontsize=16)

        # Setting the labels and title using ax methods
        custom_labels = ["Folha do futebol (Pessoal + Imagem)", "Aquisições de atletas", "Resultado"]
        
        # Function to break labels into two lines if longer than a given number of characters
        def adjust_labels(labels, max_len=18):
            adjusted_labels = []
            for label in labels:
                if len(label) > max_len:
                    # Split the label by spaces and attempt to divide into two roughly equal parts
                    words = label.split()
                    midpoint = len(words) // 2
                    label = ' '.join(words[:midpoint]) + '\n' + ' '.join(words[midpoint:])
                adjusted_labels.append(label)
            return adjusted_labels

        # Apply the function to custom_labels
        adjusted_custom_labels = adjust_labels(custom_labels)

        ax.set_xticklabels(adjusted_custom_labels, fontsize=19, rotation=0)
        ax.set_title('Despesas', fontsize=24, fontweight="bold")
        ax.tick_params(axis='y', labelsize=16)
        ax.legend(bbox_to_anchor=(0.5, -0.1), loc='upper center', ncol=5, fontsize=18, frameon=False)
        ax.set_ylabel('Despesas (em R$ milhões, em moeda constante)', fontsize=18)
        ax.spines['right'].set_visible(False)
        ax.spines['top'].set_visible(False)
        # Adding a note below the graph using the axes
        note_text = "Nota: Em 2023, o Clube informou adições desprezíveis de Atletas em Formação na"
        note_text_2 = "Nota Explicativa sobre Intangíveis. Por esse motivo, o valor aparece zerado."
        ax.text(0, -0.25, note_text, transform=ax.transAxes, ha="left", fontsize=18, color="black")
        ax.text(0, -0.31, note_text_2, transform=ax.transAxes, ha="left", fontsize=18, color="black")

        # Adjust layout and show plot
        fig.tight_layout()
        st.pyplot(fig)        

######################################################################################################################
######################################################################################################################

        st.markdown("<h4 style='text-align: center;  color: black;'>Histórico de Índices</b></h4>", unsafe_allow_html=True)
        st.markdown("<h5 style='text-align: center;  color: black;'>(em moeda constante)<br></b></h5>", unsafe_allow_html=True)
        st.markdown("---")

        # Selecting the rows 1 to 6 and columns 76 to 81
        selected_data = df3.iloc[np.r_[22, 24, 27], 91:96]
        selected_data = selected_data.round(1)
        selected_data.columns = [2024, 2023, 2022, 2021, 2020]

        # Create a light range of the 'Greys' colormap
        base_cmap = plt.get_cmap('Greys')
        colors = base_cmap(np.linspace(0.2, 0.8, num=len(selected_data.columns)))

        # Creating a figure and a set of subplots
        fig, ax = plt.subplots(figsize=(15, 10))

        # Plotting using ax
        selected_data.plot(kind='bar', ax=ax, width=0.9, color=colors)

        for p in ax.patches:
            # Format the height with one decimal place
            height = p.get_height()
            ax.annotate(f'{height:.1f}', (p.get_x() + p.get_width() / 2., height),
                        ha='center', va='center', xytext=(0, 10), textcoords='offset points', fontsize=16)

        # Setting the labels and title using ax methods
        custom_labels = ["Rec Oper Líquida / Base Torcedores", 
                         "Rec Venda Jogadores / Pontuação Série A",
                         "Rec Oper Líquida / Pontuação Série A"]
        
        def adjust_labels(labels, max_len=18):
            adjusted_labels = []
            for label in labels:
                if len(label) > max_len:
                    # Find the index of the slash in the label
                    slash_index = label.find('/')
                    if slash_index != -1:
                        # Split the label right after the slash and keep the slash at the end of the first line
                        label = label[:slash_index + 1] + '\n' + label[slash_index + 1:]
                adjusted_labels.append(label)
            return adjusted_labels

        # Apply the function to custom_labels
        adjusted_custom_labels = adjust_labels(custom_labels)

        ax.set_xticklabels(adjusted_custom_labels, fontsize=16, rotation=0)
        #ax.set_title('Índices', fontsize=24, fontweight="bold")
        ax.tick_params(axis='y', labelsize=16)
        ax.legend(bbox_to_anchor=(0.5, -0.1), loc='upper center', ncol=5, fontsize=18, frameon=False)
        #ax.set_ylabel('Despesas (em R$ milhões, em moeda constante)', fontsize=18)
        ax.spines['right'].set_visible(False)
        ax.spines['top'].set_visible(False)
        # Adding a note below the graph using the axes
        note_text = "Nota: As variáveis estão, respectivamente, em Reais/torcedor"
        note_text_2 = "e milhões/ponto conquistado nas duas últimas."
        ax.text(0, -0.25, note_text, transform=ax.transAxes, ha="left", fontsize=18, color="black")
        ax.text(0, -0.31, note_text_2, transform=ax.transAxes, ha="left", fontsize=18, color="black")

        # Adjust layout and show plot
        fig.tight_layout()
        st.pyplot(fig)        

######################################################################################################################

        st.markdown("---")

        # Selecting the rows 1 to 6 and columns 76 to 81
        selected_data = df3.iloc[np.r_[25:27, 31, 33], 91:96]
        selected_data = selected_data.round(2)
        selected_data.columns = [2024, 2023, 2022, 2021, 2020]

        # Create a light range of the 'Greys' colormap
        base_cmap = plt.get_cmap('Greys')
        colors = base_cmap(np.linspace(0.2, 0.8, num=len(selected_data.columns)))

        # Creating a figure and a set of subplots
        fig, ax = plt.subplots(figsize=(15, 10))

        # Plotting using ax
        selected_data.plot(kind='bar', ax=ax, width=0.95, color=colors)

        for p in ax.patches:
            # Format the height with one decimal place
            height = p.get_height()
            ax.annotate(f'{height:.2f}', (p.get_x() + p.get_width() / 2., height),
                        ha='center', va='center', xytext=(0, 10), textcoords='offset points', fontsize=14)

        # Setting the labels and title using ax methods
        custom_labels = ["Receita com Premiação / Folha do Futebol",
                         "Folha do futebol / Pontuação Série A", 
                         "Dívida / Rec Oper Líquida", 
                         "Folha futebol + Compra jogadores / Rec Oper Líquida"]
        
        def adjust_labels(labels, max_len=18):
            adjusted_labels = []
            for label in labels:
                if len(label) > max_len:
                    # Find the index of the slash in the label
                    slash_index = label.find('/')
                    if slash_index != -1:
                        # Split the label right after the slash and keep the slash at the end of the first line
                        label = label[:slash_index + 1] + '\n' + label[slash_index + 1:]
                adjusted_labels.append(label)
            return adjusted_labels

        # Apply the function to custom_labels
        adjusted_custom_labels = adjust_labels(custom_labels)

        ax.set_xticklabels(adjusted_custom_labels, fontsize=16, rotation=0)
        #ax.set_title('Índices', fontsize=24, fontweight="bold")
        ax.tick_params(axis='y', labelsize=16)
        ax.legend(bbox_to_anchor=(0.5, -0.1), loc='upper center', ncol=5, fontsize=18, frameon=False)
        #ax.set_ylabel('Despesas (em R$ milhões, em moeda constante)', fontsize=18)
        ax.spines['right'].set_visible(False)
        ax.spines['top'].set_visible(False)
        # Adding a note below the graph using the axes
        note_text = "Nota: As variáveis estão, respectivamente, em % da Folha do futebol, milhões/ponto conquistado,"
        note_text_2 = "e % da Rec Operacional Líquida nas duas últimas."
        ax.text(0, -0.25, note_text, transform=ax.transAxes, ha="left", fontsize=18, color="black")
        ax.text(0, -0.31, note_text_2, transform=ax.transAxes, ha="left", fontsize=18, color="black")

        # Adjust layout and show plot
        fig.tight_layout()
        st.pyplot(fig)        




######################################################################################################################
######################################################################################################################
######################################################################################################################
######################################################################################################################

elif st.session_state.selected_option == "Índice de Transparência":

    # Custom CSS for better formatting
    st.markdown("""
    <style>
        .main {
            padding: 2rem;
        }
        .stAlert {
            background-color: #f8f9fa;
            padding: 1rem;
            border-radius: 0.5rem;
            border-left: 5px solid #ff4b4b;
        }
        .info-box {
            background-color: #e6f3ff;
            padding: 1rem;
            border-radius: 0.5rem;
            border-left: 5px solid #4B8BF5;
            margin-bottom: 1rem;
        }
        h1, h2, h3 {
            color: #1E3A8A;
        }
        .katex {
            font-size: 1.1em;
        }
    </style>
    """, unsafe_allow_html=True)

    # Custom styled title
    st.markdown("""
    <h5 style='font-size: 20px; font-weight: bold; font-family: Arial, sans-serif; color: #1E3A8A; margin-bottom: 10px;'>
    ℹ️ Sobre esta análise
    </h5>
    """, unsafe_allow_html=True)

    with st.expander("ℹ️ Clique para expandir", expanded=False):
        st.markdown("""
        <div class="info-box">
        <h4>Índice de Transparência:</h4>
        <p>O Índice de Transparência das Demonstrações Financeiras oferece uma avaliação objetiva da qualidade 
        e abrangência dos relatórios financeiros publicados pelos clubes brasileiros. Baseado em metodologia acadêmica, 
        o índice analisa três níveis distintos: Reportes Obrigatórios (exigidos por lei), 
        Reportes Discricionários (informações voluntárias) e Indicadores de Qualidade (aspectos que elevam a utilidade das informações). 
        O resultado é apresentado em um gráfico de barras empilhadas que permite visualizar a pontuação total de cada clube 
        e a contribuição de cada nível para essa pontuação, além de uma tabela detalhada com os valores específicos. 
        Esta ferramenta possibilita comparar objetivamente as práticas de transparência financeira entre os clubes, 
        incentivando melhores padrões de governança no futebol brasileiro.</p>
        </div>
        """, unsafe_allow_html=True)
    
    st.write("---")

    st.markdown("<h4 style='text-align: center;  color: black;'><br>Índice de Transparência das Demonstrações Financeiras<br>2024</b></h4>", unsafe_allow_html=True)
    #st.markdown("---")

    def main():
        royal_style = """
        <style>
            .royal-text {
                font-family: 'Times New Roman', Times, serif; /* Classic, formal font */
                font-size: 18px; /* Larger text size */
                color: #000080; /* Royal blue color */
                text-align: center; /* Centered text */
                margin: 18px; /* Adds space around the text */
            }
        </style>
        """

        text = """Inspirado nos trabalhos de Capelo, Grafietti, Kessel e Salomão (2021), Horvath e Vaško (2012) e Antunes, De Moraes e Grapiúna (2023)."""

        # Inject HTML with style
        st.markdown(royal_style, unsafe_allow_html=True)

        # Display styled text
        st.markdown(f'<div class="royal-text">{text}</div>', unsafe_allow_html=True)

    if __name__ == "__main__":
        main()    

    tópico = df4.iloc[0:3, 1:].transpose()

    # Retrieve labels for the bars from the first row
    labels = df4.iloc[0:3, 0]  # Assuming labels are in the first column

# Pairing clubs with their revenues and sorting them by revenue in descending order
    df_sorted = tópico.assign(Total=tópico.sum(axis=1)).sort_values(by='Total', ascending=False)
    sorted_clubes = df_sorted.index

    def create_transparency_index_chart(tópico, sorted_clubes, labels, club_image_paths):
        """
        Create a stacked bar chart for transparency index with properly aligned club logos
        """
        # Create figure with proper dimensions
        fig, ax = plt.subplots(figsize=(15, 10))
        
        # Prepare the data
        df_sorted = tópico.reindex(sorted_clubes)
        
        # Set y-axis limits without negative space
        max_value = df_sorted.sum(axis=1).max()
        ax.set_ylim(0, max_value * 1.1)  # Only positive space for bars
        
        # Colors for the bars
        colors = ['skyblue', 'lightgreen', 'salmon']
        bottom = None
        
        # Plot stacked bars
        for name, color, label in zip(df_sorted.columns, colors, labels):
            bars = ax.bar(range(len(sorted_clubes)), df_sorted[name], bottom=bottom, 
                        label=label, color=color)
            bottom = df_sorted[name] if bottom is None else bottom + df_sorted[name]
        
        # Function to get club logo with proper sizing
        def getImage(url):
            try:
                response = requests.get(url)
                img = Image.open(BytesIO(response.content))
                
                # Make sure image has transparency
                if img.mode != 'RGBA':
                    img = img.convert('RGBA')
                    
                return OffsetImage(img, zoom=0.10)  # Further reduced zoom for better alignment
            except Exception as e:
                print(f"Error loading image from {url}: {e}")
                return None
        
        # Add club logos directly in main axes, but at bottom
        for i, club in enumerate(sorted_clubes):
            img_url = club_image_paths.get(club)
            if img_url:
                img = getImage(img_url)
                if img:
                    # Position logos exactly under each bar
                    ab = AnnotationBbox(
                        img, 
                        (i, -max_value * 0.02),  # Small negative offset to place just below x-axis
                        xycoords='data',
                        box_alignment=(0.5, 1.0),  # Align top-center of logo with position
                        frameon=False
                    )
                    ax.add_artist(ab)
                else:
                    print(f"Failed to load image for {club}")
        
        # Extend bottom margin for logos
        ax.set_ylim(-max_value * 0.08, max_value * 1.1)  # Add small negative space for logos
        
        # Remove x-ticks
        ax.set_xticks([])
        
        # Set y-axis label and style
        ax.set_ylabel(f'Índice de Transparência', fontsize=20, fontweight='bold')
        ax.tick_params(axis='y', labelsize=16)
        
        # Remove spines for cleaner look
        ax.spines['right'].set_visible(False)
        ax.spines['top'].set_visible(False)
        ax.spines['bottom'].set_visible(False)
        
        # Adding text above bars - total values
        for i, club in enumerate(sorted_clubes):
            total_height = df_sorted.loc[club].sum()
            ax.annotate(f'{total_height:.1f}', 
                    xy=(i, total_height),
                    xytext=(0, 3),  # 3 points vertical offset
                    textcoords="offset points",
                    ha='center', va='bottom', fontsize=16)
        
        # Add legend at bottom
        leg = ax.legend(loc='upper center', bbox_to_anchor=(0.5, -0.09), 
                    fontsize=16, frameon=False, ncol=3)
        
        # Adjust margins
        plt.tight_layout(rect=[0, 0.05, 1, 1])  # Leave space at bottom for logos
        
        return fig


    # Usage example:
    fig = create_transparency_index_chart(tópico, sorted_clubes, labels, club_image_paths)
    st.pyplot(fig)

    #Detalhando
    st.markdown("<h4 style='text-align: center;  color: black;'><br>Detalhando o Índice de Transparência</b></h4>", unsafe_allow_html=True)
    #st.markdown("---")


    tabela = df5.iloc[0:4, 1:]
    tabela.set_index('Clubes', inplace=True)
    tabela_t = tabela.T
    # Sort the DataFrame by the last column, descendingly
    last_column = tabela_t.columns[-1]  # Get the last column name
    tabela_t = tabela_t.sort_values(by=last_column, ascending=False)

    # Styling DataFrame using Pandas
    def style_table(df):
        return df.style.format("{:.1f}").set_table_styles(
            [{
                'selector': 'thead th',
                'props': [('font-weight', 'bold'),
                        ('border-style', 'solid'),
                        ('border-width', '0px 0px 2px 0px'),
                        ('border-color', 'black')]
            }, {
                'selector': 'thead th:not(:first-child)',
                'props': [('text-align', 'center')]  # Centering all headers except the first
            }, {
                'selector': 'thead th:last-child',
                'props': [('color', 'red')]  # Make last column header red
            }, {
                'selector': 'td',
                'props': [('border-style', 'solid'),
                        ('border-width', '0px 0px 1px 0px'),
                        ('border-color', 'black'),
                        ('text-align', 'center')]
            }, {
                'selector': 'td:last-child',
                'props': [('font-weight', 'bold'),
                        ('color', 'red')]  # Make last column data bold and red
            }, {
                'selector': 'th',
                'props': [('border-style', 'solid'),
                        ('border-width', '0px 0px 1px 0px'),
                        ('border-color', 'black'),
                        ('text-align', 'left')]
            }]
        ).set_properties(**{
            'padding': '8px',
#            'text-align': 'center'
            
        })

    # Displaying in Streamlit
    def main():
        st.title("")

        # Convert the styled DataFrame to HTML and display it
        styled_html = style_table(tabela_t).to_html(escape=False)
        st.markdown(styled_html, unsafe_allow_html=True)

    if __name__ == '__main__':
        main()

    #Acessando a Metodologia do Índice: 
    st.markdown("<h4 style='text-align: center;  color: black;'><br>Metodologia do Índice de Transparência</b></h4>", unsafe_allow_html=True)

    #Downloading Transparency Index Methodology
    button = st.link_button("Metodologia do Índice", 'https://raw.githubusercontent.com/JAmerico1898/Financials-2025/55e6685a50b56052dbb6ba674c963a1426044435/Indice%20de%20Transparencia%20-%20Metodologia.pdf')

    def main1():

        # URL of the PDF document
        # Make sure to use a raw string for the file path
        pdf_url = 'https://raw.githubusercontent.com/JAmerico1898/Financials-2025/55e6685a50b56052dbb6ba674c963a1426044435/Indice%20de%20Transparencia%20-%20Metodologia.pdf'

        # Button to open PDF in a new tab
        if st.link_button('Metodologia do Índice'):
            # Open URL in a new tab using JavaScript
            js = f"window.open('{pdf_url}')"  # JavaScript to open a new window/tab
            st.markdown(f'<img src onerror="{js}">', unsafe_allow_html=True)

    if __name__ == '__main1__':
        main1()    


# Rodapé estilizado
st.markdown("---", unsafe_allow_html=True)

st.markdown(
    """
    <div style="text-align: center; color: gray; font-size: 0.9em;">
        Almanaque Financeiro da Série A - 2024<br>
        2025 - José Américo
    </div>
    """,
    unsafe_allow_html=True
)

